/*
	Copyright (C) 2008 Seeing Machines Ltd. All rights reserved.

	This file is part of the FaceTrackingAPI, also referred to as "faceAPI".

	This file may be distributed under the terms of the Seeing Machines 
	FaceTrackingAPI Non-Commercial License Agreement.

	This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
	WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

	Further information about faceAPI licensing is available at:
	http://www.seeingmachines.com/faceapi/licensing.html
*/
#ifndef SM_API_FILETRACK_H
#define SM_API_FILETRACK_H

/*! @file
    Defines functions that perform tracking in movie files. */
#ifdef __cplusplus
extern "C"
{
#endif

/*! @brief Possible tracking-modes to use when tracking files. */
typedef enum smFileTrackMode
{
    SM_API_FILE_TRACK_SINGLETHREADED = 0,   /*!< Track deterministically frame-by-frame. */
    SM_API_FILE_TRACK_REALTIME = 1,         /*!< Track ensuring realtime playback. Tracking results will differ under different CPU load conditions. */
    SM_API_FILE_TRACK_NUM_MODES             /*!< The number of file track modes */
} smFileTrackMode;

#define SM_API_FILE_TRACK_FLAG_LIPS 1                        /*!< Track lip landmarks. */
#define SM_API_FILE_TRACK_FLAG_EYEBROWS 2                    /*!< Track eyebrow landmarks. */
#define SM_API_FILE_TRACK_FLAG_SHOW_VIDEO 4                  /*!< Show progress on a popup display window. */
#define SM_API_FILE_TRACK_FLAG_RECORD_VIDEO 8                /*!< Record the video and overlaid tracking information to a .wmv file in the output folder. */
#define SM_API_FILE_TRACK_FLAG_RECORD_VIDEO_COMPRESSED 16    /*!< Record the video in a compressed format if possible. */
#define SM_API_FILE_TRACK_FLAG_LOG_TRACKING_DATA 32          /*!< Record tracking data to logfiles in the output folder. */
#define SM_API_FILE_TRACK_MAX_FLAGS 6                        /*!< The maximum number of flags that can be used with smFileTrack() */

/*! @brief Tracks a single human face in a movie file.

    Valid file types are .mov, .avi, .wmv, .asf, .mp4 and potentially others depending on the
    codecs installed on the PC. As a general guide if the file is playable in a media-player application
    and is internally indexed by frame-number, then it is likely to work. Files that do not have valid durations 
    under the file properties (right-click the file under windows explorer) generally cannot be used. 

    @param mode See smFileTrackMode.
    @param movie_filename The full path and filename of the input movie file. See smStringReadBuffer().
    @param output_folder Folder where output movie file and tracking logfiles are written.
    @param flags Bitwise or combination of SM_API_FILE_TRACK_FLAG* used to specify tracking and recording options.
    @param cal_filename Optional lens calibration file (*.lens) generated by CamCal tool. Can be NULL handle (ie. 0). If specified, any @a approx_fov_deg argument is ignored.
    @param approx_hfov_deg If no cal_filename is specified then this must point to an integer value between 1 and 89 degrees, otherwise can be 0.
    @return @ref smReturnCode "SM_API_OK" if the file was tracked without error. 
    
    @note 
    - Only 1 call to this function locks all non-reentrant API functions and blocks the caller until the processing is complete.
      Other threads calling API functions will also be blocked.
    - It is recognized that this is undesirable, and a future version is planned to avoid locking / blocking,
      and allow for multiple files to be tracked simultanously, with progress reporting etc.
         
    @see
    - smFileTrackMode
    - smStringReadBuffer() */
SM_API(smReturnCode) smFileTrack(smFileTrackMode mode,
                                 smStringHandle movie_filename, 
                                 smStringHandle output_folder,
                                 unsigned int flags,
                                 smStringHandle cal_filename,
                                 int *approx_hfov_deg);

/*! @brief Aborts all smFileTrack functions currently being executed.     
    
    Tracking is stopped gracefully and the smFileTrack() function will return SM_API_OK.
    @return @ref smReturnCode "SM_API_OK" if the function completed successfully. */
SM_API(smReturnCode) smFileTrackAbortAll();

#ifdef __cplusplus
}
#endif
#endif


