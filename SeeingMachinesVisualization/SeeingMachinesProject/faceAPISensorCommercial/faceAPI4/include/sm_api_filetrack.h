/*
	Copyright (C) 2013 Seeing Machines Ltd. All rights reserved.

	This file is part of the FaceTrackingAPI, also referred to as faceAPI.

	This file may be distributed under the terms of the Seeing Machines 
	FaceTrackingAPI Development License Agreement.

	Licensees holding a valid License Agreement may use this file in
	accordance with the rights, responsibilities and obligations
	contained therein. Please consult your licensing agreement or
	contact info@seeingmachines.com if any conditions of this licensing
	agreement are not clear to you.

	This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
	WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

	Further information about faceAPI licensing is available at:
	http://www.seeingmachines.com/faceapi/licensing.html
*/

#if !defined(SWIG) && !defined(SM_API_H)
#error Do not include this file. Include sm_api.h instead.
#endif

#ifndef SM_API_FILETRACK_H
#define SM_API_FILETRACK_H

/*! @file
    Defines functions that perform tracking in movie files. */
#ifdef __cplusplus
extern "C"
{
#endif

/*! @brief Possible tracking-modes to use when tracking files. */
typedef enum smFileTrackMode
{
    SM_API_FILE_TRACK_DETERMINISTIC = 0,    /*!< Track deterministically frame-by-frame. */
    SM_API_FILE_TRACK_REALTIME = 1,         /*!< Track ensuring realtime playback. Tracking results will differ under different CPU load conditions. */
    SM_API_FILE_TRACK_NUM_MODES             /*!< The number of file track modes */
} smFileTrackMode;

#define SM_API_FILE_TRACK_FLAG_LIPS 1                        /*!< Track lip landmarks. */
#define SM_API_FILE_TRACK_FLAG_EYEBROWS 2                    /*!< Track eyebrow landmarks. */
#define SM_API_FILE_TRACK_EYECLOSURE 4                       /*!< Track eyelid closure. */
#define SM_API_FILE_TRACK_FLAG_SHOW_VIDEO 8                  /*!< Show progress on a popup display window. */
#define SM_API_FILE_TRACK_FLAG_RECORD_VIDEO 16               /*!< Record the video and overlaid tracking information to a .wmv file in the output folder. */
#define SM_API_FILE_TRACK_FLAG_RECORD_VIDEO_COMPRESSED 32    /*!< Record the video in a compressed format if possible. */
#define SM_API_FILE_TRACK_FLAG_LOG_TRACKING_DATA 64          /*!< Record tracking data to logfiles in the output folder. */
#define SM_API_FILE_TRACK_FLAG_ALL 127
#define SM_API_FILE_TRACK_MAX_FLAGS 7                        /*!< The maximum number of flags that can be used with smFileTrack() */

/*! @struct smFileTrackerHandle
    @brief Used to manage an instance of an engine that is configured to track faces in a movie file and produce a logfile. */
SM_API_DECLARE_HANDLE(smFileTrackerHandle);

/*! @brief Creates a new FileTracker that commences tracking faces in a movie file.

    Valid file types are .mov, .avi, .wmv, .asf, .mp4 and potentially others depending on the
    codecs installed on the PC. As a general guide if the file is playable in a media-player application
    and is internally indexed by frame-number, then it is likely to work. Files that do not have valid durations 
    under the file properties (right-click the file under windows explorer) generally cannot be used. 

    @param file_tracker_handle Must point to a handle. Set to the instance of a file-tracker.
    @param mode See smFileTrackMode.
    @param movie_filename The full path and filename of the input movie file. See smStringReadBuffer().
    @param output_folder Folder where output movie file and binary logfile is written.
    @param flags Bitwise or combination of SM_API_FILE_TRACK_FLAG* used to specify tracking and recording options.
    @param cal_filename Optional lens calibration file (*.lens) generated by CamCal tool. Can be NULL handle (ie. 0). If specified, any @a approx_fov_deg argument is ignored.
    @param approx_hfov_deg If no cal_filename is specified then this must point to an integer value between 1 and 89 degrees, otherwise can be NULL.
    @param pose_filter_level If not NULL, value pointed to is used to call smHTV2GetHeadPoseMaxFilterLevel() for the engine before tracking commences, otherwise pose-filtering is left at the default setting.
    @param eyebrow_dof If  not NULL, value pointed to is used to call smHTGetEyebrowTrackingDOF() for the engine before tracking commences, otherwise eyebrow DOF is left at the default setting.
    @return @ref smReturnCode "SM_API_OK" if the file was tracked without error. 
    
    @note
    - If calling this function from within a worker thread, be sure to call smCameraRegisterType(SM_API_CAMERA_TYPE_FILE) beforehand.
    - When called from within a worker thread, display and recording of the tracking video is unavailable.
    - Interpreting the data in the output logfile requires using the Seeing Machines CoreData API, available as a free download
      from Seeing Machines website at http://www.seeingmachines.com/support/downloads/#3.
    - This function currently uses a FileCamera with a HeadTrackingEngineV2. 
      In many cases it is easier to implement this function yourself by following the sample code in the TestAppFileCamera 
      project, as this provides easy access to the tracking data via smEngineDataWaitNext(). 
    - However future versions of FileTrackers may perform advanced a-causal processing to obtain 
      higher-quality results than can be achieved with any other tracking engine.
       
    @see
    - smFileTrackerWaitComplete()
    - smFileTrackerDestroy() */
SM_API(smReturnCode) smFileTrackerCreate(
    smFileTrackerHandle *file_tracker_handle,
    smFileTrackMode mode,
    smStringHandle movie_filename, 
    smStringHandle output_folder,
    unsigned int flags,
    smStringHandle cal_filename,
    int *approx_hfov_deg,
    int *pose_filter_level,
    int *eyebrow_dof);

/*! @brief Waits for a FileTracker to complete, or timeout.

    @param file_tracker_handle A valid handle created from smFileTrackerCreate()
    @param timeout_ms Maximum period to wait for the FileTracker to complete before timeout, must be >= 0.
    @param complete Pointer to an existing smBool. Set to true if the FileTracker completed processing. 
    @return @ref smReturnCode "SM_API_OK" if no error occurred. */
SM_API(smReturnCode) smFileTrackerWaitComplete(smFileTrackerHandle file_tracker_handle, int timeout_ms, smBool *complete);


/*! @brief Destroys a FileTracker, aborting any processing if it is not complete.

    Even if tracking was completed, it is necessary to call this function to free internal memory.

    @param file_tracker_handle A pointer to a valid handle created from smFileTrackerCreate(). Set to 0 when destroyed.
    @return @ref smReturnCode "SM_API_OK" if the tracker was destroyed successfully. */
SM_API(smReturnCode) smFileTrackerDestroy(smFileTrackerHandle *file_tracker_handle);

/*! @brief Tracks a single human face in a movie file, blocking the caller until complete.

    Calling this function blocks the calling thread until processing is complete.

    If your application has a GUI and must remain responsive to the user, it is recommended that you use 
    smFileTrackerCreate() instead which does not block.

    Otherwise the function behaves identically to smFileTrackerCreate().

    @param mode Deterministic or realtime tracking. Realtime tracking will drop frames to ensure frame throughput.
    @param movie_filename The full path and filename of the input movie file. See smStringReadBuffer().
    @param output_folder Folder where output movie file and binary logfile is written.
    @param flags Bitwise or combination of SM_API_FILE_TRACK_FLAG* used to specify tracking and recording options.
    @param cal_filename Optional lens calibration file (*.lens) generated by CamCal tool. Can be NULL handle (ie. 0). If specified, any @a approx_fov_deg argument is ignored.
    @param approx_hfov_deg If no cal_filename is specified then this must point to an integer value between 1 and 89 degrees, otherwise can be NULL.
    @param pose_filter_level If not NULL, value pointed to is used to call smHTV2GetHeadPoseMaxFilterLevel() for the engine before tracking commences, otherwise pose-filtering is left at the default setting.
    @param eyebrow_dof If  not NULL, value pointed to is used to call smHTGetEyebrowTrackingDOF() for the engine before tracking commences, otherwise eyebrow DOF is left at the default setting.
    @return @ref smReturnCode "SM_API_OK" if the file was tracked without error. 
    
    @see
    - smFileTrackerCreate() 
    - smFileTrackerAbortAll() */
SM_API(smReturnCode) smFileTrack(smFileTrackMode mode,
                                 smStringHandle movie_filename, 
                                 smStringHandle output_folder,
                                 unsigned int flags,
                                 smStringHandle cal_filename,
                                 int *approx_hfov_deg,
                                 int *pose_filter_level,
                                 int *eyebrow_dof);


/*! @brief Aborts processing of all FileTrackers.

    Destroys all smFileTracker handles. Any handles in use will become invalid.

    If any thread is waiting on smFileTrack(), then tracking is stopped gracefully 
    and smFileTrack() function will return SM_API_OK.

    @return @ref smReturnCode "SM_API_OK" if the function completed successfully. */
SM_API(smReturnCode) smFileTrackAbortAll();

#ifdef __cplusplus
}
#endif
#endif


