//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Construct.Sensors.FaceLabSensor.SensorService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/Construct.Sensors.SensorBase")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConnectedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnected {
            get {
                return this.IsConnectedField;
            }
            set {
                if ((this.IsConnectedField.Equals(value) != true)) {
                    this.IsConnectedField = value;
                    this.RaisePropertyChanged("IsConnected");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SensorService.ISensor")]
    public interface ISensor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensor/Start", ReplyAction="http://tempuri.org/ISensor/StartResponse")]
        string Start();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensor/Stop", ReplyAction="http://tempuri.org/ISensor/StopResponse")]
        string Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensor/EmitData", ReplyAction="http://tempuri.org/ISensor/EmitDataResponse")]
        string EmitData(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensor/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ISensor/GetDataUsingDataContractResponse")]
        Construct.Sensors.FaceLabSensor.SensorService.CompositeType GetDataUsingDataContract(Construct.Sensors.FaceLabSensor.SensorService.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISensorChannel : Construct.Sensors.FaceLabSensor.SensorService.ISensor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SensorClient : System.ServiceModel.ClientBase<Construct.Sensors.FaceLabSensor.SensorService.ISensor>, Construct.Sensors.FaceLabSensor.SensorService.ISensor {
        
        public SensorClient() {
        }
        
        public SensorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SensorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SensorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SensorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Start() {
            return base.Channel.Start();
        }
        
        public string Stop() {
            return base.Channel.Stop();
        }
        
        public string EmitData(string message) {
            return base.Channel.EmitData(message);
        }
        
        public Construct.Sensors.FaceLabSensor.SensorService.CompositeType GetDataUsingDataContract(Construct.Sensors.FaceLabSensor.SensorService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
    }
}
