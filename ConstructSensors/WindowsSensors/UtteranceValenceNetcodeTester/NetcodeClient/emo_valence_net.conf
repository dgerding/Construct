
///////////////////////////////////////////////////////////////////////////////////////
///////// > openSMILE configuration file for live emotion recognition < ///////////////
/////////   base set of 988 features, 1st level functionals          //////////////////
/////////   of low-level descriptors such as MFCC, Pitch, LSP, ...   //////////////////
/////////                                                            //////////////////
/////////  * written 2009 by Florian Eyben *                         //////////////////
/////////                                                            //////////////////
///////// (c) 2009 by Florian Eyben, Martin Wöllmer, Björn Schuller  //////////////////
/////////     see the file COPYING for details                       //////////////////
///////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////
;
; This section is always required in openSMILE configuration files
;   it configures the componentManager and gives a list of all components which are to be loaded
; The order in which the components are listed should match 
;   the order of the data flow for most efficient processing
;
///////////////////////////////////////////////////////////////////////////////////////
[componentInstances:cComponentManager]
 ;this line configures the default data memory:
instance[dataMemory].type=cDataMemory
 ;;; PortAudio live sound card input
instance[waveInNet].type=cTcpWaveSource
;instance[waveIn].type=cWaveSource
instance[waveOut].type=cWaveSink
instance[fr25].type=cFramer
 ;; VAD (energy-based)
instance[energy].type=cEnergy
 ;;; 40 ms frames features:
instance[fr40].type=cFramer
instance[w40].type=cWindower
instance[fft40].type=cTransformFFT
instance[fftmagphase40].type=cFFTmagphase
instance[acf40].type=cAcf
instance[cepstrum40].type=cAcf
 ; Pitch...
instance[pitchACF].type=cPitchACF
 ;;; 25 ms frames features:
instance[pe].type=cVectorPreemphasis
instance[win].type=cWindower
instance[fft].type=cTransformFFT
instance[fftmagphase].type=cFFTmagphase
instance[mspec].type=cMelspec
 ; MFCC
instance[mfcc].type=cMfcc
instance[lpc].type=cLpc
 ; Line Spectral Frequencies
instance[lsp].type=cLsp
 ; Zero-Crossings
instance[mzcr].type=cMZcr
 ; Intensity and Loudness (narrow-band approximation)
instance[intens].type=cIntensity
 ;;; all LLD concattenated and smoothed using a moving average filter
instance[lld].type=cContourSmoother
 ; delta coefficients of LLD
instance[delta1].type=cDeltaRegression
 ;;; functionals over FULL input (e.g. turns)
instance[functL1].type=cFunctionals
instance[bow].type=cBowProducer
 ;;; write instances to a Weka ARFF file (comment out to disable)
instance[arffsink].type=cArffSink
;instance[lldsave].type=cCsvSink
 ;;; live classification of emotion (comment out lines to disable them):
instance[valence].type=cLibsvmLiveSink



;; run single threaded (nThreads=1)
; NOTE: a single thread is more efficient for processing small files, since multi-threaded processing involves more 
;       overhead during startup, which will make the system slower in the end
nThreads=1
;; do not show any internal dataMemory level settings 
; (if you want to see them set the value to 1, 2, 3, or 4, depending on the amount of detail you wish)
printLevelStats=0


/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////   component configuration  ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
; the following sections configure the components listed above
; a help on configuration parameters can be obtained with 
;  SMILExtract -H
; or
;  SMILExtract -H configTypeName (= componentTypeName)
/////////////////////////////////////////////////////////////////////////////////////////////

[waveInNet:cTcpWaveSource]
 ; this sets the level this component writes to
 ; the level will be created by this component
 ; no other components may write to a level having the same name
writer.dmLevel=wave
writer.levelconf.nT = 160000
 ; mix stereo files down to mono for analysis
monoMixdown=1  
 ; server
;remoteIP = 127.0.0.1
bindToIP = 127.0.0.1
port = 13000
messageRecp = functL1,bow
textRecp = bow
llFramePeriod = 0.01
maxTurnLength = 0
msgInterval = 0
sampleRate = 16000
sampleSize = 2
channels = 1
endDiscard = 8

[WaveIn:cWaveSource]
 ; this sets the level this component writes to
 ; the level will be created by this component
 ; no other components may write to a level having the same name
writer.dmLevel=wave
 ; this defines a new commandline option "-I" or "-inputfile", which can be used to specify 
 ; the filename on the commandline instead of having it "hard-coded" in the config file
filename=\cm[inputfile(I){test.wav}:name of input file]
 ; mix stereo files down to mono for analysis
monoMixdown=1

[waveOut:cWaveSink]
reader.dmLevel = wave
filename = test.wav
flushData = 1
blocksize_sec = 0.02

[fr40:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames40
frameSize = 0.040
frameStep = 0.010

[w40:cWindower]
reader.dmLevel=frames40
writer.dmLevel=win40frame
winFunc = ham
gain = 1.0


[fft40:cTransformFFT]
reader.dmLevel=win40frame
writer.dmLevel=fftc40

[fftmagphase40:cFFTmagphase]
reader.dmLevel=fftc40
writer.dmLevel=fftmag40


[acf40:cAcf]
reader.dmLevel=fftmag40
writer.dmLevel=acf40

[cepstrum40:cAcf]
reader.dmLevel=fftmag40
writer.dmLevel=cepstrum40
cepstrum=1

[pitchACF:cPitchACF]
  ; the pitchACF component must ALWAYS read from acf AND cepstrum in the given order!
reader.dmLevel=acf40;cepstrum40
writer.dmLevel=pitch
processArrayFields=0
F0=1
voiceProb=1
HNR=0
F0env=1
voiceQual=0

[fr25:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames
frameSize = 0.025
frameStep = 0.010


[pe:cVectorPreemphasis]
reader.dmLevel=frames
writer.dmLevel=framespe
k=0.97

[win:cWindower]
reader.dmLevel=framespe
writer.dmLevel=winframe
winFunc = ham
gain = 1.0

[fft:cTransformFFT]
reader.dmLevel=winframe
writer.dmLevel=fftc

[fftmagphase:cFFTmagphase]
reader.dmLevel=fftc
writer.dmLevel=fftmag

[mspec:cMelspec]
reader.dmLevel=fftmag
writer.dmLevel=mspec1
htkcompatible = 1
usePower = 1
lofreq = 0
hifreq = 8000

[mfcc:cMfcc]
reader.dmLevel=mspec1
writer.dmLevel=mfcc1
firstMfcc = 1
lastMfcc =  12
htkcompatible = 1

[lpc:cLpc]
reader.dmLevel=framespe
writer.dmLevel=lpc
p=8

[lsp:cLsp]
reader.dmLevel=lpc
writer.dmLevel=lsp

[intens:cIntensity]
reader.dmLevel=frames
writer.dmLevel=intens
intensity=1
loudness=1

[mzcr:cMZcr]
reader.dmLevel=frames
writer.dmLevel=mzcr
zcr=1
amax=0
mcr=0
maxmin=0

[lld:cContourSmoother]
reader.dmLevel=intens;mfcc1;lsp;mzcr;pitch
writer.dmLevel=lld
buffersize=2000
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
; this level must grow to hold ALL the LLD of the full input

// ---- delta regression of LLD ----
[delta1:cDeltaRegression]
reader.dmLevel=lld
writer.dmLevel=lld_de
buffersize=2000
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
deltawin=2
blocksize=1

[energy:cEnergy]
reader.dmLevel=winframe
writer.dmLevel=energy
rms=1
log=0


// statistical functionals
[functL1:cFunctionals]
reader.dmLevel=lld;lld_de
writer.dmLevel=func
 ; frameMode = var will enable the functionals component to listen for messages from the turn detector
frameSize=0
frameStep=0
frameMode = var
functionalsEnabled=Extremes;Regression;Moments;Percentiles
Extremes.maxameandist=0
Extremes.minameandist=0
Extremes.amean=1
Regression.qregc1 = 0
Regression.qregc2 = 0
Regression.qregc3 = 0
Regression.qregerrA = 0
Regression.qregerrQ = 0
Regression.centroid = 0
Regression.linregerrA = 1
Moments.variance = 0
Percentiles.quartiles = 1
Percentiles.iqr = 1

[bow:cBowProducer]
writer.dmLevel = bow
kwList = kwlist
kwListPrefixFilter = 0
prefix = BOW_
count = 0
;textfile = \cm[textfile(T){default.txt}:text file with strings for textual features]
;singleSentence = \cm[string(S):string to compute textual features from]

  //////////////////////////////////////////////////////////////////////
 ///////////////////  data output configuration  //////////////////////
//////////////////////////////////////////////////////////////////////

[lldsave:cCsvSink]
reader.dmLevel = lld
filename=lld.csv
printHeader=1
;index=1
append=0

// ----- you can use this to save the features extracted  ------
[arffsink:cArffSink]
; name of the current instance (usually file name of input wave file)
instanceName=\cm[instname(N){noname}:name of arff instance]
reader.dmLevel=func;bow
 ; do not print "frameNumber" attribute to ARFF file
number=0
 ; name of output file as commandline option
filename=\cm[arffout(O){output.arff}:name of WEKA Arff output file]
 ; name of @relation in the ARFF file
relation=\cm[corpus{SMILEfeaturesLive}:corpus name, arff relation]
 ; base name of the current instance, turn number will be appended
instanceBase=liveturn
 ; name of class label
class[0].name = valence
 ; list of nominal classes OR "numeric"
class[0].type = \cm[classes{unknown}:all classes for arff file attribute]
 ; the class label or value for the current instance
target[0].all = \cm[classlabel{unassigned}:instance class label]
 ; ** NOTE: theoretically the classified class label could be assigned here, however this would require 
 ; ** saving the class label along with the frame in the dataMemory
 ; ** or sending this meta-data via a message (including frame number)
 ; ** neither solution is currently implemented.... :-(
 ;
append=0


// LibSVM dataSink for live classification of extracted features
// continuous valence from QUB-SAL corpus
[valence:cLibsvmLiveSink]
reader.dmLevel=func;bow
; model file to use
model[0]=models/emo/sal_val.emobase.model
; scale file to use
scale[0]=models/emo/sal_val.emobase.scale
fselection[0]=fselection
useThread=0
loadModelBg=0
;; you could use the following line to send the classification result to a custom component
resultRecp=waveIn
resultMessageName=valence
;; print result to console window
printResult=1
noVerify=1
; saveResult=lsvm.result.txt

//////---------------------- END -------------------------///////
