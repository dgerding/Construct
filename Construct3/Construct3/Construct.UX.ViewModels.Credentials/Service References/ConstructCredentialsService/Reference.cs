//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Construct.UX.ViewModels.Credentials.ConstructCredentialsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConstructCredentialsService.IModel")]
    public interface IModel {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/AreConstructServerCoreEntitiesValid", ReplyAction="http://tempuri.org/IModel/AreConstructServerCoreEntitiesValidResponse")]
        bool AreConstructServerCoreEntitiesValid(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/AreConstructServerCoreEntitiesValid", ReplyAction="http://tempuri.org/IModel/AreConstructServerCoreEntitiesValidResponse")]
        System.IAsyncResult BeginAreConstructServerCoreEntitiesValid(string connectionString, System.AsyncCallback callback, object asyncState);
        
        bool EndAreConstructServerCoreEntitiesValid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/AreCredentialsAuthentic", ReplyAction="http://tempuri.org/IModel/AreCredentialsAuthenticResponse")]
        bool AreCredentialsAuthentic(string serverName, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/AreCredentialsAuthentic", ReplyAction="http://tempuri.org/IModel/AreCredentialsAuthenticResponse")]
        System.IAsyncResult BeginAreCredentialsAuthentic(string serverName, string userName, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndAreCredentialsAuthentic(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/EnsureCoreEntitiesExist", ReplyAction="http://tempuri.org/IModel/EnsureCoreEntitiesExistResponse")]
        void EnsureCoreEntitiesExist(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/EnsureCoreEntitiesExist", ReplyAction="http://tempuri.org/IModel/EnsureCoreEntitiesExistResponse")]
        System.IAsyncResult BeginEnsureCoreEntitiesExist(string connectionString, System.AsyncCallback callback, object asyncState);
        
        void EndEnsureCoreEntitiesExist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/EnsureTestItem", ReplyAction="http://tempuri.org/IModel/EnsureTestItemResponse")]
        void EnsureTestItem(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/EnsureTestItem", ReplyAction="http://tempuri.org/IModel/EnsureTestItemResponse")]
        System.IAsyncResult BeginEnsureTestItem(string connectionString, System.AsyncCallback callback, object asyncState);
        
        void EndEnsureTestItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/GetConnectionStringUsingConnectionStringName", ReplyAction="http://tempuri.org/IModel/GetConnectionStringUsingConnectionStringNameResponse")]
        string GetConnectionStringUsingConnectionStringName(string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/GetConnectionStringUsingConnectionStringName", ReplyAction="http://tempuri.org/IModel/GetConnectionStringUsingConnectionStringNameResponse")]
        System.IAsyncResult BeginGetConnectionStringUsingConnectionStringName(string name, System.AsyncCallback callback, object asyncState);
        
        string EndGetConnectionStringUsingConnectionStringName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/GetConstructServerConnectionString", ReplyAction="http://tempuri.org/IModel/GetConstructServerConnectionStringResponse")]
        string GetConstructServerConnectionString(string theServerName, string theUserName, string thePassword);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/GetConstructServerConnectionString", ReplyAction="http://tempuri.org/IModel/GetConstructServerConnectionStringResponse")]
        System.IAsyncResult BeginGetConstructServerConnectionString(string theServerName, string theUserName, string thePassword, System.AsyncCallback callback, object asyncState);
        
        string EndGetConstructServerConnectionString(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/IsConstructServerAvailable", ReplyAction="http://tempuri.org/IModel/IsConstructServerAvailableResponse")]
        bool IsConstructServerAvailable(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/IsConstructServerAvailable", ReplyAction="http://tempuri.org/IModel/IsConstructServerAvailableResponse")]
        System.IAsyncResult BeginIsConstructServerAvailable(string connectionString, System.AsyncCallback callback, object asyncState);
        
        bool EndIsConstructServerAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/IsCredentialsServerAvailable", ReplyAction="http://tempuri.org/IModel/IsCredentialsServerAvailableResponse")]
        bool IsCredentialsServerAvailable();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/IsCredentialsServerAvailable", ReplyAction="http://tempuri.org/IModel/IsCredentialsServerAvailableResponse")]
        System.IAsyncResult BeginIsCredentialsServerAvailable(System.AsyncCallback callback, object asyncState);
        
        bool EndIsCredentialsServerAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/IsExistingConnectionString", ReplyAction="http://tempuri.org/IModel/IsExistingConnectionStringResponse")]
        bool IsExistingConnectionString(string theConnectionStringName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/IsExistingConnectionString", ReplyAction="http://tempuri.org/IModel/IsExistingConnectionStringResponse")]
        System.IAsyncResult BeginIsExistingConnectionString(string theConnectionStringName, System.AsyncCallback callback, object asyncState);
        
        bool EndIsExistingConnectionString(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/IsValidationServerAvailable", ReplyAction="http://tempuri.org/IModel/IsValidationServerAvailableResponse")]
        bool IsValidationServerAvailable();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/IsValidationServerAvailable", ReplyAction="http://tempuri.org/IModel/IsValidationServerAvailableResponse")]
        System.IAsyncResult BeginIsValidationServerAvailable(System.AsyncCallback callback, object asyncState);
        
        bool EndIsValidationServerAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/LoadTestItemData", ReplyAction="http://tempuri.org/IModel/LoadTestItemDataResponse")]
        void LoadTestItemData(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/LoadTestItemData", ReplyAction="http://tempuri.org/IModel/LoadTestItemDataResponse")]
        System.IAsyncResult BeginLoadTestItemData(string connectionString, System.AsyncCallback callback, object asyncState);
        
        void EndLoadTestItemData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/Reset", ReplyAction="http://tempuri.org/IModel/ResetResponse")]
        void Reset(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/Reset", ReplyAction="http://tempuri.org/IModel/ResetResponse")]
        System.IAsyncResult BeginReset(string connectionString, System.AsyncCallback callback, object asyncState);
        
        void EndReset(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IModelChannel : Construct.UX.ViewModels.Credentials.ConstructCredentialsService.IModel, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AreConstructServerCoreEntitiesValidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AreConstructServerCoreEntitiesValidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AreCredentialsAuthenticCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AreCredentialsAuthenticCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConnectionStringUsingConnectionStringNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConnectionStringUsingConnectionStringNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConstructServerConnectionStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConstructServerConnectionStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsConstructServerAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsConstructServerAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsCredentialsServerAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsCredentialsServerAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsExistingConnectionStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsExistingConnectionStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsValidationServerAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsValidationServerAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModelClient : System.ServiceModel.ClientBase<Construct.UX.ViewModels.Credentials.ConstructCredentialsService.IModel>, Construct.UX.ViewModels.Credentials.ConstructCredentialsService.IModel {
        
        private BeginOperationDelegate onBeginAreConstructServerCoreEntitiesValidDelegate;
        
        private EndOperationDelegate onEndAreConstructServerCoreEntitiesValidDelegate;
        
        private System.Threading.SendOrPostCallback onAreConstructServerCoreEntitiesValidCompletedDelegate;
        
        private BeginOperationDelegate onBeginAreCredentialsAuthenticDelegate;
        
        private EndOperationDelegate onEndAreCredentialsAuthenticDelegate;
        
        private System.Threading.SendOrPostCallback onAreCredentialsAuthenticCompletedDelegate;
        
        private BeginOperationDelegate onBeginEnsureCoreEntitiesExistDelegate;
        
        private EndOperationDelegate onEndEnsureCoreEntitiesExistDelegate;
        
        private System.Threading.SendOrPostCallback onEnsureCoreEntitiesExistCompletedDelegate;
        
        private BeginOperationDelegate onBeginEnsureTestItemDelegate;
        
        private EndOperationDelegate onEndEnsureTestItemDelegate;
        
        private System.Threading.SendOrPostCallback onEnsureTestItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConnectionStringUsingConnectionStringNameDelegate;
        
        private EndOperationDelegate onEndGetConnectionStringUsingConnectionStringNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetConnectionStringUsingConnectionStringNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConstructServerConnectionStringDelegate;
        
        private EndOperationDelegate onEndGetConstructServerConnectionStringDelegate;
        
        private System.Threading.SendOrPostCallback onGetConstructServerConnectionStringCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsConstructServerAvailableDelegate;
        
        private EndOperationDelegate onEndIsConstructServerAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onIsConstructServerAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsCredentialsServerAvailableDelegate;
        
        private EndOperationDelegate onEndIsCredentialsServerAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onIsCredentialsServerAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsExistingConnectionStringDelegate;
        
        private EndOperationDelegate onEndIsExistingConnectionStringDelegate;
        
        private System.Threading.SendOrPostCallback onIsExistingConnectionStringCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsValidationServerAvailableDelegate;
        
        private EndOperationDelegate onEndIsValidationServerAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onIsValidationServerAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadTestItemDataDelegate;
        
        private EndOperationDelegate onEndLoadTestItemDataDelegate;
        
        private System.Threading.SendOrPostCallback onLoadTestItemDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetDelegate;
        
        private EndOperationDelegate onEndResetDelegate;
        
        private System.Threading.SendOrPostCallback onResetCompletedDelegate;
        
        public ModelClient() {
        }
        
        public ModelClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ModelClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<AreConstructServerCoreEntitiesValidCompletedEventArgs> AreConstructServerCoreEntitiesValidCompleted;
        
        public event System.EventHandler<AreCredentialsAuthenticCompletedEventArgs> AreCredentialsAuthenticCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EnsureCoreEntitiesExistCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EnsureTestItemCompleted;
        
        public event System.EventHandler<GetConnectionStringUsingConnectionStringNameCompletedEventArgs> GetConnectionStringUsingConnectionStringNameCompleted;
        
        public event System.EventHandler<GetConstructServerConnectionStringCompletedEventArgs> GetConstructServerConnectionStringCompleted;
        
        public event System.EventHandler<IsConstructServerAvailableCompletedEventArgs> IsConstructServerAvailableCompleted;
        
        public event System.EventHandler<IsCredentialsServerAvailableCompletedEventArgs> IsCredentialsServerAvailableCompleted;
        
        public event System.EventHandler<IsExistingConnectionStringCompletedEventArgs> IsExistingConnectionStringCompleted;
        
        public event System.EventHandler<IsValidationServerAvailableCompletedEventArgs> IsValidationServerAvailableCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LoadTestItemDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ResetCompleted;
        
        public bool AreConstructServerCoreEntitiesValid(string connectionString) {
            return base.Channel.AreConstructServerCoreEntitiesValid(connectionString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAreConstructServerCoreEntitiesValid(string connectionString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAreConstructServerCoreEntitiesValid(connectionString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAreConstructServerCoreEntitiesValid(System.IAsyncResult result) {
            return base.Channel.EndAreConstructServerCoreEntitiesValid(result);
        }
        
        private System.IAsyncResult OnBeginAreConstructServerCoreEntitiesValid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string connectionString = ((string)(inValues[0]));
            return this.BeginAreConstructServerCoreEntitiesValid(connectionString, callback, asyncState);
        }
        
        private object[] OnEndAreConstructServerCoreEntitiesValid(System.IAsyncResult result) {
            bool retVal = this.EndAreConstructServerCoreEntitiesValid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAreConstructServerCoreEntitiesValidCompleted(object state) {
            if ((this.AreConstructServerCoreEntitiesValidCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AreConstructServerCoreEntitiesValidCompleted(this, new AreConstructServerCoreEntitiesValidCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AreConstructServerCoreEntitiesValidAsync(string connectionString) {
            this.AreConstructServerCoreEntitiesValidAsync(connectionString, null);
        }
        
        public void AreConstructServerCoreEntitiesValidAsync(string connectionString, object userState) {
            if ((this.onBeginAreConstructServerCoreEntitiesValidDelegate == null)) {
                this.onBeginAreConstructServerCoreEntitiesValidDelegate = new BeginOperationDelegate(this.OnBeginAreConstructServerCoreEntitiesValid);
            }
            if ((this.onEndAreConstructServerCoreEntitiesValidDelegate == null)) {
                this.onEndAreConstructServerCoreEntitiesValidDelegate = new EndOperationDelegate(this.OnEndAreConstructServerCoreEntitiesValid);
            }
            if ((this.onAreConstructServerCoreEntitiesValidCompletedDelegate == null)) {
                this.onAreConstructServerCoreEntitiesValidCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAreConstructServerCoreEntitiesValidCompleted);
            }
            base.InvokeAsync(this.onBeginAreConstructServerCoreEntitiesValidDelegate, new object[] {
                        connectionString}, this.onEndAreConstructServerCoreEntitiesValidDelegate, this.onAreConstructServerCoreEntitiesValidCompletedDelegate, userState);
        }
        
        public bool AreCredentialsAuthentic(string serverName, string userName, string password) {
            return base.Channel.AreCredentialsAuthentic(serverName, userName, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAreCredentialsAuthentic(string serverName, string userName, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAreCredentialsAuthentic(serverName, userName, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAreCredentialsAuthentic(System.IAsyncResult result) {
            return base.Channel.EndAreCredentialsAuthentic(result);
        }
        
        private System.IAsyncResult OnBeginAreCredentialsAuthentic(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverName = ((string)(inValues[0]));
            string userName = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            return this.BeginAreCredentialsAuthentic(serverName, userName, password, callback, asyncState);
        }
        
        private object[] OnEndAreCredentialsAuthentic(System.IAsyncResult result) {
            bool retVal = this.EndAreCredentialsAuthentic(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAreCredentialsAuthenticCompleted(object state) {
            if ((this.AreCredentialsAuthenticCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AreCredentialsAuthenticCompleted(this, new AreCredentialsAuthenticCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AreCredentialsAuthenticAsync(string serverName, string userName, string password) {
            this.AreCredentialsAuthenticAsync(serverName, userName, password, null);
        }
        
        public void AreCredentialsAuthenticAsync(string serverName, string userName, string password, object userState) {
            if ((this.onBeginAreCredentialsAuthenticDelegate == null)) {
                this.onBeginAreCredentialsAuthenticDelegate = new BeginOperationDelegate(this.OnBeginAreCredentialsAuthentic);
            }
            if ((this.onEndAreCredentialsAuthenticDelegate == null)) {
                this.onEndAreCredentialsAuthenticDelegate = new EndOperationDelegate(this.OnEndAreCredentialsAuthentic);
            }
            if ((this.onAreCredentialsAuthenticCompletedDelegate == null)) {
                this.onAreCredentialsAuthenticCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAreCredentialsAuthenticCompleted);
            }
            base.InvokeAsync(this.onBeginAreCredentialsAuthenticDelegate, new object[] {
                        serverName,
                        userName,
                        password}, this.onEndAreCredentialsAuthenticDelegate, this.onAreCredentialsAuthenticCompletedDelegate, userState);
        }
        
        public void EnsureCoreEntitiesExist(string connectionString) {
            base.Channel.EnsureCoreEntitiesExist(connectionString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEnsureCoreEntitiesExist(string connectionString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEnsureCoreEntitiesExist(connectionString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndEnsureCoreEntitiesExist(System.IAsyncResult result) {
            base.Channel.EndEnsureCoreEntitiesExist(result);
        }
        
        private System.IAsyncResult OnBeginEnsureCoreEntitiesExist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string connectionString = ((string)(inValues[0]));
            return this.BeginEnsureCoreEntitiesExist(connectionString, callback, asyncState);
        }
        
        private object[] OnEndEnsureCoreEntitiesExist(System.IAsyncResult result) {
            this.EndEnsureCoreEntitiesExist(result);
            return null;
        }
        
        private void OnEnsureCoreEntitiesExistCompleted(object state) {
            if ((this.EnsureCoreEntitiesExistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EnsureCoreEntitiesExistCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EnsureCoreEntitiesExistAsync(string connectionString) {
            this.EnsureCoreEntitiesExistAsync(connectionString, null);
        }
        
        public void EnsureCoreEntitiesExistAsync(string connectionString, object userState) {
            if ((this.onBeginEnsureCoreEntitiesExistDelegate == null)) {
                this.onBeginEnsureCoreEntitiesExistDelegate = new BeginOperationDelegate(this.OnBeginEnsureCoreEntitiesExist);
            }
            if ((this.onEndEnsureCoreEntitiesExistDelegate == null)) {
                this.onEndEnsureCoreEntitiesExistDelegate = new EndOperationDelegate(this.OnEndEnsureCoreEntitiesExist);
            }
            if ((this.onEnsureCoreEntitiesExistCompletedDelegate == null)) {
                this.onEnsureCoreEntitiesExistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEnsureCoreEntitiesExistCompleted);
            }
            base.InvokeAsync(this.onBeginEnsureCoreEntitiesExistDelegate, new object[] {
                        connectionString}, this.onEndEnsureCoreEntitiesExistDelegate, this.onEnsureCoreEntitiesExistCompletedDelegate, userState);
        }
        
        public void EnsureTestItem(string connectionString) {
            base.Channel.EnsureTestItem(connectionString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEnsureTestItem(string connectionString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEnsureTestItem(connectionString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndEnsureTestItem(System.IAsyncResult result) {
            base.Channel.EndEnsureTestItem(result);
        }
        
        private System.IAsyncResult OnBeginEnsureTestItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string connectionString = ((string)(inValues[0]));
            return this.BeginEnsureTestItem(connectionString, callback, asyncState);
        }
        
        private object[] OnEndEnsureTestItem(System.IAsyncResult result) {
            this.EndEnsureTestItem(result);
            return null;
        }
        
        private void OnEnsureTestItemCompleted(object state) {
            if ((this.EnsureTestItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EnsureTestItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EnsureTestItemAsync(string connectionString) {
            this.EnsureTestItemAsync(connectionString, null);
        }
        
        public void EnsureTestItemAsync(string connectionString, object userState) {
            if ((this.onBeginEnsureTestItemDelegate == null)) {
                this.onBeginEnsureTestItemDelegate = new BeginOperationDelegate(this.OnBeginEnsureTestItem);
            }
            if ((this.onEndEnsureTestItemDelegate == null)) {
                this.onEndEnsureTestItemDelegate = new EndOperationDelegate(this.OnEndEnsureTestItem);
            }
            if ((this.onEnsureTestItemCompletedDelegate == null)) {
                this.onEnsureTestItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEnsureTestItemCompleted);
            }
            base.InvokeAsync(this.onBeginEnsureTestItemDelegate, new object[] {
                        connectionString}, this.onEndEnsureTestItemDelegate, this.onEnsureTestItemCompletedDelegate, userState);
        }
        
        public string GetConnectionStringUsingConnectionStringName(string name) {
            return base.Channel.GetConnectionStringUsingConnectionStringName(name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConnectionStringUsingConnectionStringName(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConnectionStringUsingConnectionStringName(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetConnectionStringUsingConnectionStringName(System.IAsyncResult result) {
            return base.Channel.EndGetConnectionStringUsingConnectionStringName(result);
        }
        
        private System.IAsyncResult OnBeginGetConnectionStringUsingConnectionStringName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return this.BeginGetConnectionStringUsingConnectionStringName(name, callback, asyncState);
        }
        
        private object[] OnEndGetConnectionStringUsingConnectionStringName(System.IAsyncResult result) {
            string retVal = this.EndGetConnectionStringUsingConnectionStringName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConnectionStringUsingConnectionStringNameCompleted(object state) {
            if ((this.GetConnectionStringUsingConnectionStringNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConnectionStringUsingConnectionStringNameCompleted(this, new GetConnectionStringUsingConnectionStringNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConnectionStringUsingConnectionStringNameAsync(string name) {
            this.GetConnectionStringUsingConnectionStringNameAsync(name, null);
        }
        
        public void GetConnectionStringUsingConnectionStringNameAsync(string name, object userState) {
            if ((this.onBeginGetConnectionStringUsingConnectionStringNameDelegate == null)) {
                this.onBeginGetConnectionStringUsingConnectionStringNameDelegate = new BeginOperationDelegate(this.OnBeginGetConnectionStringUsingConnectionStringName);
            }
            if ((this.onEndGetConnectionStringUsingConnectionStringNameDelegate == null)) {
                this.onEndGetConnectionStringUsingConnectionStringNameDelegate = new EndOperationDelegate(this.OnEndGetConnectionStringUsingConnectionStringName);
            }
            if ((this.onGetConnectionStringUsingConnectionStringNameCompletedDelegate == null)) {
                this.onGetConnectionStringUsingConnectionStringNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConnectionStringUsingConnectionStringNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetConnectionStringUsingConnectionStringNameDelegate, new object[] {
                        name}, this.onEndGetConnectionStringUsingConnectionStringNameDelegate, this.onGetConnectionStringUsingConnectionStringNameCompletedDelegate, userState);
        }
        
        public string GetConstructServerConnectionString(string theServerName, string theUserName, string thePassword) {
            return base.Channel.GetConstructServerConnectionString(theServerName, theUserName, thePassword);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConstructServerConnectionString(string theServerName, string theUserName, string thePassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConstructServerConnectionString(theServerName, theUserName, thePassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetConstructServerConnectionString(System.IAsyncResult result) {
            return base.Channel.EndGetConstructServerConnectionString(result);
        }
        
        private System.IAsyncResult OnBeginGetConstructServerConnectionString(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string theServerName = ((string)(inValues[0]));
            string theUserName = ((string)(inValues[1]));
            string thePassword = ((string)(inValues[2]));
            return this.BeginGetConstructServerConnectionString(theServerName, theUserName, thePassword, callback, asyncState);
        }
        
        private object[] OnEndGetConstructServerConnectionString(System.IAsyncResult result) {
            string retVal = this.EndGetConstructServerConnectionString(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConstructServerConnectionStringCompleted(object state) {
            if ((this.GetConstructServerConnectionStringCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConstructServerConnectionStringCompleted(this, new GetConstructServerConnectionStringCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConstructServerConnectionStringAsync(string theServerName, string theUserName, string thePassword) {
            this.GetConstructServerConnectionStringAsync(theServerName, theUserName, thePassword, null);
        }
        
        public void GetConstructServerConnectionStringAsync(string theServerName, string theUserName, string thePassword, object userState) {
            if ((this.onBeginGetConstructServerConnectionStringDelegate == null)) {
                this.onBeginGetConstructServerConnectionStringDelegate = new BeginOperationDelegate(this.OnBeginGetConstructServerConnectionString);
            }
            if ((this.onEndGetConstructServerConnectionStringDelegate == null)) {
                this.onEndGetConstructServerConnectionStringDelegate = new EndOperationDelegate(this.OnEndGetConstructServerConnectionString);
            }
            if ((this.onGetConstructServerConnectionStringCompletedDelegate == null)) {
                this.onGetConstructServerConnectionStringCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConstructServerConnectionStringCompleted);
            }
            base.InvokeAsync(this.onBeginGetConstructServerConnectionStringDelegate, new object[] {
                        theServerName,
                        theUserName,
                        thePassword}, this.onEndGetConstructServerConnectionStringDelegate, this.onGetConstructServerConnectionStringCompletedDelegate, userState);
        }
        
        public bool IsConstructServerAvailable(string connectionString) {
            return base.Channel.IsConstructServerAvailable(connectionString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsConstructServerAvailable(string connectionString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsConstructServerAvailable(connectionString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsConstructServerAvailable(System.IAsyncResult result) {
            return base.Channel.EndIsConstructServerAvailable(result);
        }
        
        private System.IAsyncResult OnBeginIsConstructServerAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string connectionString = ((string)(inValues[0]));
            return this.BeginIsConstructServerAvailable(connectionString, callback, asyncState);
        }
        
        private object[] OnEndIsConstructServerAvailable(System.IAsyncResult result) {
            bool retVal = this.EndIsConstructServerAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsConstructServerAvailableCompleted(object state) {
            if ((this.IsConstructServerAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsConstructServerAvailableCompleted(this, new IsConstructServerAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsConstructServerAvailableAsync(string connectionString) {
            this.IsConstructServerAvailableAsync(connectionString, null);
        }
        
        public void IsConstructServerAvailableAsync(string connectionString, object userState) {
            if ((this.onBeginIsConstructServerAvailableDelegate == null)) {
                this.onBeginIsConstructServerAvailableDelegate = new BeginOperationDelegate(this.OnBeginIsConstructServerAvailable);
            }
            if ((this.onEndIsConstructServerAvailableDelegate == null)) {
                this.onEndIsConstructServerAvailableDelegate = new EndOperationDelegate(this.OnEndIsConstructServerAvailable);
            }
            if ((this.onIsConstructServerAvailableCompletedDelegate == null)) {
                this.onIsConstructServerAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsConstructServerAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginIsConstructServerAvailableDelegate, new object[] {
                        connectionString}, this.onEndIsConstructServerAvailableDelegate, this.onIsConstructServerAvailableCompletedDelegate, userState);
        }
        
        public bool IsCredentialsServerAvailable() {
            return base.Channel.IsCredentialsServerAvailable();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsCredentialsServerAvailable(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsCredentialsServerAvailable(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsCredentialsServerAvailable(System.IAsyncResult result) {
            return base.Channel.EndIsCredentialsServerAvailable(result);
        }
        
        private System.IAsyncResult OnBeginIsCredentialsServerAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIsCredentialsServerAvailable(callback, asyncState);
        }
        
        private object[] OnEndIsCredentialsServerAvailable(System.IAsyncResult result) {
            bool retVal = this.EndIsCredentialsServerAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsCredentialsServerAvailableCompleted(object state) {
            if ((this.IsCredentialsServerAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsCredentialsServerAvailableCompleted(this, new IsCredentialsServerAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsCredentialsServerAvailableAsync() {
            this.IsCredentialsServerAvailableAsync(null);
        }
        
        public void IsCredentialsServerAvailableAsync(object userState) {
            if ((this.onBeginIsCredentialsServerAvailableDelegate == null)) {
                this.onBeginIsCredentialsServerAvailableDelegate = new BeginOperationDelegate(this.OnBeginIsCredentialsServerAvailable);
            }
            if ((this.onEndIsCredentialsServerAvailableDelegate == null)) {
                this.onEndIsCredentialsServerAvailableDelegate = new EndOperationDelegate(this.OnEndIsCredentialsServerAvailable);
            }
            if ((this.onIsCredentialsServerAvailableCompletedDelegate == null)) {
                this.onIsCredentialsServerAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsCredentialsServerAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginIsCredentialsServerAvailableDelegate, null, this.onEndIsCredentialsServerAvailableDelegate, this.onIsCredentialsServerAvailableCompletedDelegate, userState);
        }
        
        public bool IsExistingConnectionString(string theConnectionStringName) {
            return base.Channel.IsExistingConnectionString(theConnectionStringName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsExistingConnectionString(string theConnectionStringName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsExistingConnectionString(theConnectionStringName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsExistingConnectionString(System.IAsyncResult result) {
            return base.Channel.EndIsExistingConnectionString(result);
        }
        
        private System.IAsyncResult OnBeginIsExistingConnectionString(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string theConnectionStringName = ((string)(inValues[0]));
            return this.BeginIsExistingConnectionString(theConnectionStringName, callback, asyncState);
        }
        
        private object[] OnEndIsExistingConnectionString(System.IAsyncResult result) {
            bool retVal = this.EndIsExistingConnectionString(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsExistingConnectionStringCompleted(object state) {
            if ((this.IsExistingConnectionStringCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsExistingConnectionStringCompleted(this, new IsExistingConnectionStringCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsExistingConnectionStringAsync(string theConnectionStringName) {
            this.IsExistingConnectionStringAsync(theConnectionStringName, null);
        }
        
        public void IsExistingConnectionStringAsync(string theConnectionStringName, object userState) {
            if ((this.onBeginIsExistingConnectionStringDelegate == null)) {
                this.onBeginIsExistingConnectionStringDelegate = new BeginOperationDelegate(this.OnBeginIsExistingConnectionString);
            }
            if ((this.onEndIsExistingConnectionStringDelegate == null)) {
                this.onEndIsExistingConnectionStringDelegate = new EndOperationDelegate(this.OnEndIsExistingConnectionString);
            }
            if ((this.onIsExistingConnectionStringCompletedDelegate == null)) {
                this.onIsExistingConnectionStringCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsExistingConnectionStringCompleted);
            }
            base.InvokeAsync(this.onBeginIsExistingConnectionStringDelegate, new object[] {
                        theConnectionStringName}, this.onEndIsExistingConnectionStringDelegate, this.onIsExistingConnectionStringCompletedDelegate, userState);
        }
        
        public bool IsValidationServerAvailable() {
            return base.Channel.IsValidationServerAvailable();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsValidationServerAvailable(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsValidationServerAvailable(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsValidationServerAvailable(System.IAsyncResult result) {
            return base.Channel.EndIsValidationServerAvailable(result);
        }
        
        private System.IAsyncResult OnBeginIsValidationServerAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIsValidationServerAvailable(callback, asyncState);
        }
        
        private object[] OnEndIsValidationServerAvailable(System.IAsyncResult result) {
            bool retVal = this.EndIsValidationServerAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsValidationServerAvailableCompleted(object state) {
            if ((this.IsValidationServerAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsValidationServerAvailableCompleted(this, new IsValidationServerAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsValidationServerAvailableAsync() {
            this.IsValidationServerAvailableAsync(null);
        }
        
        public void IsValidationServerAvailableAsync(object userState) {
            if ((this.onBeginIsValidationServerAvailableDelegate == null)) {
                this.onBeginIsValidationServerAvailableDelegate = new BeginOperationDelegate(this.OnBeginIsValidationServerAvailable);
            }
            if ((this.onEndIsValidationServerAvailableDelegate == null)) {
                this.onEndIsValidationServerAvailableDelegate = new EndOperationDelegate(this.OnEndIsValidationServerAvailable);
            }
            if ((this.onIsValidationServerAvailableCompletedDelegate == null)) {
                this.onIsValidationServerAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsValidationServerAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginIsValidationServerAvailableDelegate, null, this.onEndIsValidationServerAvailableDelegate, this.onIsValidationServerAvailableCompletedDelegate, userState);
        }
        
        public void LoadTestItemData(string connectionString) {
            base.Channel.LoadTestItemData(connectionString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLoadTestItemData(string connectionString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadTestItemData(connectionString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLoadTestItemData(System.IAsyncResult result) {
            base.Channel.EndLoadTestItemData(result);
        }
        
        private System.IAsyncResult OnBeginLoadTestItemData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string connectionString = ((string)(inValues[0]));
            return this.BeginLoadTestItemData(connectionString, callback, asyncState);
        }
        
        private object[] OnEndLoadTestItemData(System.IAsyncResult result) {
            this.EndLoadTestItemData(result);
            return null;
        }
        
        private void OnLoadTestItemDataCompleted(object state) {
            if ((this.LoadTestItemDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadTestItemDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadTestItemDataAsync(string connectionString) {
            this.LoadTestItemDataAsync(connectionString, null);
        }
        
        public void LoadTestItemDataAsync(string connectionString, object userState) {
            if ((this.onBeginLoadTestItemDataDelegate == null)) {
                this.onBeginLoadTestItemDataDelegate = new BeginOperationDelegate(this.OnBeginLoadTestItemData);
            }
            if ((this.onEndLoadTestItemDataDelegate == null)) {
                this.onEndLoadTestItemDataDelegate = new EndOperationDelegate(this.OnEndLoadTestItemData);
            }
            if ((this.onLoadTestItemDataCompletedDelegate == null)) {
                this.onLoadTestItemDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadTestItemDataCompleted);
            }
            base.InvokeAsync(this.onBeginLoadTestItemDataDelegate, new object[] {
                        connectionString}, this.onEndLoadTestItemDataDelegate, this.onLoadTestItemDataCompletedDelegate, userState);
        }
        
        public void Reset(string connectionString) {
            base.Channel.Reset(connectionString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReset(string connectionString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReset(connectionString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReset(System.IAsyncResult result) {
            base.Channel.EndReset(result);
        }
        
        private System.IAsyncResult OnBeginReset(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string connectionString = ((string)(inValues[0]));
            return this.BeginReset(connectionString, callback, asyncState);
        }
        
        private object[] OnEndReset(System.IAsyncResult result) {
            this.EndReset(result);
            return null;
        }
        
        private void OnResetCompleted(object state) {
            if ((this.ResetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetAsync(string connectionString) {
            this.ResetAsync(connectionString, null);
        }
        
        public void ResetAsync(string connectionString, object userState) {
            if ((this.onBeginResetDelegate == null)) {
                this.onBeginResetDelegate = new BeginOperationDelegate(this.OnBeginReset);
            }
            if ((this.onEndResetDelegate == null)) {
                this.onEndResetDelegate = new EndOperationDelegate(this.OnEndReset);
            }
            if ((this.onResetCompletedDelegate == null)) {
                this.onResetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetCompleted);
            }
            base.InvokeAsync(this.onBeginResetDelegate, new object[] {
                        connectionString}, this.onEndResetDelegate, this.onResetCompletedDelegate, userState);
        }
    }
}
