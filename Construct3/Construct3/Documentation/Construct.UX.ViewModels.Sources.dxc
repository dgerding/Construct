<?xml version="1.0" encoding="utf-8"?>
<ContentFile Version="2010" Moniker="Construct.UX.Runtime.WindowsClient\bin\Debug\Construct.UX.ViewModels.Sources.dll" DocType="DX.NET" IsLocalizationDisabled="false">
  <RelatedProject>Documentation.dxp</RelatedProject>
  <State>
    <Attributes>
      <Attribute key="TabContainerSelectedTabIndex" valuetype="integer">1</Attribute>
      <Attribute key="scrollPosition" valuetype="integer">0</Attribute>
      <Attribute key="SectionHeadingCollapsedexampleSectionHeading" valuetype="string">true</Attribute>
    </Attributes>
  </State>
  <LastSelectedItem>Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~AddSensorDefinition</LastSelectedItem>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.AddQuestionArgs">
    <summary ChangeDateTime="2013-02-15T16:13:31.7526335Z">This is the Sources Model class by the same name.&amp;nbsp;The&amp;nbsp;type&amp;nbsp;is exposed via service reference to be used as an argument in a service call on the Sources Model.</summary>
    <remarks ChangeDateTime="2013-02-15T16:13:31.7536337Z">This type is not used and should probably be deleted since "AddQuestion" should not be a Sources level concern.</remarks>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.AddSensorArgs">
    <summary ChangeDateTime="2013-02-15T16:13:51.5713967Z">This is the Sources Model class by the same name.&amp;nbsp;The&amp;nbsp;type&amp;nbsp;is exposed via service reference to be used as an argument in a service call on the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.LoadSensorArgs">
    <summary ChangeDateTime="2013-02-15T16:13:59.3793581Z">This is the Sources Model class by the same name.&amp;nbsp;The&amp;nbsp;type&amp;nbsp;is exposed via service reference to be used as an argument in a service call on the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.StartSensorArgs">
    <summary ChangeDateTime="2013-02-15T16:14:01.6788179Z">This is the Sources Model class by the same name.&amp;nbsp;The&amp;nbsp;type&amp;nbsp;is exposed via service reference to be used as an argument in a service call on the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.StopSensorArgs">
    <summary ChangeDateTime="2013-02-15T16:14:06.4907801Z">This is the Sources Model class by the same name.&amp;nbsp;The&amp;nbsp;type&amp;nbsp;is exposed via service reference to be used as an argument in a service call on the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.UnloadSensorArgs">
    <summary ChangeDateTime="2013-02-15T16:40:05.6264033Z">This is the Sources Model class by the same name.&amp;nbsp;The&amp;nbsp;type&amp;nbsp;is exposed via service reference to be used as an argument in a service call on the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.DataType">
    <summary ChangeDateTime="2013-02-15T16:44:43.7179759Z">The is the Server Entities &lt;em&gt;adpater&lt;/em&gt; class by the same name. It is exposed by a service reference to be used as an argument when making service calls to the Sources Model.</summary>
    <remarks ChangeDateTime="2013-02-15T16:44:43.7279779Z">The adapter is used here instead of the &lt;em&gt;actual&lt;/em&gt; ORM entity class because we needed to put the [DataContract] compiler attribute on the class. However, since it was generated by a Telerik tool, any changes to the class (such as adding the [DataContract] attribute) would be lost every time the generated .cs file is recreated. Because of this we created a shadow version of the entity in order to be able to append the [DataContract] attribute, and in turn, expose it as a type over WCF.</remarks>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.DataTypeSource">
    <remarks ChangeDateTime="2013-02-15T16:44:49.9740859Z">The adapter is used here instead of the &lt;em&gt;actual&lt;/em&gt; ORM entity class because we needed to put the [DataContract] compiler attribute on the class. However, since it was generated by a Telerik tool, any changes to the class (such as adding the [DataContract] attribute) would be lost every time the generated .cs file is recreated. Because of this we created a shadow version of the entity in order to be able to append the [DataContract] attribute, and in turn, expose it as a type over WCF.</remarks>
    <summary ChangeDateTime="2013-02-15T16:49:24.1691971Z">The is the Server Entities &lt;em&gt;adpater&lt;/em&gt; class by the same name. It is exposed by a service reference to be used as an argument when making service calls to the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.HumanReadableSensor">
    <remarks ChangeDateTime="2013-02-15T16:44:53.9204161Z">The adapter is used here instead of the &lt;em&gt;actual&lt;/em&gt; ORM entity class because we needed to put the [DataContract] compiler attribute on the class. However, since it was generated by a Telerik tool, any changes to the class (such as adding the [DataContract] attribute) would be lost every time the generated .cs file is recreated. Because of this we created a shadow version of the entity in order to be able to append the [DataContract] attribute, and in turn, expose it as a type over WCF.</remarks>
    <summary ChangeDateTime="2013-02-15T16:49:39.4436515Z">The is the Server Entities &lt;em&gt;adpater&lt;/em&gt; class by the same name. It is exposed by a service reference to be used as an argument when making service calls to the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.GenericSensorCommandArgs">
    <summary ChangeDateTime="2013-02-15T16:47:18.7231141Z">This is the Sources Model class by the same name.&amp;nbsp;The&amp;nbsp;type&amp;nbsp;is exposed via service reference to be used as an argument in a service call on the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.Question">
    <remarks ChangeDateTime="2013-02-15T17:06:59.4227641Z">&lt;p&gt;The adapter is used here instead of the &lt;em&gt;actual&lt;/em&gt; ORM entity class because we needed to put the [DataContract] compiler attribute on the class. However, since it was generated by a Telerik tool, any changes to the class (such as adding the [DataContract] attribute) would be lost every time the generated .cs file is recreated. Because of this we created a shadow version of the entity in order to be able to append the [DataContract] attribute, and in turn, expose it as a type over WCF.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;This type may not be needed inside the Source domain, and possible should be removed from here and restricted to the Learning Model/VM since Sources don't deal &lt;/p&gt;</remarks>
    <summary ChangeDateTime="2013-02-15T16:49:41.5565911Z">The is the Server Entities &lt;em&gt;adpater&lt;/em&gt; class by the same name. It is exposed by a service reference to be used as an argument when making service calls to the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.Sensor">
    <remarks ChangeDateTime="2013-02-15T16:47:35.5797775Z">The adapter is used here instead of the &lt;em&gt;actual&lt;/em&gt; ORM entity class because we needed to put the [DataContract] compiler attribute on the class. However, since it was generated by a Telerik tool, any changes to the class (such as adding the [DataContract] attribute) would be lost every time the generated .cs file is recreated. Because of this we created a shadow version of the entity in order to be able to append the [DataContract] attribute, and in turn, expose it as a type over WCF.</remarks>
    <summary ChangeDateTime="2013-02-15T16:49:44.1079843Z">The is the Server Entities &lt;em&gt;adpater&lt;/em&gt; class by the same name. It is exposed by a service reference to be used as an argument when making service calls to the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.SensorCommand">
    <remarks ChangeDateTime="2013-02-15T16:48:40.4114467Z">The adapter is used here instead of the &lt;em&gt;actual&lt;/em&gt; ORM entity class because we needed to put the [DataContract] compiler attribute on the class. However, since it was generated by a Telerik tool, any changes to the class (such as adding the [DataContract] attribute) would be lost every time the generated .cs file is recreated. Because of this we created a shadow version of the entity in order to be able to append the [DataContract] attribute, and in turn, expose it as a type over WCF.</remarks>
    <summary ChangeDateTime="2013-02-15T17:07:05.4763747Z">The is the Server Entities &lt;em&gt;adpater&lt;/em&gt; class by the same name. It is exposed by a service reference to be used as an argument when making service calls to the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.SensorCommandParameter">
    <remarks ChangeDateTime="2013-02-15T16:48:43.6374919Z">The adapter is used here instead of the &lt;em&gt;actual&lt;/em&gt; ORM entity class because we needed to put the [DataContract] compiler attribute on the class. However, since it was generated by a Telerik tool, any changes to the class (such as adding the [DataContract] attribute) would be lost every time the generated .cs file is recreated. Because of this we created a shadow version of the entity in order to be able to append the [DataContract] attribute, and in turn, expose it as a type over WCF.</remarks>
    <summary ChangeDateTime="2013-02-15T17:07:07.2297253Z">The is the Server Entities &lt;em&gt;adpater&lt;/em&gt; class by the same name. It is exposed by a service reference to be used as an argument when making service calls to the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.SensorHost">
    <remarks ChangeDateTime="2013-02-15T16:48:45.8759395Z">The adapter is used here instead of the &lt;em&gt;actual&lt;/em&gt; ORM entity class because we needed to put the [DataContract] compiler attribute on the class. However, since it was generated by a Telerik tool, any changes to the class (such as adding the [DataContract] attribute) would be lost every time the generated .cs file is recreated. Because of this we created a shadow version of the entity in order to be able to append the [DataContract] attribute, and in turn, expose it as a type over WCF.</remarks>
    <summary ChangeDateTime="2013-02-15T17:07:09.3451483Z">The is the Server Entities &lt;em&gt;adpater&lt;/em&gt; class by the same name. It is exposed by a service reference to be used as an argument when making service calls to the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.SensorHostType">
    <remarks ChangeDateTime="2013-02-15T16:48:48.5124667Z">The adapter is used here instead of the &lt;em&gt;actual&lt;/em&gt; ORM entity class because we needed to put the [DataContract] compiler attribute on the class. However, since it was generated by a Telerik tool, any changes to the class (such as adding the [DataContract] attribute) would be lost every time the generated .cs file is recreated. Because of this we created a shadow version of the entity in order to be able to append the [DataContract] attribute, and in turn, expose it as a type over WCF.</remarks>
    <summary ChangeDateTime="2013-02-15T17:07:11.1739141Z">The is the Server Entities &lt;em&gt;adpater&lt;/em&gt; class by the same name. It is exposed by a service reference to be used as an argument when making service calls to the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.SensorRuntime">
    <remarks ChangeDateTime="2013-02-15T16:48:55.9473535Z">The adapter is used here instead of the &lt;em&gt;actual&lt;/em&gt; ORM entity class because we needed to put the [DataContract] compiler attribute on the class. However, since it was generated by a Telerik tool, any changes to the class (such as adding the [DataContract] attribute) would be lost every time the generated .cs file is recreated. Because of this we created a shadow version of the entity in order to be able to append the [DataContract] attribute, and in turn, expose it as a type over WCF.</remarks>
    <summary ChangeDateTime="2013-02-15T17:07:13.1233039Z">The is the Server Entities &lt;em&gt;adpater&lt;/em&gt; class by the same name. It is exposed by a service reference to be used as an argument when making service calls to the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.SensorTypeSource">
    <remarks ChangeDateTime="2013-02-15T16:48:59.1449929Z">The adapter is used here instead of the &lt;em&gt;actual&lt;/em&gt; ORM entity class because we needed to put the [DataContract] compiler attribute on the class. However, since it was generated by a Telerik tool, any changes to the class (such as adding the [DataContract] attribute) would be lost every time the generated .cs file is recreated. Because of this we created a shadow version of the entity in order to be able to append the [DataContract] attribute, and in turn, expose it as a type over WCF.</remarks>
    <summary ChangeDateTime="2013-02-15T17:07:16.2339259Z">The is the Server Entities &lt;em&gt;adpater&lt;/em&gt; class by the same name. It is exposed by a service reference to be used as an argument when making service calls to the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.SourcesServiceReference.Source">
    <remarks ChangeDateTime="2013-02-15T16:49:00.9412327Z">The adapter is used here instead of the &lt;em&gt;actual&lt;/em&gt; ORM entity class because we needed to put the [DataContract] compiler attribute on the class. However, since it was generated by a Telerik tool, any changes to the class (such as adding the [DataContract] attribute) would be lost every time the generated .cs file is recreated. Because of this we created a shadow version of the entity in order to be able to append the [DataContract] attribute, and in turn, expose it as a type over WCF.</remarks>
    <summary ChangeDateTime="2013-02-15T17:12:29.1066838Z">The is the Server Entities &lt;em&gt;adpater&lt;/em&gt; class by the same name. It is exposed by a service reference to be used as an argument when making service calls to the Sources Model.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel">
    <summary ChangeDateTime="2013-02-15T18:34:59.8461726Z">Sources ViewModel. This class holds&amp;nbsp;data for the View to present in the user interface, as well as exposing a service interface to the Sources Model via WCF.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~AddSensorDefinition">
    <summary ChangeDateTime="2013-02-18T19:35:44.8971015Z">Adds a Sensor Definition to Constructs list of known Sensor Definition by making a service method call using data inside the dynamic ExpandoObject.</summary>
    <remarks ChangeDateTime="2013-02-18T19:36:26.1159441Z">&lt;p&gt;The design of this method signature is not intuitive. The parameter it requires is only typed as "object", however it &lt;strong&gt;actually&lt;/strong&gt; requires an ExpandoObject with a very particular set of dynamic properties. If they were missing the method would obviously fail.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;There is no reason &lt;strong&gt;not&lt;/strong&gt; to require a set of strings, since thats what we're passing in the expando object, so that there is some robust safety.&lt;/p&gt;</remarks>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~AddSensorHost">
    <summary ChangeDateTime="2013-02-18T19:41:14.2386888Z">Adds a Sensor Host to the list of known Sensor Hosts by making a service method call using data inside the dynamic ExpandoObject.</summary>
    <remarks ChangeDateTime="2013-02-18T19:36:28.8934995Z">&lt;p&gt;The design of this method signature is not intuitive. The parameter it requires is only typed as "object", however it &lt;strong&gt;actually&lt;/strong&gt; requires an ExpandoObject with a very particular set of dynamic properties. If they were missing the method would obviously fail.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;There is no reason &lt;strong&gt;not&lt;/strong&gt; to require a set of strings, since thats what we're passing in the expando object, so that there is some robust safety.&lt;/p&gt;</remarks>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~AddSensorToSensorHost">
    <remarks ChangeDateTime="2013-02-18T19:42:47.527803Z">&lt;p&gt;The design of this method signature is not intuitive. The parameter it requires is only typed as "object", however it &lt;strong&gt;actually&lt;/strong&gt; requires an ExpandoObject with a very particular set of dynamic properties. If they were missing the method would obviously fail.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;There is no reason &lt;strong&gt;not&lt;/strong&gt; to require a set of strings, since thats what we're passing in the expando object, so that there is some robust safety.&lt;/p&gt;</remarks>
    <summary ChangeDateTime="2013-02-18T19:44:10.2466578Z">Installs a&amp;nbsp;Sensor&amp;nbsp;on a specific&amp;nbsp;machine&amp;nbsp;by making a service method call using data inside the dynamic ExpandoObject. The Sensor Host on the target machine &lt;strong&gt;must be on&lt;/strong&gt;.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~LoadSensor">
    <remarks ChangeDateTime="2013-02-18T19:37:01.9683135Z">&lt;p&gt;The design of this method signature is not intuitive. The parameter it requires is only typed as "object", however it &lt;strong&gt;actually&lt;/strong&gt; requires an ExpandoObject with a very particular set of dynamic properties. If they were missing the method would obviously fail.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;There is no reason &lt;strong&gt;not&lt;/strong&gt; to require a set of strings, since thats what we're passing in the expando object, so that there is some robust safety.&lt;/p&gt;</remarks>
    <summary ChangeDateTime="2013-02-18T19:44:29.0772234Z">Loads&amp;nbsp;a&amp;nbsp;Sensor&amp;nbsp;on a specific&amp;nbsp;machine&amp;nbsp;into memory by making a service method call using data inside the dynamic ExpandoObject. The Sensor Host on the target machine &lt;strong&gt;must be on&lt;/strong&gt;.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~StartSensor">
    <remarks ChangeDateTime="2013-02-18T19:37:04.5112221Z">&lt;p&gt;The design of this method signature is not intuitive. The parameter it requires is only typed as "object", however it &lt;strong&gt;actually&lt;/strong&gt; requires an ExpandoObject with a very particular set of dynamic properties. If they were missing the method would obviously fail.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;There is no reason &lt;strong&gt;not&lt;/strong&gt; to require a set of strings, since thats what we're passing in the expando object, so that there is some robust safety.&lt;/p&gt;</remarks>
    <summary ChangeDateTime="2013-02-18T19:45:05.3196708Z">Starts a loaded Sensor&amp;nbsp;on a specific&amp;nbsp;machine&amp;nbsp;by making a service method call using data inside the dynamic ExpandoObject. The Sensor Host on the target machine &lt;strong&gt;must be on&lt;/strong&gt;.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~StopSensor">
    <remarks ChangeDateTime="2013-02-18T19:37:06.9447087Z">&lt;p&gt;The design of this method signature is not intuitive. The parameter it requires is only typed as "object", however it &lt;strong&gt;actually&lt;/strong&gt; requires an ExpandoObject with a very particular set of dynamic properties. If they were missing the method would obviously fail.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;There is no reason &lt;strong&gt;not&lt;/strong&gt; to require a set of strings, since thats what we're passing in the expando object, so that there is some robust safety.&lt;/p&gt;</remarks>
    <summary ChangeDateTime="2013-02-18T19:45:11.4723012Z">Stops a loaded Sensor&amp;nbsp;on a specific&amp;nbsp;machine&amp;nbsp;by making a service method call using data inside the dynamic ExpandoObject. The Sensor Host on the target machine &lt;strong&gt;must be on&lt;/strong&gt;.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~UnloadSensor">
    <remarks ChangeDateTime="2013-02-18T19:37:09.9093015Z">&lt;p&gt;The design of this method signature is not intuitive. The parameter it requires is only typed as "object", however it &lt;strong&gt;actually&lt;/strong&gt; requires an ExpandoObject with a very particular set of dynamic properties. If they were missing the method would obviously fail.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;There is no reason &lt;strong&gt;not&lt;/strong&gt; to require a set of strings, since thats what we're passing in the expando object, so that there is some robust safety.&lt;/p&gt;</remarks>
    <summary ChangeDateTime="2013-02-18T19:46:13.4909442Z">Unloads a loaded Sensor&amp;nbsp;on a specific&amp;nbsp;machine&amp;nbsp;by making a service method call using data inside the dynamic ExpandoObject. The Sensor Host on the target machine &lt;strong&gt;must be on&lt;/strong&gt;.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~SetDefaultSensorCommand">
    <summary ChangeDateTime="2013-02-18T19:47:17.489142Z">Sets the CurrentSensorCommand to the default view of the Current Sensor Command List</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~Unzip">
    <summary ChangeDateTime="2013-02-18T19:48:06.3304744Z">Unzips a zipped archive file from a source file to a targeted destination folder</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~Load">
    <summary ChangeDateTime="2013-02-18T19:49:09.8679802Z">Initialization method that runs for each of the View Model objects once at the beginning of their life cycle. It is called by the thing that creates the View Model objects.</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~HandleAvailableSensorCommands">
    <summary ChangeDateTime="2013-02-18T19:54:32.2535121Z">Parses a list of Sensor Commands and adds them to the list of known Sensor Commands</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~GenericSensorCommand">
    <summary ChangeDateTime="2013-02-18T19:58:54.4890149Z">&lt;p&gt;GenericSensorCommand is responsible for sending a Sensor a generic command. This method sends the &lt;strong&gt;currently selected SensorCommand &lt;/strong&gt;with any provided arguments, to the &lt;strong&gt;currnetly selected Sensor&lt;/strong&gt;.&lt;/p&gt;</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableCoreDataTypes">
    <summary ChangeDateTime="2013-02-18T20:02:22.1182287Z">&lt;p&gt;Collection of Sensor Type Sources that are used for binding in UI elements in the view.&lt;/p&gt;</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableDataTypes">
    <summary ChangeDateTime="2013-02-18T20:00:06.6117443Z">&lt;span style="width: 100%;" id="ContentItemType|Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableCoreDataTypes|SUMMARY" class="dxeditwrapper" contentEditable="true"&gt;&lt;p&gt;Collection of Core Data Types that are used for binding in UI elements in the view.&lt;/p&gt;&lt;/span&gt;</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableDataTypeSources">
    <summary ChangeDateTime="2013-02-18T20:00:18.3065637Z">&lt;span style="width: 100%;" id="ContentItemType|Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableCoreDataTypes|SUMMARY" class="dxeditwrapper" contentEditable="true"&gt;&lt;p&gt;Collection of Core Data Types that are used for binding in UI elements in the view.&lt;/p&gt;&lt;/span&gt;</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableHumanReadableSensors">
    <summary ChangeDateTime="2013-02-18T20:00:31.3645041Z">&lt;span style="width: 100%;" id="ContentItemType|Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableCoreDataTypes|SUMMARY" class="dxeditwrapper" contentEditable="true"&gt;&lt;p&gt;Collection of Data Type Sources that are used for binding in UI elements in the view.&lt;/p&gt;&lt;/span&gt;</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableRootDataTypeSources">
    <summary ChangeDateTime="2013-02-18T20:00:49.8050625Z">&lt;span style="width: 100%;" id="ContentItemType|Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableCoreDataTypes|SUMMARY" class="dxeditwrapper" contentEditable="true"&gt;&lt;p&gt;Collection of Data Type Sources that are used for binding in UI elements in the view.&lt;/p&gt;&lt;/span&gt;</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableSensorCommands">
    <summary ChangeDateTime="2013-02-18T20:01:03.5646141Z">&lt;span style="width: 100%;" id="ContentItemType|Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableCoreDataTypes|SUMMARY" class="dxeditwrapper" contentEditable="true"&gt;&lt;p&gt;Collection of Data Type Sources that are used for binding in UI elements in the view.&lt;/p&gt;&lt;/span&gt;</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableSensorHosts">
    <summary ChangeDateTime="2013-02-18T20:01:16.8736755Z">&lt;span style="width: 100%;" id="ContentItemType|Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableCoreDataTypes|SUMMARY" class="dxeditwrapper" contentEditable="true"&gt;&lt;p&gt;Collection of Data Type Sources that are used for binding in UI elements in the view.&lt;/p&gt;&lt;/span&gt;</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableSensorHostTypes">
    <summary ChangeDateTime="2013-02-18T20:01:46.3837767Z">&lt;span style="width: 100%;" id="ContentItemType|Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableCoreDataTypes|SUMMARY" class="dxeditwrapper" contentEditable="true"&gt;&lt;p&gt;Collection of Data Type Sources that are used for binding in UI elements in the view.&lt;/p&gt;&lt;/span&gt;</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableSensorRuntimes">
    <summary ChangeDateTime="2013-02-18T20:01:58.9196835Z">&lt;span style="width: 100%;" id="ContentItemType|Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableCoreDataTypes|SUMMARY" class="dxeditwrapper" contentEditable="true"&gt;&lt;p&gt;Collection of Data Type Sources that are used for binding in UI elements in the view.&lt;/p&gt;&lt;/span&gt;</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableSensors">
    <summary ChangeDateTime="2013-02-18T20:02:11.7753513Z">&lt;span style="width: 100%;" id="ContentItemType|Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableCoreDataTypes|SUMMARY" class="dxeditwrapper" contentEditable="true"&gt;&lt;p&gt;Collection of Data Type Sources that are used for binding in UI elements in the view.&lt;/p&gt;&lt;/span&gt;</summary>
  </item>
  <item qn="Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableSensorTypeSources">
    <summary ChangeDateTime="2013-02-18T20:02:22.0752201Z">&lt;span style="width: 100%;" id="ContentItemType|Construct.UX.ViewModels.Sources~Construct.UX.ViewModels.Sources.ViewModel~ObservableCoreDataTypes|SUMMARY" class="dxeditwrapper" contentEditable="true"&gt;&lt;p&gt;Collection of Data Type Sources that are used for binding in UI elements in the view.&lt;/p&gt;&lt;/span&gt;</summary>
  </item>
  <Filters>
    <CONTENTSTORECOMMON>
      <IsIncludedItemsOnly>true</IsIncludedItemsOnly>
    </CONTENTSTORECOMMON>
    <CONTENTSTORELOCALIZATION>
      <IsPrimaryLocaleContentPreviewEnabled>true</IsPrimaryLocaleContentPreviewEnabled>
    </CONTENTSTORELOCALIZATION>
    <DX.NETCONTENTSTOREFILTER>
      <ShowProtectedMembers>true</ShowProtectedMembers>
      <ShowProtectedFriendMembers>true</ShowProtectedFriendMembers>
      <ShowFriendMembers>false</ShowFriendMembers>
      <ShowPrivateMembers>false</ShowPrivateMembers>
      <ShowInheritedMembers>false</ShowInheritedMembers>
      <IsSourceCodeContentVisible>true</IsSourceCodeContentVisible>
    </DX.NETCONTENTSTOREFILTER>
  </Filters>
</ContentFile>