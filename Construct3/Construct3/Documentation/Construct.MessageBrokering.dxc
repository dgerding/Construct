<?xml version="1.0" encoding="utf-8"?>
<ContentFile Version="2010" Moniker="Construct.Server.Runtime.WindowsUX\bin\Debug\Construct.MessageBrokering.dll" DocType="DX.NET" IsLocalizationDisabled="false">
  <RelatedProject>Documentation.dxp</RelatedProject>
  <State>
    <Attributes>
      <Attribute key="scrollPosition" valuetype="integer">0</Attribute>
      <Attribute key="TabContainerSelectedTabIndex" valuetype="integer">1</Attribute>
      <Attribute key="SectionHeadingCollapsedsyntaxSectionHeading" valuetype="string">true</Attribute>
    </Attributes>
  </State>
  <LastSelectedItem />
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.Broker">
    <summary ChangeDateTime="2013-02-08T16:27:23.0604804Z">All The Broker houses Inboxes and Outboxes for communication purposes and provides an interface for sending messages. It also exposes events which give a handle to received messages.</summary>
    <remarks ChangeDateTime="2013-02-08T16:27:23.063481Z">&lt;p&gt;All messages that are transmitted between brokers are serialized into json before transmission. &lt;/p&gt;&lt;p&gt;Additionally, I believe there is a bad architecture oversight, in that the serialized json is then stuck as body of some formated XML, because of misunderstandings in how WCF works. So yes, we are sending xml, which contains json, which contains our message.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</remarks>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.Command">
    <summary ChangeDateTime="2013-02-08T18:52:29.584727Z">The Command class represents an instruction to take some action. Sensors, Sensor Hosts, and the Construct Server&amp;nbsp;pass along Commands&amp;nbsp;to instruct one another to do a job that falls outside of their respective areas, such as Loading a Sensor (The Server Commands the Sensor Host to load the process into memory).</summary>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.Data">
    <summary ChangeDateTime="2013-02-08T16:24:00.151798Z">The Data class represents information generated by a sensor that is being transmitted back to the Construct Server</summary>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.GlobalRuntimeSettings">
    <summary ChangeDateTime="2013-02-08T17:25:32.9264763Z">This class stores the Guids associated with the Telemetry and Command types in Construct.</summary>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.Inbox`1">
    <summary ChangeDateTime="2013-02-08T17:31:49.0449163Z">The Inbox class is what receives messages sent by other Broker's&amp;nbsp;Outboxes'. The Inbox exposes events to attach to for when a Telemetry, Command, or Data type message is recieved.</summary>
    <remarks ChangeDateTime="2013-02-08T17:53:15.0026118Z">&lt;p&gt;This class is generic and can take in any Message type as its type parameter, &lt;strong&gt;however this has actually only caused problems.&lt;/strong&gt;&amp;nbsp; I think orginally Tyler's plan was that this typing would allow us to group what messages should go where easier, but it only really causes more code clutter and more required Type generic information all the time for no reason.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</remarks>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.Message">
    <summary ChangeDateTime="2013-02-08T17:43:11.8521144Z">The base class for all messages used by Construct.</summary>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.Outbox`1">
    <summary ChangeDateTime="2013-02-08T17:44:25.522509Z">The Outbox class exposes functionality to send a message to other Broker's Inboxes.</summary>
    <remarks ChangeDateTime="2013-02-08T17:53:09.3564828Z">&lt;p&gt;This class is generic and can take in any Message type as its type parameter,&lt;strong&gt; however this has actually only caused problems&lt;/strong&gt;.&amp;nbsp; I think orginally Tyler's plan was that this typing would allow us to group what messages should go where easier, but it only really causes more code clutter and more required Type generic information all the time for no reason.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Outboxes can either publish a message to all Rendezvous known by the outbox, or to a targeted Rendezvous.&amp;nbsp; It is possible this was a bad design decision and that we should have only allowed to send to targeted Rendezvous.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</remarks>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.Peer`1">
    <summary ChangeDateTime="2013-02-08T17:48:13.2628032Z">This is the base class for Inboxes and Outboxes</summary>
    <remarks ChangeDateTime="2013-02-08T17:48:13.371825Z">&lt;p&gt;This base class is the result of, again, over-zealous generic-ing. To my knowledge, we have never leveraged this type to do anything meaningful, and so it is only clutter.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;It also, should probably not be generic&lt;/p&gt;</remarks>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.Protocol">
    <summary ChangeDateTime="2013-02-08T17:48:38.6080716Z">This enumeration expresses the set of different transport protocols used by Construct.</summary>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.Rendezvous`1">
    <summary ChangeDateTime="2013-02-08T17:51:06.5491974Z">Rendezvous represents a URI, and is used in specifying origins and destinations of messages sent in Construct</summary>
    <remarks ChangeDateTime="2013-02-08T17:54:16.0280526Z">This class is generic and can take in any Message type as its type parameter, &lt;strong&gt;however this has actually only caused problems. &lt;/strong&gt;I believe it was intended to help in grouping Rendezvous objects for related tasks, but it has not been leveraged usefully.</remarks>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.RendezvousResolver">
    <summary ChangeDateTime="2013-02-08T18:27:44.1219884Z">This class exposes functionality to return URIs or lists of URIs that have been "optimized" for being local or non local to the machine they are running on.</summary>
    <remarks ChangeDateTime="2013-02-08T18:29:14.2837631Z">&lt;p&gt;The methods in this class are used to figure out if a requested URI can be reached by a more efficient method, and, if so, return that optimal URI instead.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;I believe it's usage is primarily inside of the SelfServiceHostConfigurator, which is&amp;nbsp;a hotbed of bugs from early development. It is also used in a sporadic and irregular fashion, which is a potential problem.&lt;/p&gt;</remarks>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.SelfServiceHostConfigurator">
    <summary ChangeDateTime="2013-02-08T18:47:03.9180744Z">This class exposes functionality for hosting a WCF service without an app.config file.</summary>
    <remarks ChangeDateTime="2013-02-08T18:47:04.0481004Z">&lt;p&gt;This class is oddly/badly designed because of lack of understanding/agreement on what it was supposed to accomplish. The idea was that it would host a WCF service without any app.config file, but the configuration that goes on inside it (programmatically) is most likely incomplete, as well as lacking support for LOTS of configuration options.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This class is a great candidate for redesign/refactor as long as the existing interface to the outside world can be maintained.&lt;/p&gt;</remarks>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.SensorSerializationAssistant">
    <summary ChangeDateTime="2013-02-08T18:52:04.751561Z">This class is responsible for the Message serialization inside of Sensors in Construct</summary>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.Telemetry">
    <summary ChangeDateTime="2013-02-08T18:54:28.3165898Z">&lt;p&gt;The Telemetry class represents a report of some status. Sensors, Sensor Hosts, and the Construct Server pass along Telemetries to inform one another of their current state. It is left up to the receiver of the the Telemetry to decide whether or not, and how to respond to a Telemetry.&lt;/p&gt;</summary>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.TransponderHost`1">
    <summary ChangeDateTime="2013-02-11T21:37:33.4530581Z">&lt;br&gt;This class is responsible for hosting the service that allows for the remote message invocation at the bottom of Construct's messaging system. It allows for passing a string between 2 parties, which we use to pass json, in order to communicate.</summary>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.SensorSerializationAssistant~GetItem">
    <summary ChangeDateTime="2013-02-14T22:19:31.7164934Z">Returns a Data object from a json string.</summary>
    <remarks ChangeDateTime="2013-02-14T22:19:31.7915084Z">In contract to the ConstructSerializationAssistant, this is &lt;em&gt;not&lt;/em&gt; a dynamically typed object, and is always serialized into a Data object. It is used when a Construct Sensor is sending Data to another Sensor. This method will take the json that is transporting the Data, and convert it back to a Data object.</remarks>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.SensorSerializationAssistant~GetJson">
    <summary ChangeDateTime="2013-02-14T22:21:44.9288362Z">Returns a json string from a Data object.</summary>
    <remarks ChangeDateTime="2013-02-14T22:21:44.9288362Z">This method is called on the Data object that a Construct Sensor is about to send immediately before it is sent. This converts it to json, so that it can be sent over the Transponder Client's AddObject(string json) service method call</remarks>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.SensorSerializationAssistant~GetJsonHeader">
    <summary ChangeDateTime="2013-02-14T22:24:02.2841899Z">Returns a json string that represents the common header info for a particular Sensor.</summary>
    <remarks ChangeDateTime="2013-02-14T22:24:02.2841899Z">Part of the json message that is sent as part of a Data object is some type metadata. This method is reponsible for returning that type metadata so that it can be added to the total json message.</remarks>
  </item>
  <item qn="Construct.MessageBrokering~Construct.MessageBrokering.SensorSerializationAssistant~SetJsonHeader">
    <summary ChangeDateTime="2013-02-14T22:24:34.3951999Z">Sets a json string that represents the common header info for a particular Sensor.</summary>
  </item>
  <Filters>
    <CONTENTSTORECOMMON>
      <IsIncludedItemsOnly>true</IsIncludedItemsOnly>
    </CONTENTSTORECOMMON>
    <CONTENTSTORELOCALIZATION>
      <IsPrimaryLocaleContentPreviewEnabled>true</IsPrimaryLocaleContentPreviewEnabled>
    </CONTENTSTORELOCALIZATION>
    <DX.NETCONTENTSTOREFILTER>
      <ShowProtectedMembers>true</ShowProtectedMembers>
      <ShowProtectedFriendMembers>true</ShowProtectedFriendMembers>
      <ShowFriendMembers>false</ShowFriendMembers>
      <ShowPrivateMembers>false</ShowPrivateMembers>
      <ShowInheritedMembers>false</ShowInheritedMembers>
      <IsSourceCodeContentVisible>true</IsSourceCodeContentVisible>
    </DX.NETCONTENTSTOREFILTER>
  </Filters>
</ContentFile>