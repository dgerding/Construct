//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Construct.UX.ViewModels.Meaning.MeaningServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Taxonomy", Namespace="http://schemas.datacontract.org/2004/07/Construct.Server.Entities.Adapters")]
    [System.SerializableAttribute()]
    public partial class Taxonomy : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Label", Namespace="http://schemas.datacontract.org/2004/07/Construct.Server.Entities.Adapters")]
    [System.SerializableAttribute()]
    public partial class Label : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaxonomyLabel", Namespace="http://schemas.datacontract.org/2004/07/Construct.Server.Entities.Adapters")]
    [System.SerializableAttribute()]
    public partial class TaxonomyLabel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid LabelIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid TaxonomyIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid LabelID {
            get {
                return this.LabelIDField;
            }
            set {
                if ((this.LabelIDField.Equals(value) != true)) {
                    this.LabelIDField = value;
                    this.RaisePropertyChanged("LabelID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TaxonomyID {
            get {
                return this.TaxonomyIDField;
            }
            set {
                if ((this.TaxonomyIDField.Equals(value) != true)) {
                    this.TaxonomyIDField = value;
                    this.RaisePropertyChanged("TaxonomyID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MeaningServiceReference.IModel", CallbackContract=typeof(Construct.UX.ViewModels.Meaning.MeaningServiceReference.IModelCallback))]
    public interface IModel {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/AddTaxonomy", ReplyAction="http://tempuri.org/IModel/AddTaxonomyResponse")]
        bool AddTaxonomy(Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy taxonomy);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/AddTaxonomy", ReplyAction="http://tempuri.org/IModel/AddTaxonomyResponse")]
        System.IAsyncResult BeginAddTaxonomy(Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy taxonomy, System.AsyncCallback callback, object asyncState);
        
        bool EndAddTaxonomy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/AddLabel", ReplyAction="http://tempuri.org/IModel/AddLabelResponse")]
        bool AddLabel(Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label label);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/AddLabel", ReplyAction="http://tempuri.org/IModel/AddLabelResponse")]
        System.IAsyncResult BeginAddLabel(Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label label, System.AsyncCallback callback, object asyncState);
        
        bool EndAddLabel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/AddTaxonomyLabel", ReplyAction="http://tempuri.org/IModel/AddTaxonomyLabelResponse")]
        bool AddTaxonomyLabel(Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel taxonomyLabel);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/AddTaxonomyLabel", ReplyAction="http://tempuri.org/IModel/AddTaxonomyLabelResponse")]
        System.IAsyncResult BeginAddTaxonomyLabel(Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel taxonomyLabel, System.AsyncCallback callback, object asyncState);
        
        bool EndAddTaxonomyLabel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/GetTaxonomies", ReplyAction="http://tempuri.org/IModel/GetTaxonomiesResponse")]
        System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy> GetTaxonomies();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/GetTaxonomies", ReplyAction="http://tempuri.org/IModel/GetTaxonomiesResponse")]
        System.IAsyncResult BeginGetTaxonomies(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy> EndGetTaxonomies(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/GetLabels", ReplyAction="http://tempuri.org/IModel/GetLabelsResponse")]
        System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label> GetLabels();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/GetLabels", ReplyAction="http://tempuri.org/IModel/GetLabelsResponse")]
        System.IAsyncResult BeginGetLabels(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label> EndGetLabels(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/GetTaxonomyLabels", ReplyAction="http://tempuri.org/IModel/GetTaxonomyLabelsResponse")]
        System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel> GetTaxonomyLabels();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/GetTaxonomyLabels", ReplyAction="http://tempuri.org/IModel/GetTaxonomyLabelsResponse")]
        System.IAsyncResult BeginGetTaxonomyLabels(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel> EndGetTaxonomyLabels(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IModelCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/AddSemanticSubjectCallbackReceived", ReplyAction="http://tempuri.org/IModel/AddSemanticSubjectCallbackReceivedResponse")]
        void AddSemanticSubjectCallbackReceived(string theSubject);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/AddSemanticSubjectCallbackReceived", ReplyAction="http://tempuri.org/IModel/AddSemanticSubjectCallbackReceivedResponse")]
        System.IAsyncResult BeginAddSemanticSubjectCallbackReceived(string theSubject, System.AsyncCallback callback, object asyncState);
        
        void EndAddSemanticSubjectCallbackReceived(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/AddSemanticPredicateCallbackReceived", ReplyAction="http://tempuri.org/IModel/AddSemanticPredicateCallbackReceivedResponse")]
        void AddSemanticPredicateCallbackReceived(string thePredicate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/AddSemanticPredicateCallbackReceived", ReplyAction="http://tempuri.org/IModel/AddSemanticPredicateCallbackReceivedResponse")]
        System.IAsyncResult BeginAddSemanticPredicateCallbackReceived(string thePredicate, System.AsyncCallback callback, object asyncState);
        
        void EndAddSemanticPredicateCallbackReceived(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModel/AddSemanticObjectCallbackReceived", ReplyAction="http://tempuri.org/IModel/AddSemanticObjectCallbackReceivedResponse")]
        void AddSemanticObjectCallbackReceived(string theObject);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/AddSemanticObjectCallbackReceived", ReplyAction="http://tempuri.org/IModel/AddSemanticObjectCallbackReceivedResponse")]
        System.IAsyncResult BeginAddSemanticObjectCallbackReceived(string theObject, System.AsyncCallback callback, object asyncState);
        
        void EndAddSemanticObjectCallbackReceived(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IModelChannel : Construct.UX.ViewModels.Meaning.MeaningServiceReference.IModel, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddTaxonomyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTaxonomyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLabelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLabelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddTaxonomyLabelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTaxonomyLabelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTaxonomiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTaxonomiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLabelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLabelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTaxonomyLabelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTaxonomyLabelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModelClient : System.ServiceModel.DuplexClientBase<Construct.UX.ViewModels.Meaning.MeaningServiceReference.IModel>, Construct.UX.ViewModels.Meaning.MeaningServiceReference.IModel {
        
        private BeginOperationDelegate onBeginAddTaxonomyDelegate;
        
        private EndOperationDelegate onEndAddTaxonomyDelegate;
        
        private System.Threading.SendOrPostCallback onAddTaxonomyCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLabelDelegate;
        
        private EndOperationDelegate onEndAddLabelDelegate;
        
        private System.Threading.SendOrPostCallback onAddLabelCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTaxonomyLabelDelegate;
        
        private EndOperationDelegate onEndAddTaxonomyLabelDelegate;
        
        private System.Threading.SendOrPostCallback onAddTaxonomyLabelCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTaxonomiesDelegate;
        
        private EndOperationDelegate onEndGetTaxonomiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetTaxonomiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLabelsDelegate;
        
        private EndOperationDelegate onEndGetLabelsDelegate;
        
        private System.Threading.SendOrPostCallback onGetLabelsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTaxonomyLabelsDelegate;
        
        private EndOperationDelegate onEndGetTaxonomyLabelsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTaxonomyLabelsCompletedDelegate;
        
        public ModelClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ModelClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ModelClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ModelClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ModelClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<AddTaxonomyCompletedEventArgs> AddTaxonomyCompleted;
        
        public event System.EventHandler<AddLabelCompletedEventArgs> AddLabelCompleted;
        
        public event System.EventHandler<AddTaxonomyLabelCompletedEventArgs> AddTaxonomyLabelCompleted;
        
        public event System.EventHandler<GetTaxonomiesCompletedEventArgs> GetTaxonomiesCompleted;
        
        public event System.EventHandler<GetLabelsCompletedEventArgs> GetLabelsCompleted;
        
        public event System.EventHandler<GetTaxonomyLabelsCompletedEventArgs> GetTaxonomyLabelsCompleted;
        
        public bool AddTaxonomy(Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy taxonomy) {
            return base.Channel.AddTaxonomy(taxonomy);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddTaxonomy(Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy taxonomy, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTaxonomy(taxonomy, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddTaxonomy(System.IAsyncResult result) {
            return base.Channel.EndAddTaxonomy(result);
        }
        
        private System.IAsyncResult OnBeginAddTaxonomy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy taxonomy = ((Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy)(inValues[0]));
            return this.BeginAddTaxonomy(taxonomy, callback, asyncState);
        }
        
        private object[] OnEndAddTaxonomy(System.IAsyncResult result) {
            bool retVal = this.EndAddTaxonomy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddTaxonomyCompleted(object state) {
            if ((this.AddTaxonomyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTaxonomyCompleted(this, new AddTaxonomyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTaxonomyAsync(Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy taxonomy) {
            this.AddTaxonomyAsync(taxonomy, null);
        }
        
        public void AddTaxonomyAsync(Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy taxonomy, object userState) {
            if ((this.onBeginAddTaxonomyDelegate == null)) {
                this.onBeginAddTaxonomyDelegate = new BeginOperationDelegate(this.OnBeginAddTaxonomy);
            }
            if ((this.onEndAddTaxonomyDelegate == null)) {
                this.onEndAddTaxonomyDelegate = new EndOperationDelegate(this.OnEndAddTaxonomy);
            }
            if ((this.onAddTaxonomyCompletedDelegate == null)) {
                this.onAddTaxonomyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTaxonomyCompleted);
            }
            base.InvokeAsync(this.onBeginAddTaxonomyDelegate, new object[] {
                        taxonomy}, this.onEndAddTaxonomyDelegate, this.onAddTaxonomyCompletedDelegate, userState);
        }
        
        public bool AddLabel(Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label label) {
            return base.Channel.AddLabel(label);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddLabel(Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label label, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLabel(label, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddLabel(System.IAsyncResult result) {
            return base.Channel.EndAddLabel(result);
        }
        
        private System.IAsyncResult OnBeginAddLabel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label label = ((Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label)(inValues[0]));
            return this.BeginAddLabel(label, callback, asyncState);
        }
        
        private object[] OnEndAddLabel(System.IAsyncResult result) {
            bool retVal = this.EndAddLabel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddLabelCompleted(object state) {
            if ((this.AddLabelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLabelCompleted(this, new AddLabelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLabelAsync(Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label label) {
            this.AddLabelAsync(label, null);
        }
        
        public void AddLabelAsync(Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label label, object userState) {
            if ((this.onBeginAddLabelDelegate == null)) {
                this.onBeginAddLabelDelegate = new BeginOperationDelegate(this.OnBeginAddLabel);
            }
            if ((this.onEndAddLabelDelegate == null)) {
                this.onEndAddLabelDelegate = new EndOperationDelegate(this.OnEndAddLabel);
            }
            if ((this.onAddLabelCompletedDelegate == null)) {
                this.onAddLabelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLabelCompleted);
            }
            base.InvokeAsync(this.onBeginAddLabelDelegate, new object[] {
                        label}, this.onEndAddLabelDelegate, this.onAddLabelCompletedDelegate, userState);
        }
        
        public bool AddTaxonomyLabel(Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel taxonomyLabel) {
            return base.Channel.AddTaxonomyLabel(taxonomyLabel);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddTaxonomyLabel(Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel taxonomyLabel, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTaxonomyLabel(taxonomyLabel, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddTaxonomyLabel(System.IAsyncResult result) {
            return base.Channel.EndAddTaxonomyLabel(result);
        }
        
        private System.IAsyncResult OnBeginAddTaxonomyLabel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel taxonomyLabel = ((Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel)(inValues[0]));
            return this.BeginAddTaxonomyLabel(taxonomyLabel, callback, asyncState);
        }
        
        private object[] OnEndAddTaxonomyLabel(System.IAsyncResult result) {
            bool retVal = this.EndAddTaxonomyLabel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddTaxonomyLabelCompleted(object state) {
            if ((this.AddTaxonomyLabelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTaxonomyLabelCompleted(this, new AddTaxonomyLabelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTaxonomyLabelAsync(Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel taxonomyLabel) {
            this.AddTaxonomyLabelAsync(taxonomyLabel, null);
        }
        
        public void AddTaxonomyLabelAsync(Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel taxonomyLabel, object userState) {
            if ((this.onBeginAddTaxonomyLabelDelegate == null)) {
                this.onBeginAddTaxonomyLabelDelegate = new BeginOperationDelegate(this.OnBeginAddTaxonomyLabel);
            }
            if ((this.onEndAddTaxonomyLabelDelegate == null)) {
                this.onEndAddTaxonomyLabelDelegate = new EndOperationDelegate(this.OnEndAddTaxonomyLabel);
            }
            if ((this.onAddTaxonomyLabelCompletedDelegate == null)) {
                this.onAddTaxonomyLabelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTaxonomyLabelCompleted);
            }
            base.InvokeAsync(this.onBeginAddTaxonomyLabelDelegate, new object[] {
                        taxonomyLabel}, this.onEndAddTaxonomyLabelDelegate, this.onAddTaxonomyLabelCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy> GetTaxonomies() {
            return base.Channel.GetTaxonomies();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTaxonomies(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTaxonomies(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy> EndGetTaxonomies(System.IAsyncResult result) {
            return base.Channel.EndGetTaxonomies(result);
        }
        
        private System.IAsyncResult OnBeginGetTaxonomies(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetTaxonomies(callback, asyncState);
        }
        
        private object[] OnEndGetTaxonomies(System.IAsyncResult result) {
            System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Taxonomy> retVal = this.EndGetTaxonomies(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTaxonomiesCompleted(object state) {
            if ((this.GetTaxonomiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTaxonomiesCompleted(this, new GetTaxonomiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTaxonomiesAsync() {
            this.GetTaxonomiesAsync(null);
        }
        
        public void GetTaxonomiesAsync(object userState) {
            if ((this.onBeginGetTaxonomiesDelegate == null)) {
                this.onBeginGetTaxonomiesDelegate = new BeginOperationDelegate(this.OnBeginGetTaxonomies);
            }
            if ((this.onEndGetTaxonomiesDelegate == null)) {
                this.onEndGetTaxonomiesDelegate = new EndOperationDelegate(this.OnEndGetTaxonomies);
            }
            if ((this.onGetTaxonomiesCompletedDelegate == null)) {
                this.onGetTaxonomiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTaxonomiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetTaxonomiesDelegate, null, this.onEndGetTaxonomiesDelegate, this.onGetTaxonomiesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label> GetLabels() {
            return base.Channel.GetLabels();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLabels(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLabels(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label> EndGetLabels(System.IAsyncResult result) {
            return base.Channel.EndGetLabels(result);
        }
        
        private System.IAsyncResult OnBeginGetLabels(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetLabels(callback, asyncState);
        }
        
        private object[] OnEndGetLabels(System.IAsyncResult result) {
            System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.Label> retVal = this.EndGetLabels(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLabelsCompleted(object state) {
            if ((this.GetLabelsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLabelsCompleted(this, new GetLabelsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLabelsAsync() {
            this.GetLabelsAsync(null);
        }
        
        public void GetLabelsAsync(object userState) {
            if ((this.onBeginGetLabelsDelegate == null)) {
                this.onBeginGetLabelsDelegate = new BeginOperationDelegate(this.OnBeginGetLabels);
            }
            if ((this.onEndGetLabelsDelegate == null)) {
                this.onEndGetLabelsDelegate = new EndOperationDelegate(this.OnEndGetLabels);
            }
            if ((this.onGetLabelsCompletedDelegate == null)) {
                this.onGetLabelsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLabelsCompleted);
            }
            base.InvokeAsync(this.onBeginGetLabelsDelegate, null, this.onEndGetLabelsDelegate, this.onGetLabelsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel> GetTaxonomyLabels() {
            return base.Channel.GetTaxonomyLabels();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTaxonomyLabels(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTaxonomyLabels(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel> EndGetTaxonomyLabels(System.IAsyncResult result) {
            return base.Channel.EndGetTaxonomyLabels(result);
        }
        
        private System.IAsyncResult OnBeginGetTaxonomyLabels(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetTaxonomyLabels(callback, asyncState);
        }
        
        private object[] OnEndGetTaxonomyLabels(System.IAsyncResult result) {
            System.Collections.Generic.List<Construct.UX.ViewModels.Meaning.MeaningServiceReference.TaxonomyLabel> retVal = this.EndGetTaxonomyLabels(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTaxonomyLabelsCompleted(object state) {
            if ((this.GetTaxonomyLabelsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTaxonomyLabelsCompleted(this, new GetTaxonomyLabelsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTaxonomyLabelsAsync() {
            this.GetTaxonomyLabelsAsync(null);
        }
        
        public void GetTaxonomyLabelsAsync(object userState) {
            if ((this.onBeginGetTaxonomyLabelsDelegate == null)) {
                this.onBeginGetTaxonomyLabelsDelegate = new BeginOperationDelegate(this.OnBeginGetTaxonomyLabels);
            }
            if ((this.onEndGetTaxonomyLabelsDelegate == null)) {
                this.onEndGetTaxonomyLabelsDelegate = new EndOperationDelegate(this.OnEndGetTaxonomyLabels);
            }
            if ((this.onGetTaxonomyLabelsCompletedDelegate == null)) {
                this.onGetTaxonomyLabelsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTaxonomyLabelsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTaxonomyLabelsDelegate, null, this.onEndGetTaxonomyLabelsDelegate, this.onGetTaxonomyLabelsCompletedDelegate, userState);
        }
    }
}
