#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Construct.Server.Services.Entities.Dto
{
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;
    using Microsoft.SqlServer.Types;
	
    public interface IDtoWithKey
	{
		string DtoKey { get; set; }
	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(DataTypeSourceDto))]
	[KnownType(typeof(DataTypeDto))]
	[KnownType(typeof(ItemDto))]
	[KnownType(typeof(PropertyParentDto))]
	[KnownType(typeof(PropertyTypeDto))]
	[KnownType(typeof(DataTypeDto))]
	[KnownType(typeof(VisualizerDto))]
	public partial class DataTypeDto : IDtoWithKey
	{
		public DataTypeDto()
		{
		}
		
		public DataTypeDto(string names, bool isReadOnlies, bool isCoreTypes, Guid iDs, string fullNames, Guid dataTypeSourceIDs, Guid dataTypeParentIDs, DataTypeSourceDto dataTypeSources, DataTypeDto dataType1, IList<ItemDto> items, IList<PropertyParentDto> propertyParents, IList<PropertyTypeDto> propertyTypes, IList<DataTypeDto> dataTypes, IList<VisualizerDto> visualizers)
		{
			this.Name = names;
			this.IsReadOnly = isReadOnlies;
			this.IsCoreType = isCoreTypes;
			this.ID = iDs;
			this.FullName = fullNames;
			this.DataTypeSourceID = dataTypeSourceIDs;
			this.DataTypeParentID = dataTypeParentIDs;
			this.DataTypeSource = dataTypeSources;
			this.DataTypeParent = dataType1;
			this.Items = items;
			this.PropertyParents = propertyParents;
			this.PropertyTypes = propertyTypes;
			this.DataTypeChildren = dataTypes;
			this.Visualizers = visualizers;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual string Name { get;set; }

		[DataMember]
		public virtual bool IsReadOnly { get;set; }

		[DataMember]
		public virtual bool IsCoreType { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual string FullName { get;set; }

		[DataMember]
		public virtual Guid DataTypeSourceID { get;set; }

		[DataMember]
		public virtual Guid DataTypeParentID { get;set; }

		[DataMember]
		public virtual DataTypeSourceDto DataTypeSource { get;set; }

		[DataMember]
		public virtual DataTypeDto DataTypeParent { get;set; }

		[DataMember]
		public virtual IList<ItemDto> Items { get;set; }

		[DataMember]
		public virtual IList<PropertyParentDto> PropertyParents { get;set; }

		[DataMember]
		public virtual IList<PropertyTypeDto> PropertyTypes { get;set; }

		[DataMember]
		public virtual IList<DataTypeDto> DataTypeChildren { get;set; }

		[DataMember]
		public virtual IList<VisualizerDto> Visualizers { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(DataTypeSourceDto))]
	public partial class ConstantDto : IDtoWithKey
	{
		public ConstantDto()
		{
		}
		
		public ConstantDto(DataTypeSourceDto dataTypeSources)
		{
			this.DataTypeSource = dataTypeSources;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual DataTypeSourceDto DataTypeSource { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(DataTypeSourceDto))]
	[KnownType(typeof(DataTypeDto))]
	[KnownType(typeof(SourceDto))]
	[KnownType(typeof(DataTypeSourceDto))]
	[KnownType(typeof(ConstantDto))]
	public partial class DataTypeSourceDto : IDtoWithKey
	{
		public DataTypeSourceDto()
		{
		}
		
		public DataTypeSourceDto(Guid iDs, bool isCategories, bool isReadOnlies, string names, System.Nullable<System.Guid> parentIDs, DataTypeSourceDto dataTypeSource1, IList<DataTypeDto> dataTypes, IList<SourceDto> sources, IList<DataTypeSourceDto> dataTypeSources, IList<ConstantDto> constantDefinitions)
		{
			this.ID = iDs;
			this.IsCategory = isCategories;
			this.IsReadOnly = isReadOnlies;
			this.Name = names;
			this.ParentID = parentIDs;
			this.DataTypeSource1 = dataTypeSource1;
			this.DataTypes = dataTypes;
			this.Sources = sources;
			this.DataTypeSources = dataTypeSources;
			this.ConstantDefinitions = constantDefinitions;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual bool IsCategory { get;set; }

		[DataMember]
		public virtual bool IsReadOnly { get;set; }

		[DataMember]
		public virtual string Name { get;set; }

		[DataMember]
		public virtual System.Nullable<System.Guid> ParentID { get;set; }

		[DataMember]
		public virtual DataTypeSourceDto DataTypeSource1 { get;set; }

		[DataMember]
		public virtual IList<DataTypeDto> DataTypes { get;set; }

		[DataMember]
		public virtual IList<SourceDto> Sources { get;set; }

		[DataMember]
		public virtual IList<DataTypeSourceDto> DataTypeSources { get;set; }

		[DataMember]
		public virtual IList<ConstantDto> ConstantDefinitions { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(SourceDto))]
	[KnownType(typeof(DataTypeDto))]
	public partial class ItemDto : IDtoWithKey
	{
		public ItemDto()
		{
		}
		
		public ItemDto(DateTime sourceTimes, Guid sourceIds, DateTime recordCreationTimes, string longitudes, SqlGeography locations, string latitudes, Guid iDs, Guid dataTypeIDs, SourceDto sources, DataTypeDto dataTypes)
		{
			this.SourceTime = sourceTimes;
			this.SourceId = sourceIds;
			this.RecordCreationTime = recordCreationTimes;
			this.Longitude = longitudes;
			this.Location = locations;
			this.Latitude = latitudes;
			this.ID = iDs;
			this.DataTypeID = dataTypeIDs;
			this.Source = sources;
			this.DataType = dataTypes;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual DateTime SourceTime { get;set; }

		[DataMember]
		public virtual Guid SourceId { get;set; }

		[DataMember]
		public virtual DateTime RecordCreationTime { get;set; }

		[DataMember]
		public virtual string Longitude { get;set; }

		[DataMember]
		public virtual SqlGeography Location { get;set; }

		[DataMember]
		public virtual string Latitude { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual Guid DataTypeID { get;set; }

		[DataMember]
		public virtual SourceDto Source { get;set; }

		[DataMember]
		public virtual DataTypeDto DataType { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(QuestionParameterDto))]
	public partial class PropertyDto : IDtoWithKey
	{
		public PropertyDto()
		{
		}
		
		public PropertyDto(Guid iDs, string names, IList<QuestionParameterDto> questionParameters)
		{
			this.ID = iDs;
			this.Name = names;
			this.QuestionParameters = questionParameters;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual string Name { get;set; }

		[DataMember]
		public virtual IList<QuestionParameterDto> QuestionParameters { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(DataTypeDto))]
	public partial class PropertyParentDto : IDtoWithKey
	{
		public PropertyParentDto()
		{
		}
		
		public PropertyParentDto(Guid parentDataTypeIDs, DataTypeDto dataTypes)
		{
			this.ParentDataTypeID = parentDataTypeIDs;
			this.DataType = dataTypes;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual Guid ParentDataTypeID { get;set; }

		[DataMember]
		public virtual DataTypeDto DataType { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(DataTypeDto))]
	public partial class PropertyTypeDto : IDtoWithKey
	{
		public PropertyTypeDto()
		{
		}
		
		public PropertyTypeDto(Guid propertyDataTypeIDs, DataTypeDto dataTypes)
		{
			this.PropertyDataTypeID = propertyDataTypeIDs;
			this.DataType = dataTypes;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual Guid PropertyDataTypeID { get;set; }

		[DataMember]
		public virtual DataTypeDto DataType { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(QuestionParameterDto))]
	public partial class QuestionDto : IDtoWithKey
	{
		public QuestionDto()
		{
		}
		
		public QuestionDto(string linqExpressions, IList<QuestionParameterDto> questionParameters)
		{
			this.LinqExpression = linqExpressions;
			this.QuestionParameters = questionParameters;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual string LinqExpression { get;set; }

		[DataMember]
		public virtual IList<QuestionParameterDto> QuestionParameters { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(PropertyDto))]
	[KnownType(typeof(QuestionDto))]
	public partial class QuestionParameterDto : IDtoWithKey
	{
		public QuestionParameterDto()
		{
		}
		
		public QuestionParameterDto(Guid propertyIDs, Guid iDs, Guid propertyTypeIDs, Guid questionIDs, PropertyDto properties, QuestionDto questions)
		{
			this.PropertyID = propertyIDs;
			this.ID = iDs;
			this.PropertyTypeID = propertyTypeIDs;
			this.QuestionID = questionIDs;
			this.Property = properties;
			this.Question = questions;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual Guid PropertyID { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual Guid PropertyTypeID { get;set; }

		[DataMember]
		public virtual Guid QuestionID { get;set; }

		[DataMember]
		public virtual PropertyDto Property { get;set; }

		[DataMember]
		public virtual QuestionDto Question { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(DataTypeSourceDto))]
	[KnownType(typeof(ItemDto))]
	public partial class SourceDto : IDtoWithKey
	{
		public SourceDto()
		{
		}
		
		public SourceDto(Guid dataTypeSourceIDs, Guid iDs, DataTypeSourceDto dataTypeSources, IList<ItemDto> items)
		{
			this.DataTypeSourceID = dataTypeSourceIDs;
			this.ID = iDs;
			this.DataTypeSource = dataTypeSources;
			this.Items = items;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual Guid DataTypeSourceID { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual DataTypeSourceDto DataTypeSource { get;set; }

		[DataMember]
		public virtual IList<ItemDto> Items { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(SensorHostDto))]
	[KnownType(typeof(SensorTypeSourceDto))]
	public partial class SensorDto : IDtoWithKey
	{
		public SensorDto()
		{
		}
		
		public SensorDto(Guid sensorHostIDs, bool isHealthies, DateTime? installedFromServerDates, string currentRendezvous, Guid sensorTypeSourceIDs, SensorHostDto sensorHosts, SensorTypeSourceDto sensorTypeSources)
		{
			this.SensorHostID = sensorHostIDs;
			this.IsHealthy = isHealthies;
			this.InstalledFromServerDate = installedFromServerDates;
			this.CurrentRendezvous = currentRendezvous;
			this.SensorTypeSourceID = sensorTypeSourceIDs;
			this.SensorHost = sensorHosts;
			this.SensorTypeSource = sensorTypeSources;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual Guid SensorHostID { get;set; }

		[DataMember]
		public virtual bool IsHealthy { get;set; }

		[DataMember]
		public virtual DateTime? InstalledFromServerDate { get;set; }

		[DataMember]
		public virtual string CurrentRendezvous { get;set; }

		[DataMember]
		public virtual Guid SensorTypeSourceID { get;set; }

		[DataMember]
		public virtual SensorHostDto SensorHost { get;set; }

		[DataMember]
		public virtual SensorTypeSourceDto SensorTypeSource { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(SensorTypeSourceDto))]
	[KnownType(typeof(SensorCommandParameterDto))]
	public partial class SensorCommandDto : IDtoWithKey
	{
		public SensorCommandDto()
		{
		}
		
		public SensorCommandDto(Guid sensorTypeSourceIDs, Guid iDs, string commandNames, SensorTypeSourceDto sensorTypeSources, IList<SensorCommandParameterDto> sensor_Command_Parameters)
		{
			this.SensorTypeSourceID = sensorTypeSourceIDs;
			this.ID = iDs;
			this.CommandName = commandNames;
			this.SensorTypeSource = sensorTypeSources;
			this.SensorCommandParameters = sensor_Command_Parameters;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual Guid SensorTypeSourceID { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual string CommandName { get;set; }

		[DataMember]
		public virtual SensorTypeSourceDto SensorTypeSource { get;set; }

		[DataMember]
		public virtual IList<SensorCommandParameterDto> SensorCommandParameters { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(SensorCommandDto))]
	public partial class SensorCommandParameterDto : IDtoWithKey
	{
		public SensorCommandParameterDto()
		{
		}
		
		public SensorCommandParameterDto(string values, Guid sensorCommandIDs, string keys, Guid iDs, SensorCommandDto sensorCommands)
		{
			this.Value = values;
			this.SensorCommandID = sensorCommandIDs;
			this.Key = keys;
			this.ID = iDs;
			this.SensorCommand = sensorCommands;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual string Value { get;set; }

		[DataMember]
		public virtual Guid SensorCommandID { get;set; }

		[DataMember]
		public virtual string Key { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual SensorCommandDto SensorCommand { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(SensorHostTypeDto))]
	[KnownType(typeof(SensorDto))]
	public partial class SensorHostDto : IDtoWithKey
	{
		public SensorHostDto()
		{
		}
		
		public SensorHostDto(Guid sensorHostTypeIDs, bool isHealthies, Guid iDs, string hostUris, string hostNames, SensorHostTypeDto sensorHostTypes, IList<SensorDto> sensors)
		{
			this.SensorHostTypeID = sensorHostTypeIDs;
			this.IsHealthy = isHealthies;
			this.ID = iDs;
			this.HostUri = hostUris;
			this.HostName = hostNames;
			this.SensorHostType = sensorHostTypes;
			this.Sensors = sensors;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual Guid SensorHostTypeID { get;set; }

		[DataMember]
		public virtual bool IsHealthy { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual string HostUri { get;set; }

		[DataMember]
		public virtual string HostName { get;set; }

		[DataMember]
		public virtual SensorHostTypeDto SensorHostType { get;set; }

		[DataMember]
		public virtual IList<SensorDto> Sensors { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(SensorHostDto))]
	[KnownType(typeof(SensorTypeSourceDto))]
	public partial class SensorHostTypeDto : IDtoWithKey
	{
		public SensorHostTypeDto()
		{
		}
		
		public SensorHostTypeDto(string sensorHostTypeNames, System.Nullable<System.Guid> parentIDs, bool isCategories, Guid iDs, IList<SensorHostDto> sensorHosts, IList<SensorTypeSourceDto> sensorDataTypeSources)
		{
			this.SensorHostTypeName = sensorHostTypeNames;
			this.ParentID = parentIDs;
			this.IsCategory = isCategories;
			this.ID = iDs;
			this.SensorHosts = sensorHosts;
			this.SensorDataTypeSources = sensorDataTypeSources;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual string SensorHostTypeName { get;set; }

		[DataMember]
		public virtual System.Nullable<System.Guid> ParentID { get;set; }

		[DataMember]
		public virtual bool IsCategory { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual IList<SensorHostDto> SensorHosts { get;set; }

		[DataMember]
		public virtual IList<SensorTypeSourceDto> SensorDataTypeSources { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(SensorTypeSourceDto))]
	public partial class SensorRuntimeDto : IDtoWithKey
	{
		public SensorRuntimeDto()
		{
		}
		
		public SensorRuntimeDto(DateTime? recCreationDates, byte[] installerZips, string installerXmls, string installerUris, Guid iDs, string cacheUris, Guid sensorTypeSourceIDs, SensorTypeSourceDto sensorTypeSources)
		{
			this.RecCreationDate = recCreationDates;
			this.InstallerZip = installerZips;
			this.InstallerXml = installerXmls;
			this.InstallerUri = installerUris;
			this.ID = iDs;
			this.CacheUri = cacheUris;
			this.SensorTypeSourceID = sensorTypeSourceIDs;
			this.SensorTypeSource = sensorTypeSources;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual DateTime? RecCreationDate { get;set; }

		[DataMember]
		public virtual byte[] InstallerZip { get;set; }

		[DataMember]
		public virtual string InstallerXml { get;set; }

		[DataMember]
		public virtual string InstallerUri { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual string CacheUri { get;set; }

		[DataMember]
		public virtual Guid SensorTypeSourceID { get;set; }

		[DataMember]
		public virtual SensorTypeSourceDto SensorTypeSource { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(SensorHostTypeDto))]
	[KnownType(typeof(SensorRuntimeDto))]
	[KnownType(typeof(SensorCommandDto))]
	[KnownType(typeof(SensorDto))]
	public partial class SensorTypeSourceDto : IDtoWithKey
	{
		public SensorTypeSourceDto()
		{
		}
		
		public SensorTypeSourceDto(Guid sensorHostTypeIDs, string versions, SensorHostTypeDto sensorHostTypes, IList<SensorRuntimeDto> sensorRuntimes, IList<SensorCommandDto> sensorCommands, IList<SensorDto> sensors)
		{
			this.SensorHostTypeID = sensorHostTypeIDs;
			this.Version = versions;
			this.SensorHostType = sensorHostTypes;
			this.SensorRuntimes = sensorRuntimes;
			this.SensorCommands = sensorCommands;
			this.Sensors = sensors;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual Guid SensorHostTypeID { get;set; }

		[DataMember]
		public virtual string Version { get;set; }

		[DataMember]
		public virtual SensorHostTypeDto SensorHostType { get;set; }

		[DataMember]
		public virtual IList<SensorRuntimeDto> SensorRuntimes { get;set; }

		[DataMember]
		public virtual IList<SensorCommandDto> SensorCommands { get;set; }

		[DataMember]
		public virtual IList<SensorDto> Sensors { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(SessionDesignDto))]
	public partial class SessionDto : IDtoWithKey
	{
		public SessionDto()
		{
		}
		
		public SessionDto(DateTime? startedCollectingDataTimes, Guid sessionDesignIDs, string notes, Guid iDs, SessionDesignDto sessionDesigns)
		{
			this.StartedCollectingDataTime = startedCollectingDataTimes;
			this.SessionDesignID = sessionDesignIDs;
			this.Note = notes;
			this.ID = iDs;
			this.SessionDesign = sessionDesigns;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual DateTime? StartedCollectingDataTime { get;set; }

		[DataMember]
		public virtual Guid SessionDesignID { get;set; }

		[DataMember]
		public virtual string Note { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual SessionDesignDto SessionDesign { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(SessionDesignNodeDto))]
	[KnownType(typeof(SessionDto))]
	public partial class SessionDesignDto : IDtoWithKey
	{
		public SessionDesignDto()
		{
		}
		
		public SessionDesignDto(string names, bool isReadOnlies, bool isCompletes, Guid iDs, string descriptions, IList<SessionDesignNodeDto> sessionDesignNodes, IList<SessionDto> sessions)
		{
			this.Name = names;
			this.IsReadOnly = isReadOnlies;
			this.IsComplete = isCompletes;
			this.ID = iDs;
			this.Description = descriptions;
			this.SessionDesignNodes = sessionDesignNodes;
			this.Sessions = sessions;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual string Name { get;set; }

		[DataMember]
		public virtual bool IsReadOnly { get;set; }

		[DataMember]
		public virtual bool IsComplete { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual string Description { get;set; }

		[DataMember]
		public virtual IList<SessionDesignNodeDto> SessionDesignNodes { get;set; }

		[DataMember]
		public virtual IList<SessionDto> Sessions { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(SessionDesignDto))]
	public partial class SessionDesignNodeDto : IDtoWithKey
	{
		public SessionDesignNodeDto()
		{
		}
		
		public SessionDesignNodeDto(System.Nullable<System.Guid> sourceIDs, Guid sessionDesignIDs, Guid iDs, Guid dataTypeSourceIDs, SessionDesignDto sessionDesigns)
		{
			this.SourceID = sourceIDs;
			this.SessionDesignID = sessionDesignIDs;
			this.ID = iDs;
			this.DataTypeSourceID = dataTypeSourceIDs;
			this.SessionDesign = sessionDesigns;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual System.Nullable<System.Guid> SourceID { get;set; }

		[DataMember]
		public virtual Guid SessionDesignID { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual Guid DataTypeSourceID { get;set; }

		[DataMember]
		public virtual SessionDesignDto SessionDesign { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(VisualizerDto))]
	public partial class VisualizationDto : IDtoWithKey
	{
		public VisualizationDto()
		{
		}
		
		public VisualizationDto(Guid visualizerIDs, string names, Guid iDs, string descriptions, Guid dataTypeIDs, VisualizerDto visualizers)
		{
			this.VisualizerID = visualizerIDs;
			this.Name = names;
			this.ID = iDs;
			this.Description = descriptions;
			this.DataTypeID = dataTypeIDs;
			this.Visualizer = visualizers;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual Guid VisualizerID { get;set; }

		[DataMember]
		public virtual string Name { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual string Description { get;set; }

		[DataMember]
		public virtual Guid DataTypeID { get;set; }

		[DataMember]
		public virtual VisualizerDto Visualizer { get;set; }

	}
	
	[DataContract(IsReference = true)]
	[KnownType(typeof(DataTypeDto))]
	[KnownType(typeof(VisualizationDto))]
	public partial class VisualizerDto : IDtoWithKey
	{
		public VisualizerDto()
		{
		}
		
		public VisualizerDto(string names, Guid iDs, string descriptions, Guid primitiveDataTypeIDs, DataTypeDto dataTypes, IList<VisualizationDto> visualizations)
		{
			this.Name = names;
			this.ID = iDs;
			this.Description = descriptions;
			this.PrimitiveDataTypeID = primitiveDataTypeIDs;
			this.DataType = dataTypes;
			this.Visualizations = visualizations;
		}
		
		[DataMember]
		public virtual string DtoKey { get; set; }
		
		[DataMember]
		public virtual string Name { get;set; }

		[DataMember]
		public virtual Guid ID { get;set; }

		[DataMember]
		public virtual string Description { get;set; }

		[DataMember]
		public virtual Guid PrimitiveDataTypeID { get;set; }

		[DataMember]
		public virtual DataTypeDto DataType { get;set; }

		[DataMember]
		public virtual IList<VisualizationDto> Visualizations { get;set; }

	}
	
}
#pragma warning restore 1591
