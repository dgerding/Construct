#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Construct.Server.Services.Entities.Assemblers
{
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;
	using Telerik.OpenAccess;
	using Construct.Server.Services.Entities.Dto;
	using Construct.Server.Services.Entities.Converters;
	using Construct.Server.Entities;

			
	public partial interface IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    TDto Assemble(TEntity entity);
	    TEntity Assemble(TEntity entity, TDto dto);
	
	    IEnumerable<TDto> Assemble(IEnumerable<TEntity> entityList);
	    IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList);
	}
	
	public abstract class Assembler<TDto, TEntity> : IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    public abstract TDto Assemble(TEntity domainEntity);
	    public abstract TEntity Assemble(TEntity entity, TDto dto);
	
	    public void AssembleNavigational(TEntity entity, TDto dto)
	    {
	    	this.AssembleReferences(entity, dto);
	    	this.AssembleCollections(entity, dto);
	    }
	
	    public abstract void AssembleReferences(TEntity entity, TDto dto);
	    public abstract void AssembleCollections(TEntity entity, TDto dto);
	
	
	    public virtual IEnumerable<TDto> Assemble(IEnumerable<TEntity> domainEntityList)
	    {
	        List<TDto> dtos = Activator.CreateInstance<List<TDto>>();
	        foreach (TEntity domainEntity in domainEntityList)
	        {
	            dtos.Add(Assemble(domainEntity));
	        }
	        return dtos;
	    }
	
	    public virtual IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList)
	    {
	        List<TEntity> domainEntities = Activator.CreateInstance<List<TEntity>>();
	        foreach (TDto dto in dtoList)
	        {
	            domainEntities.Add(Assemble(null, dto));
	        }
	        return domainEntities;
	    }
	}
	
	public partial interface IDataTypeAssembler : IAssembler<DataTypeDto, DataType>
	{ 
	
	}
	
	public partial class DataTypeAssemblerBase : Assembler<DataTypeDto, DataType>
	{
		/// <summary>
	    /// Invoked after the DataTypeDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DataTypeDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DataTypeDto dto);
	
		/// <summary>
	    /// Invoked after the DataType instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DataType"/> instance.</param>
		partial void OnEntityAssembled(DataType entity);
		
	    public override DataType Assemble(DataType entity, DataTypeDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DataType();
	        }
			
			entity.Name = dto.Name;
			entity.IsReadOnly = dto.IsReadOnly;
			entity.IsCoreType = dto.IsCoreType;
			entity.ID = dto.ID;
			entity.FullName = dto.FullName;
			entity.DataTypeSourceID = dto.DataTypeSourceID;
			entity.DataTypeParentID = dto.DataTypeParentID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DataTypeDto Assemble(DataType entity)
	    {
	        DataTypeDto dto = new DataTypeDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Name = entity.Name;
			dto.IsReadOnly = entity.IsReadOnly;
			dto.IsCoreType = entity.IsCoreType;
			dto.ID = entity.ID;
			dto.FullName = entity.FullName;
			dto.DataTypeSourceID = entity.DataTypeSourceID;
			dto.DataTypeParentID = entity.DataTypeParentID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DataType entity, DataTypeDto dto)
	    {
			DataTypeSourceAssembler dataTypeSourceAssembler = new DataTypeSourceAssembler();
			dto.DataTypeSource = dataTypeSourceAssembler.Assemble(entity.DataTypeSource);

			DataTypeAssembler dataTypeAssembler = new DataTypeAssembler();
			dto.DataTypeParent = dataTypeAssembler.Assemble(entity.DataTypeParent);

	    }
	
	    public override void AssembleCollections(DataType entity, DataTypeDto dto)
	    {
			ItemAssembler itemAssembler = new ItemAssembler();

			dto.Items = new List<ItemDto>();
			foreach (Item item in entity.Items)
			{
				var dtoItem = itemAssembler.Assemble(item);
				dtoItem.DataType = dto;
				dto.Items.Add(dtoItem);
			}

			PropertyParentAssembler propertyParentAssembler = new PropertyParentAssembler();

			dto.PropertyParents = new List<PropertyParentDto>();
			foreach (PropertyParent item in entity.PropertyParents)
			{
				var dtoItem = propertyParentAssembler.Assemble(item);
				dtoItem.DataType = dto;
				dto.PropertyParents.Add(dtoItem);
			}

			PropertyTypeAssembler propertyTypeAssembler = new PropertyTypeAssembler();

			dto.PropertyTypes = new List<PropertyTypeDto>();
			foreach (PropertyType item in entity.PropertyTypes)
			{
				var dtoItem = propertyTypeAssembler.Assemble(item);
				dtoItem.DataType = dto;
				dto.PropertyTypes.Add(dtoItem);
			}

			DataTypeAssembler dataTypeAssembler = new DataTypeAssembler();

			dto.DataTypeChildren = new List<DataTypeDto>();
			foreach (DataType item in entity.DataTypeChildren)
			{
				var dtoItem = dataTypeAssembler.Assemble(item);
				dtoItem.DataTypeParent = dto;
				dto.DataTypeChildren.Add(dtoItem);
			}

			VisualizerAssembler visualizerAssembler = new VisualizerAssembler();

			dto.Visualizers = new List<VisualizerDto>();
			foreach (Visualizer item in entity.Visualizers)
			{
				var dtoItem = visualizerAssembler.Assemble(item);
				dtoItem.DataType = dto;
				dto.Visualizers.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class DataTypeAssembler : DataTypeAssemblerBase, IDataTypeAssembler
	{
	    
	}
	
	public partial interface IConstantAssembler : IAssembler<ConstantDto, Constant>
	{ 
	
	}
	
	public partial class ConstantAssemblerBase : Assembler<ConstantDto, Constant>
	{
		/// <summary>
	    /// Invoked after the ConstantDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ConstantDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ConstantDto dto);
	
		/// <summary>
	    /// Invoked after the Constant instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Constant"/> instance.</param>
		partial void OnEntityAssembled(Constant entity);
		
	    public override Constant Assemble(Constant entity, ConstantDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Constant();
	        }
			
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ConstantDto Assemble(Constant entity)
	    {
	        ConstantDto dto = new ConstantDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Constant entity, ConstantDto dto)
	    {
			DataTypeSourceAssembler dataTypeSourceAssembler = new DataTypeSourceAssembler();
			dto.DataTypeSource = dataTypeSourceAssembler.Assemble(entity.DataTypeSource);

	    }
	
	    public override void AssembleCollections(Constant entity, ConstantDto dto)
	    {
	    }
	
	}
	
	
	public partial class ConstantAssembler : ConstantAssemblerBase, IConstantAssembler
	{
	    
	}
	
	public partial interface IDataTypeSourceAssembler : IAssembler<DataTypeSourceDto, DataTypeSource>
	{ 
	
	}
	
	public partial class DataTypeSourceAssemblerBase : Assembler<DataTypeSourceDto, DataTypeSource>
	{
		/// <summary>
	    /// Invoked after the DataTypeSourceDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DataTypeSourceDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DataTypeSourceDto dto);
	
		/// <summary>
	    /// Invoked after the DataTypeSource instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="DataTypeSource"/> instance.</param>
		partial void OnEntityAssembled(DataTypeSource entity);
		
	    public override DataTypeSource Assemble(DataTypeSource entity, DataTypeSourceDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new DataTypeSource();
	        }
			
			entity.ID = dto.ID;
			entity.IsCategory = dto.IsCategory;
			entity.IsReadOnly = dto.IsReadOnly;
			entity.Name = dto.Name;
			entity.ParentID = dto.ParentID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DataTypeSourceDto Assemble(DataTypeSource entity)
	    {
	        DataTypeSourceDto dto = new DataTypeSourceDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.IsCategory = entity.IsCategory;
			dto.IsReadOnly = entity.IsReadOnly;
			dto.Name = entity.Name;
			dto.ParentID = entity.ParentID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(DataTypeSource entity, DataTypeSourceDto dto)
	    {
			DataTypeSourceAssembler dataTypeSourceAssembler = new DataTypeSourceAssembler();
			dto.DataTypeSource1 = dataTypeSourceAssembler.Assemble(entity.DataTypeSource1);

	    }
	
	    public override void AssembleCollections(DataTypeSource entity, DataTypeSourceDto dto)
	    {
			DataTypeAssembler dataTypeAssembler = new DataTypeAssembler();

			dto.DataTypes = new List<DataTypeDto>();
			foreach (DataType item in entity.DataTypes)
			{
				var dtoItem = dataTypeAssembler.Assemble(item);
				dtoItem.DataTypeSource = dto;
				dto.DataTypes.Add(dtoItem);
			}

			SourceAssembler sourceAssembler = new SourceAssembler();

			dto.Sources = new List<SourceDto>();
			foreach (Source item in entity.Sources)
			{
				var dtoItem = sourceAssembler.Assemble(item);
				dtoItem.DataTypeSource = dto;
				dto.Sources.Add(dtoItem);
			}

			DataTypeSourceAssembler dataTypeSourceAssembler = new DataTypeSourceAssembler();

			dto.DataTypeSources = new List<DataTypeSourceDto>();
			foreach (DataTypeSource item in entity.DataTypeSources)
			{
				var dtoItem = dataTypeSourceAssembler.Assemble(item);
				dtoItem.DataTypeSource1 = dto;
				dto.DataTypeSources.Add(dtoItem);
			}

			ConstantAssembler constantAssembler = new ConstantAssembler();

			dto.ConstantDefinitions = new List<ConstantDto>();
			foreach (Constant item in entity.ConstantDefinitions)
			{
				var dtoItem = constantAssembler.Assemble(item);
				dtoItem.DataTypeSource = dto;
				dto.ConstantDefinitions.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class DataTypeSourceAssembler : DataTypeSourceAssemblerBase, IDataTypeSourceAssembler
	{
	    
	}
	
	public partial interface IItemAssembler : IAssembler<ItemDto, Item>
	{ 
	
	}
	
	public partial class ItemAssemblerBase : Assembler<ItemDto, Item>
	{
		/// <summary>
	    /// Invoked after the ItemDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ItemDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ItemDto dto);
	
		/// <summary>
	    /// Invoked after the Item instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Item"/> instance.</param>
		partial void OnEntityAssembled(Item entity);
		
	    public override Item Assemble(Item entity, ItemDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Item();
	        }
			
			entity.SourceTime = dto.SourceTime;
			entity.SourceId = dto.SourceId;
			entity.RecordCreationTime = dto.RecordCreationTime;
			entity.Longitude = dto.Longitude;
			entity.Location = dto.Location;
			entity.Latitude = dto.Latitude;
			entity.ID = dto.ID;
			entity.DataTypeID = dto.DataTypeID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ItemDto Assemble(Item entity)
	    {
	        ItemDto dto = new ItemDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SourceTime = entity.SourceTime;
			dto.SourceId = entity.SourceId;
			dto.RecordCreationTime = entity.RecordCreationTime;
			dto.Longitude = entity.Longitude;
			dto.Location = entity.Location;
			dto.Latitude = entity.Latitude;
			dto.ID = entity.ID;
			dto.DataTypeID = entity.DataTypeID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Item entity, ItemDto dto)
	    {
			SourceAssembler sourceAssembler = new SourceAssembler();
			dto.Source = sourceAssembler.Assemble(entity.Source);

			DataTypeAssembler dataTypeAssembler = new DataTypeAssembler();
			dto.DataType = dataTypeAssembler.Assemble(entity.DataType);

	    }
	
	    public override void AssembleCollections(Item entity, ItemDto dto)
	    {
	    }
	
	}
	
	
	public partial class ItemAssembler : ItemAssemblerBase, IItemAssembler
	{
	    
	}
	
	public partial interface IPropertyAssembler : IAssembler<PropertyDto, Property>
	{ 
	
	}
	
	public partial class PropertyAssemblerBase : Assembler<PropertyDto, Property>
	{
		/// <summary>
	    /// Invoked after the PropertyDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="PropertyDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(PropertyDto dto);
	
		/// <summary>
	    /// Invoked after the Property instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Property"/> instance.</param>
		partial void OnEntityAssembled(Property entity);
		
	    public override Property Assemble(Property entity, PropertyDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Property();
	        }
			
			entity.ID = dto.ID;
			entity.Name = dto.Name;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override PropertyDto Assemble(Property entity)
	    {
	        PropertyDto dto = new PropertyDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.Name = entity.Name;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Property entity, PropertyDto dto)
	    {
	    }
	
	    public override void AssembleCollections(Property entity, PropertyDto dto)
	    {
			QuestionParameterAssembler questionParameterAssembler = new QuestionParameterAssembler();

			dto.QuestionParameters = new List<QuestionParameterDto>();
			foreach (QuestionParameter item in entity.QuestionParameters)
			{
				var dtoItem = questionParameterAssembler.Assemble(item);
				dtoItem.Property = dto;
				dto.QuestionParameters.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class PropertyAssembler : PropertyAssemblerBase, IPropertyAssembler
	{
	    
	}
	
	public partial interface IPropertyParentAssembler : IAssembler<PropertyParentDto, PropertyParent>
	{ 
	
	}
	
	public partial class PropertyParentAssemblerBase : Assembler<PropertyParentDto, PropertyParent>
	{
		/// <summary>
	    /// Invoked after the PropertyParentDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="PropertyParentDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(PropertyParentDto dto);
	
		/// <summary>
	    /// Invoked after the PropertyParent instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="PropertyParent"/> instance.</param>
		partial void OnEntityAssembled(PropertyParent entity);
		
	    public override PropertyParent Assemble(PropertyParent entity, PropertyParentDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new PropertyParent();
	        }
			
			entity.ParentDataTypeID = dto.ParentDataTypeID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override PropertyParentDto Assemble(PropertyParent entity)
	    {
	        PropertyParentDto dto = new PropertyParentDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ParentDataTypeID = entity.ParentDataTypeID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(PropertyParent entity, PropertyParentDto dto)
	    {
			DataTypeAssembler dataTypeAssembler = new DataTypeAssembler();
			dto.DataType = dataTypeAssembler.Assemble(entity.DataType);

	    }
	
	    public override void AssembleCollections(PropertyParent entity, PropertyParentDto dto)
	    {
	    }
	
	}
	
	
	public partial class PropertyParentAssembler : PropertyParentAssemblerBase, IPropertyParentAssembler
	{
	    
	}
	
	public partial interface IPropertyTypeAssembler : IAssembler<PropertyTypeDto, PropertyType>
	{ 
	
	}
	
	public partial class PropertyTypeAssemblerBase : Assembler<PropertyTypeDto, PropertyType>
	{
		/// <summary>
	    /// Invoked after the PropertyTypeDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="PropertyTypeDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(PropertyTypeDto dto);
	
		/// <summary>
	    /// Invoked after the PropertyType instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="PropertyType"/> instance.</param>
		partial void OnEntityAssembled(PropertyType entity);
		
	    public override PropertyType Assemble(PropertyType entity, PropertyTypeDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new PropertyType();
	        }
			
			entity.PropertyDataTypeID = dto.PropertyDataTypeID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override PropertyTypeDto Assemble(PropertyType entity)
	    {
	        PropertyTypeDto dto = new PropertyTypeDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.PropertyDataTypeID = entity.PropertyDataTypeID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(PropertyType entity, PropertyTypeDto dto)
	    {
			DataTypeAssembler dataTypeAssembler = new DataTypeAssembler();
			dto.DataType = dataTypeAssembler.Assemble(entity.DataType);

	    }
	
	    public override void AssembleCollections(PropertyType entity, PropertyTypeDto dto)
	    {
	    }
	
	}
	
	
	public partial class PropertyTypeAssembler : PropertyTypeAssemblerBase, IPropertyTypeAssembler
	{
	    
	}
	
	
	
	
	
	
	public partial interface IQuestionParameterAssembler : IAssembler<QuestionParameterDto, QuestionParameter>
	{ 
	
	}
	
	public partial class QuestionParameterAssemblerBase : Assembler<QuestionParameterDto, QuestionParameter>
	{
		/// <summary>
	    /// Invoked after the QuestionParameterDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="QuestionParameterDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(QuestionParameterDto dto);
	
		/// <summary>
	    /// Invoked after the QuestionParameter instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="QuestionParameter"/> instance.</param>
		partial void OnEntityAssembled(QuestionParameter entity);
		
	    public override QuestionParameter Assemble(QuestionParameter entity, QuestionParameterDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new QuestionParameter();
	        }
			
			entity.PropertyID = dto.PropertyID;
			entity.ID = dto.ID;
			entity.PropertyTypeID = dto.PropertyTypeID;
			entity.QuestionID = dto.QuestionID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override QuestionParameterDto Assemble(QuestionParameter entity)
	    {
	        QuestionParameterDto dto = new QuestionParameterDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.PropertyID = entity.PropertyID;
			dto.ID = entity.ID;
			dto.PropertyTypeID = entity.PropertyTypeID;
			dto.QuestionID = entity.QuestionID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(QuestionParameter entity, QuestionParameterDto dto)
	    {
			PropertyAssembler propertyAssembler = new PropertyAssembler();
			dto.Property = propertyAssembler.Assemble(entity.Property);

	    }
	
	    public override void AssembleCollections(QuestionParameter entity, QuestionParameterDto dto)
	    {
	    }
	
	}
	
	
	public partial class QuestionParameterAssembler : QuestionParameterAssemblerBase, IQuestionParameterAssembler
	{
	    
	}
	
	public partial interface ISourceAssembler : IAssembler<SourceDto, Source>
	{ 
	
	}
	
	public partial class SourceAssemblerBase : Assembler<SourceDto, Source>
	{
		/// <summary>
	    /// Invoked after the SourceDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SourceDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SourceDto dto);
	
		/// <summary>
	    /// Invoked after the Source instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Source"/> instance.</param>
		partial void OnEntityAssembled(Source entity);
		
	    public override Source Assemble(Source entity, SourceDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Source();
	        }
			
			entity.DataTypeSourceID = dto.DataTypeSourceID;
			entity.ID = dto.ID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SourceDto Assemble(Source entity)
	    {
	        SourceDto dto = new SourceDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.DataTypeSourceID = entity.DataTypeSourceID;
			dto.ID = entity.ID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Source entity, SourceDto dto)
	    {
			DataTypeSourceAssembler dataTypeSourceAssembler = new DataTypeSourceAssembler();
			dto.DataTypeSource = dataTypeSourceAssembler.Assemble(entity.DataTypeSource);

	    }
	
	    public override void AssembleCollections(Source entity, SourceDto dto)
	    {
			ItemAssembler itemAssembler = new ItemAssembler();

			dto.Items = new List<ItemDto>();
			foreach (Item item in entity.Items)
			{
				var dtoItem = itemAssembler.Assemble(item);
				dtoItem.Source = dto;
				dto.Items.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class SourceAssembler : SourceAssemblerBase, ISourceAssembler
	{
	    
	}
	
	public partial interface ISensorAssembler : IAssembler<SensorDto, Sensor>
	{ 
	
	}
	
	public partial class SensorAssemblerBase : Assembler<SensorDto, Sensor>
	{
		/// <summary>
	    /// Invoked after the SensorDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SensorDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SensorDto dto);
	
		/// <summary>
	    /// Invoked after the Sensor instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Sensor"/> instance.</param>
		partial void OnEntityAssembled(Sensor entity);
		
	    public override Sensor Assemble(Sensor entity, SensorDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Sensor();
	        }
			
			entity.SensorHostID = dto.SensorHostID;
			entity.IsHealthy = dto.IsHealthy;
			entity.InstalledFromServerDate = dto.InstalledFromServerDate;
			entity.CurrentRendezvous = dto.CurrentRendezvous;
			entity.SensorTypeSourceID = dto.SensorTypeSourceID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SensorDto Assemble(Sensor entity)
	    {
	        SensorDto dto = new SensorDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SensorHostID = entity.SensorHostID;
			dto.IsHealthy = entity.IsHealthy;
			dto.InstalledFromServerDate = entity.InstalledFromServerDate;
			dto.CurrentRendezvous = entity.CurrentRendezvous;
			dto.SensorTypeSourceID = entity.SensorTypeSourceID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Sensor entity, SensorDto dto)
	    {
			SensorHostAssembler sensorHostAssembler = new SensorHostAssembler();
			dto.SensorHost = sensorHostAssembler.Assemble(entity.SensorHost);

			SensorTypeSourceAssembler sensorTypeSourceAssembler = new SensorTypeSourceAssembler();
			dto.SensorTypeSource = sensorTypeSourceAssembler.Assemble(entity.SensorTypeSource);

	    }
	
	    public override void AssembleCollections(Sensor entity, SensorDto dto)
	    {
	    }
	
	}
	
	
	public partial class SensorAssembler : SensorAssemblerBase, ISensorAssembler
	{
	    
	}
	
	public partial interface ISensorCommandAssembler : IAssembler<SensorCommandDto, SensorCommand>
	{ 
	
	}
	
	public partial class SensorCommandAssemblerBase : Assembler<SensorCommandDto, SensorCommand>
	{
		/// <summary>
	    /// Invoked after the SensorCommandDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SensorCommandDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SensorCommandDto dto);
	
		/// <summary>
	    /// Invoked after the SensorCommand instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="SensorCommand"/> instance.</param>
		partial void OnEntityAssembled(SensorCommand entity);
		
	    public override SensorCommand Assemble(SensorCommand entity, SensorCommandDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new SensorCommand();
	        }
			
			entity.SensorTypeSourceID = dto.SensorTypeSourceID;
			entity.ID = dto.ID;
			entity.CommandName = dto.CommandName;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SensorCommandDto Assemble(SensorCommand entity)
	    {
	        SensorCommandDto dto = new SensorCommandDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SensorTypeSourceID = entity.SensorTypeSourceID;
			dto.ID = entity.ID;
			dto.CommandName = entity.CommandName;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(SensorCommand entity, SensorCommandDto dto)
	    {
			SensorTypeSourceAssembler sensorTypeSourceAssembler = new SensorTypeSourceAssembler();
			dto.SensorTypeSource = sensorTypeSourceAssembler.Assemble(entity.SensorTypeSource);

	    }
	
	    public override void AssembleCollections(SensorCommand entity, SensorCommandDto dto)
	    {
			SensorCommandParameterAssembler sensorCommandParameterAssembler = new SensorCommandParameterAssembler();

			dto.SensorCommandParameters = new List<SensorCommandParameterDto>();
			foreach (SensorCommandParameter item in entity.SensorCommandParameters)
			{
				var dtoItem = sensorCommandParameterAssembler.Assemble(item);
				dtoItem.SensorCommand = dto;
				dto.SensorCommandParameters.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class SensorCommandAssembler : SensorCommandAssemblerBase, ISensorCommandAssembler
	{
	    
	}
	
	public partial interface ISensorCommandParameterAssembler : IAssembler<SensorCommandParameterDto, SensorCommandParameter>
	{ 
	
	}
	
	public partial class SensorCommandParameterAssemblerBase : Assembler<SensorCommandParameterDto, SensorCommandParameter>
	{
		/// <summary>
	    /// Invoked after the SensorCommandParameterDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SensorCommandParameterDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SensorCommandParameterDto dto);
	
		/// <summary>
	    /// Invoked after the SensorCommandParameter instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="SensorCommandParameter"/> instance.</param>
		partial void OnEntityAssembled(SensorCommandParameter entity);
		
	    public override SensorCommandParameter Assemble(SensorCommandParameter entity, SensorCommandParameterDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new SensorCommandParameter();
	        }
			
			entity.Value = dto.Value;
			entity.SensorCommandID = dto.SensorCommandID;
			entity.Key = dto.Key;
			entity.ID = dto.ID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SensorCommandParameterDto Assemble(SensorCommandParameter entity)
	    {
	        SensorCommandParameterDto dto = new SensorCommandParameterDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Value = entity.Value;
			dto.SensorCommandID = entity.SensorCommandID;
			dto.Key = entity.Key;
			dto.ID = entity.ID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(SensorCommandParameter entity, SensorCommandParameterDto dto)
	    {
			SensorCommandAssembler sensorCommandAssembler = new SensorCommandAssembler();
			dto.SensorCommand = sensorCommandAssembler.Assemble(entity.SensorCommand);

	    }
	
	    public override void AssembleCollections(SensorCommandParameter entity, SensorCommandParameterDto dto)
	    {
	    }
	
	}
	
	
	public partial class SensorCommandParameterAssembler : SensorCommandParameterAssemblerBase, ISensorCommandParameterAssembler
	{
	    
	}
	
	public partial interface ISensorHostAssembler : IAssembler<SensorHostDto, SensorHost>
	{ 
	
	}
	
	public partial class SensorHostAssemblerBase : Assembler<SensorHostDto, SensorHost>
	{
		/// <summary>
	    /// Invoked after the SensorHostDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SensorHostDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SensorHostDto dto);
	
		/// <summary>
	    /// Invoked after the SensorHost instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="SensorHost"/> instance.</param>
		partial void OnEntityAssembled(SensorHost entity);
		
	    public override SensorHost Assemble(SensorHost entity, SensorHostDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new SensorHost();
	        }
			
			entity.SensorHostTypeID = dto.SensorHostTypeID;
			entity.IsHealthy = dto.IsHealthy;
			entity.ID = dto.ID;
			entity.HostUri = dto.HostUri;
			entity.HostName = dto.HostName;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SensorHostDto Assemble(SensorHost entity)
	    {
	        SensorHostDto dto = new SensorHostDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SensorHostTypeID = entity.SensorHostTypeID;
			dto.IsHealthy = entity.IsHealthy;
			dto.ID = entity.ID;
			dto.HostUri = entity.HostUri;
			dto.HostName = entity.HostName;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(SensorHost entity, SensorHostDto dto)
	    {
			SensorHostTypeAssembler sensorHostTypeAssembler = new SensorHostTypeAssembler();
			dto.SensorHostType = sensorHostTypeAssembler.Assemble(entity.SensorHostType);

	    }
	
	    public override void AssembleCollections(SensorHost entity, SensorHostDto dto)
	    {
			SensorAssembler sensorAssembler = new SensorAssembler();

			dto.Sensors = new List<SensorDto>();
			foreach (Sensor item in entity.Sensors)
			{
				var dtoItem = sensorAssembler.Assemble(item);
				dtoItem.SensorHost = dto;
				dto.Sensors.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class SensorHostAssembler : SensorHostAssemblerBase, ISensorHostAssembler
	{
	    
	}
	
	public partial interface ISensorHostTypeAssembler : IAssembler<SensorHostTypeDto, SensorHostType>
	{ 
	
	}
	
	public partial class SensorHostTypeAssemblerBase : Assembler<SensorHostTypeDto, SensorHostType>
	{
		/// <summary>
	    /// Invoked after the SensorHostTypeDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SensorHostTypeDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SensorHostTypeDto dto);
	
		/// <summary>
	    /// Invoked after the SensorHostType instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="SensorHostType"/> instance.</param>
		partial void OnEntityAssembled(SensorHostType entity);
		
	    public override SensorHostType Assemble(SensorHostType entity, SensorHostTypeDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new SensorHostType();
	        }
			
			entity.SensorHostTypeName = dto.SensorHostTypeName;
			entity.ParentID = dto.ParentID;
			entity.IsCategory = dto.IsCategory;
			entity.ID = dto.ID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SensorHostTypeDto Assemble(SensorHostType entity)
	    {
	        SensorHostTypeDto dto = new SensorHostTypeDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SensorHostTypeName = entity.SensorHostTypeName;
			dto.ParentID = entity.ParentID;
			dto.IsCategory = entity.IsCategory;
			dto.ID = entity.ID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(SensorHostType entity, SensorHostTypeDto dto)
	    {
	    }
	
	    public override void AssembleCollections(SensorHostType entity, SensorHostTypeDto dto)
	    {
			SensorHostAssembler sensorHostAssembler = new SensorHostAssembler();

			dto.SensorHosts = new List<SensorHostDto>();
			foreach (SensorHost item in entity.SensorHosts)
			{
				var dtoItem = sensorHostAssembler.Assemble(item);
				dtoItem.SensorHostType = dto;
				dto.SensorHosts.Add(dtoItem);
			}

			SensorTypeSourceAssembler sensorTypeSourceAssembler = new SensorTypeSourceAssembler();

			dto.SensorDataTypeSources = new List<SensorTypeSourceDto>();
			foreach (SensorTypeSource item in entity.SensorDataTypeSources)
			{
				var dtoItem = sensorTypeSourceAssembler.Assemble(item);
				dtoItem.SensorHostType = dto;
				dto.SensorDataTypeSources.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class SensorHostTypeAssembler : SensorHostTypeAssemblerBase, ISensorHostTypeAssembler
	{
	    
	}
	
	public partial interface ISensorRuntimeAssembler : IAssembler<SensorRuntimeDto, SensorRuntime>
	{ 
	
	}
	
	public partial class SensorRuntimeAssemblerBase : Assembler<SensorRuntimeDto, SensorRuntime>
	{
		/// <summary>
	    /// Invoked after the SensorRuntimeDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SensorRuntimeDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SensorRuntimeDto dto);
	
		/// <summary>
	    /// Invoked after the SensorRuntime instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="SensorRuntime"/> instance.</param>
		partial void OnEntityAssembled(SensorRuntime entity);
		
	    public override SensorRuntime Assemble(SensorRuntime entity, SensorRuntimeDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new SensorRuntime();
	        }
			
			entity.RecCreationDate = dto.RecCreationDate;
			entity.InstallerZip = dto.InstallerZip;
			entity.InstallerXml = dto.InstallerXml;
			entity.InstallerUri = dto.InstallerUri;
			entity.ID = dto.ID;
			entity.CacheUri = dto.CacheUri;
			entity.SensorTypeSourceID = dto.SensorTypeSourceID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SensorRuntimeDto Assemble(SensorRuntime entity)
	    {
	        SensorRuntimeDto dto = new SensorRuntimeDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.RecCreationDate = entity.RecCreationDate;
			dto.InstallerZip = entity.InstallerZip;
			dto.InstallerXml = entity.InstallerXml;
			dto.InstallerUri = entity.InstallerUri;
			dto.ID = entity.ID;
			dto.CacheUri = entity.CacheUri;
			dto.SensorTypeSourceID = entity.SensorTypeSourceID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(SensorRuntime entity, SensorRuntimeDto dto)
	    {
			SensorTypeSourceAssembler sensorTypeSourceAssembler = new SensorTypeSourceAssembler();
			dto.SensorTypeSource = sensorTypeSourceAssembler.Assemble(entity.SensorTypeSource);

	    }
	
	    public override void AssembleCollections(SensorRuntime entity, SensorRuntimeDto dto)
	    {
	    }
	
	}
	
	
	public partial class SensorRuntimeAssembler : SensorRuntimeAssemblerBase, ISensorRuntimeAssembler
	{
	    
	}
	
	public partial interface ISensorTypeSourceAssembler : IAssembler<SensorTypeSourceDto, SensorTypeSource>
	{ 
	
	}
	
	public partial class SensorTypeSourceAssemblerBase : Assembler<SensorTypeSourceDto, SensorTypeSource>
	{
		/// <summary>
	    /// Invoked after the SensorTypeSourceDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SensorTypeSourceDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SensorTypeSourceDto dto);
	
		/// <summary>
	    /// Invoked after the SensorTypeSource instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="SensorTypeSource"/> instance.</param>
		partial void OnEntityAssembled(SensorTypeSource entity);
		
	    public override SensorTypeSource Assemble(SensorTypeSource entity, SensorTypeSourceDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new SensorTypeSource();
	        }
			
			entity.SensorHostTypeID = dto.SensorHostTypeID;
			entity.Version = dto.Version;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SensorTypeSourceDto Assemble(SensorTypeSource entity)
	    {
	        SensorTypeSourceDto dto = new SensorTypeSourceDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SensorHostTypeID = entity.SensorHostTypeID;
			dto.Version = entity.Version;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(SensorTypeSource entity, SensorTypeSourceDto dto)
	    {
			SensorHostTypeAssembler sensorHostTypeAssembler = new SensorHostTypeAssembler();
			dto.SensorHostType = sensorHostTypeAssembler.Assemble(entity.SensorHostType);

	    }
	
	    public override void AssembleCollections(SensorTypeSource entity, SensorTypeSourceDto dto)
	    {
			SensorRuntimeAssembler sensorRuntimeAssembler = new SensorRuntimeAssembler();

			dto.SensorRuntimes = new List<SensorRuntimeDto>();
			foreach (SensorRuntime item in entity.SensorRuntimes)
			{
				var dtoItem = sensorRuntimeAssembler.Assemble(item);
				dtoItem.SensorTypeSource = dto;
				dto.SensorRuntimes.Add(dtoItem);
			}

			SensorCommandAssembler sensorCommandAssembler = new SensorCommandAssembler();

			dto.SensorCommands = new List<SensorCommandDto>();
			foreach (SensorCommand item in entity.SensorCommands)
			{
				var dtoItem = sensorCommandAssembler.Assemble(item);
				dtoItem.SensorTypeSource = dto;
				dto.SensorCommands.Add(dtoItem);
			}

			SensorAssembler sensorAssembler = new SensorAssembler();

			dto.Sensors = new List<SensorDto>();
			foreach (Sensor item in entity.Sensors)
			{
				var dtoItem = sensorAssembler.Assemble(item);
				dtoItem.SensorTypeSource = dto;
				dto.Sensors.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class SensorTypeSourceAssembler : SensorTypeSourceAssemblerBase, ISensorTypeSourceAssembler
	{
	    
	}
	
	public partial interface ISessionAssembler : IAssembler<SessionDto, Session>
	{ 
	
	}
	
	public partial class SessionAssemblerBase : Assembler<SessionDto, Session>
	{
		/// <summary>
	    /// Invoked after the SessionDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SessionDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SessionDto dto);
	
		/// <summary>
	    /// Invoked after the Session instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Session"/> instance.</param>
		partial void OnEntityAssembled(Session entity);
		
	    public override Session Assemble(Session entity, SessionDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Session();
	        }
			
			entity.StartedCollectingDataTime = dto.StartedCollectingDataTime;
			entity.SessionDesignID = dto.SessionDesignID;
			entity.Note = dto.Note;
			entity.ID = dto.ID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SessionDto Assemble(Session entity)
	    {
	        SessionDto dto = new SessionDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.StartedCollectingDataTime = entity.StartedCollectingDataTime;
			dto.SessionDesignID = entity.SessionDesignID;
			dto.Note = entity.Note;
			dto.ID = entity.ID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Session entity, SessionDto dto)
	    {
			SessionDesignAssembler sessionDesignAssembler = new SessionDesignAssembler();
			dto.SessionDesign = sessionDesignAssembler.Assemble(entity.SessionDesign);

	    }
	
	    public override void AssembleCollections(Session entity, SessionDto dto)
	    {
	    }
	
	}
	
	
	public partial class SessionAssembler : SessionAssemblerBase, ISessionAssembler
	{
	    
	}
	
	public partial interface ISessionDesignAssembler : IAssembler<SessionDesignDto, SessionDesign>
	{ 
	
	}
	
	public partial class SessionDesignAssemblerBase : Assembler<SessionDesignDto, SessionDesign>
	{
		/// <summary>
	    /// Invoked after the SessionDesignDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SessionDesignDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SessionDesignDto dto);
	
		/// <summary>
	    /// Invoked after the SessionDesign instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="SessionDesign"/> instance.</param>
		partial void OnEntityAssembled(SessionDesign entity);
		
	    public override SessionDesign Assemble(SessionDesign entity, SessionDesignDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new SessionDesign();
	        }
			
			entity.Name = dto.Name;
			entity.IsReadOnly = dto.IsReadOnly;
			entity.IsComplete = dto.IsComplete;
			entity.ID = dto.ID;
			entity.Description = dto.Description;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SessionDesignDto Assemble(SessionDesign entity)
	    {
	        SessionDesignDto dto = new SessionDesignDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Name = entity.Name;
			dto.IsReadOnly = entity.IsReadOnly;
			dto.IsComplete = entity.IsComplete;
			dto.ID = entity.ID;
			dto.Description = entity.Description;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(SessionDesign entity, SessionDesignDto dto)
	    {
	    }
	
	    public override void AssembleCollections(SessionDesign entity, SessionDesignDto dto)
	    {
			SessionDesignNodeAssembler sessionDesignNodeAssembler = new SessionDesignNodeAssembler();

			dto.SessionDesignNodes = new List<SessionDesignNodeDto>();
			foreach (SessionDesignNode item in entity.SessionDesignNodes)
			{
				var dtoItem = sessionDesignNodeAssembler.Assemble(item);
				dtoItem.SessionDesign = dto;
				dto.SessionDesignNodes.Add(dtoItem);
			}

			SessionAssembler sessionAssembler = new SessionAssembler();

			dto.Sessions = new List<SessionDto>();
			foreach (Session item in entity.Sessions)
			{
				var dtoItem = sessionAssembler.Assemble(item);
				dtoItem.SessionDesign = dto;
				dto.Sessions.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class SessionDesignAssembler : SessionDesignAssemblerBase, ISessionDesignAssembler
	{
	    
	}
	
	public partial interface ISessionDesignNodeAssembler : IAssembler<SessionDesignNodeDto, SessionDesignNode>
	{ 
	
	}
	
	public partial class SessionDesignNodeAssemblerBase : Assembler<SessionDesignNodeDto, SessionDesignNode>
	{
		/// <summary>
	    /// Invoked after the SessionDesignNodeDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SessionDesignNodeDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SessionDesignNodeDto dto);
	
		/// <summary>
	    /// Invoked after the SessionDesignNode instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="SessionDesignNode"/> instance.</param>
		partial void OnEntityAssembled(SessionDesignNode entity);
		
	    public override SessionDesignNode Assemble(SessionDesignNode entity, SessionDesignNodeDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new SessionDesignNode();
	        }
			

			entity.SessionDesignID = dto.SessionDesignID;
			entity.ID = dto.ID;
			this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SessionDesignNodeDto Assemble(SessionDesignNode entity)
	    {
	        SessionDesignNodeDto dto = new SessionDesignNodeDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SourceID = entity.SourceID;
			dto.SessionDesignID = entity.SessionDesignID;
			dto.ID = entity.ID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(SessionDesignNode entity, SessionDesignNodeDto dto)
	    {
			SessionDesignAssembler sessionDesignAssembler = new SessionDesignAssembler();
			dto.SessionDesign = sessionDesignAssembler.Assemble(entity.SessionDesign);

	    }
	
	    public override void AssembleCollections(SessionDesignNode entity, SessionDesignNodeDto dto)
	    {
	    }
	
	}
	
	
	public partial class SessionDesignNodeAssembler : SessionDesignNodeAssemblerBase, ISessionDesignNodeAssembler
	{
	    
	}
	
	public partial interface IVisualizationAssembler : IAssembler<VisualizationDto, Visualization>
	{ 
	
	}
	
	public partial class VisualizationAssemblerBase : Assembler<VisualizationDto, Visualization>
	{
		/// <summary>
	    /// Invoked after the VisualizationDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="VisualizationDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(VisualizationDto dto);
	
		/// <summary>
	    /// Invoked after the Visualization instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Visualization"/> instance.</param>
		partial void OnEntityAssembled(Visualization entity);
		
	    public override Visualization Assemble(Visualization entity, VisualizationDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Visualization();
	        }
			
			entity.VisualizerID = dto.VisualizerID;
			entity.Name = dto.Name;
			entity.ID = dto.ID;
			entity.Description = dto.Description;
			entity.DataTypeID = dto.DataTypeID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override VisualizationDto Assemble(Visualization entity)
	    {
	        VisualizationDto dto = new VisualizationDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.VisualizerID = entity.VisualizerID;
			dto.Name = entity.Name;
			dto.ID = entity.ID;
			dto.Description = entity.Description;
			dto.DataTypeID = entity.DataTypeID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Visualization entity, VisualizationDto dto)
	    {
			VisualizerAssembler visualizerAssembler = new VisualizerAssembler();
			dto.Visualizer = visualizerAssembler.Assemble(entity.Visualizer);

	    }
	
	    public override void AssembleCollections(Visualization entity, VisualizationDto dto)
	    {
	    }
	
	}
	
	
	public partial class VisualizationAssembler : VisualizationAssemblerBase, IVisualizationAssembler
	{
	    
	}
	
	public partial interface IVisualizerAssembler : IAssembler<VisualizerDto, Visualizer>
	{ 
	
	}
	
	public partial class VisualizerAssemblerBase : Assembler<VisualizerDto, Visualizer>
	{
		/// <summary>
	    /// Invoked after the VisualizerDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="VisualizerDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(VisualizerDto dto);
	
		/// <summary>
	    /// Invoked after the Visualizer instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Visualizer"/> instance.</param>
		partial void OnEntityAssembled(Visualizer entity);
		
	    public override Visualizer Assemble(Visualizer entity, VisualizerDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Visualizer();
	        }
			
			entity.Name = dto.Name;
			entity.ID = dto.ID;
			entity.Description = dto.Description;
			entity.PrimitiveDataTypeID = dto.PrimitiveDataTypeID;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override VisualizerDto Assemble(Visualizer entity)
	    {
	        VisualizerDto dto = new VisualizerDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Name = entity.Name;
			dto.ID = entity.ID;
			dto.Description = entity.Description;
			dto.PrimitiveDataTypeID = entity.PrimitiveDataTypeID;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Visualizer entity, VisualizerDto dto)
	    {
			DataTypeAssembler dataTypeAssembler = new DataTypeAssembler();
			dto.DataType = dataTypeAssembler.Assemble(entity.DataType);

	    }
	
	    public override void AssembleCollections(Visualizer entity, VisualizerDto dto)
	    {
			VisualizationAssembler visualizationAssembler = new VisualizationAssembler();

			dto.Visualizations = new List<VisualizationDto>();
			foreach (Visualization item in entity.Visualizations)
			{
				var dtoItem = visualizationAssembler.Assemble(item);
				dtoItem.Visualizer = dto;
				dto.Visualizations.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class VisualizerAssembler : VisualizerAssemblerBase, IVisualizerAssembler
	{
	    
	}
}
#pragma warning restore 1591
