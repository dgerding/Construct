#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Construct.Server.Services.Entities
{
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;
	using System.ServiceModel;
	using Construct.Server.Services.Entities.Dto;
	using Construct.Server.Services.Entities.Assemblers;
	using Construct.Server.Services.Entities.Repositories;
	using Construct.Server.Services.Entities.Services;
	using Construct.Server.Entities;

	/// <summary>
	/// EntitiesModelService service class handler.
	/// </summary>
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
	public partial class EntitiesModelService : IEntitiesModelService
	{
	    /// <summary>
	    /// Maintains a list of objects affected by a business transaction and coordinates 
	    /// the writing out of changes and the resolution of concurrency problems.
	    /// </summary>
	    private IEntitiesModelUnitOfWork unitOfWork;
	    
	    /// <summary>
	    /// Get or sets the specific UnitOfWork. It maintains a list of objects affected 
	    /// by a business transaction and coordinates the writing out of changes and the resolution of concurrency problems.
	    /// </summary>
	    public IEntitiesModelUnitOfWork UnitOfWork
	    {
	        get
	        {
	            if(this.unitOfWork == null)
	            {
	                this.unitOfWork = new EntitiesModel();
	            }
	            return this.unitOfWork;
	        }
	        set
	        {
	            this.unitOfWork = value;
	        }
	    }	
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against DataType entity.
	    /// </summary>
	    private IDataTypeService datatypeservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against DataType entity.
	    /// </summary>
	    public virtual IDataTypeService DataTypeService
	    {
	        get
	        {
	            if (this.datatypeservice == null)
	            {
	                IDataTypeAssembler assembler = new DataTypeAssembler();
	                IDataTypeRepository repository = new DataTypeRepository(this.UnitOfWork);
	
	                this.datatypeservice = new DataTypeService(assembler, repository);
	            }
	            return this.datatypeservice;
	        }
	    }
	        
	    #region DataTypes CRUD Operations
	
	    /// <summary>
	    /// Returns all datatypes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<DataTypeDto> ReadDataTypes()	
	    {
	        return this.DataTypeService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of datatypes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<DataTypeDto> ReadDataTypesPaged(int startIndex, int pageSize)
	    {
	        return this.DataTypeService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all datatypes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<DataTypeDto> ReadDataTypesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.DataTypeService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of datatypes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<DataTypeDto> ReadDataTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.DataTypeService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a datatype with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public DataTypeDto ReadDataType(string dtoKey)
	    {
	        return this.DataTypeService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all datatypes count.
	    /// </summary>
	    /// <returns></returns>
	    public int DataTypesCount()
	    {
	        return this.DataTypeService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all datatypes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int DataTypesCountFiltered(string filterExpression)
	    {
	        return this.DataTypeService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new datatype from the given dto object into the database.
	    /// </summary>
	    /// <param name="datatype">The dto object.</param>
	    /// <returns>The dto key of the newly created datatype.</returns>
	    public string CreateDataType(DataTypeDto datatype)
	    {
	        string key = this.DataTypeService.Add(datatype);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing datatype in the database from the given dto object.
	    /// </summary>
	    /// <param name="datatype">The dto object.</param>
	    public void UpdateDataType(DataTypeDto datatype)
	    {
	        this.DataTypeService.Update(datatype);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update datatypes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="datatypes">The dto object list.</param>
	    public void UpdateDataTypes(IEnumerable<DataTypeDto> datatypes)
	    {
	        if (datatypes == null)
	        {
	            return;
	        }
	
	        foreach (DataTypeDto datatype in datatypes)
	        {
	            if (datatype == null)
	            {
	                continue;
	            }
	            
	            this.UpdateDataType(datatype);
	        }
	    }
	
	    /// <summary>
	    /// Deletes datatype from the database by the given dto object.
	    /// </summary>
	    /// <param name="datatype">The dto object.</param>
	    public void DeleteDataType(DataTypeDto datatype)
	    {
	        this.DataTypeService.Delete(datatype);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete datatypes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="datatypes">The dto object list.</param>
	    public void DeleteDataTypes(IEnumerable<DataTypeDto> datatypes)
	    {
	        if (datatypes == null)
	        {
	            return;
	        }
	
	        foreach (DataTypeDto datatype in datatypes)
	        {
	            if (datatype == null)
	            {
	                continue;
	            }
	            
	            this.DeleteDataType(datatype);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against DataTypeSource entity.
	    /// </summary>
	    private IDataTypeSourceService datatypesourceservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against DataTypeSource entity.
	    /// </summary>
	    public virtual IDataTypeSourceService DataTypeSourceService
	    {
	        get
	        {
	            if (this.datatypesourceservice == null)
	            {
	                IDataTypeSourceAssembler assembler = new DataTypeSourceAssembler();
	                IDataTypeSourceRepository repository = new DataTypeSourceRepository(this.UnitOfWork);
	
	                this.datatypesourceservice = new DataTypeSourceService(assembler, repository);
	            }
	            return this.datatypesourceservice;
	        }
	    }
	        
	    #region DataTypeSources CRUD Operations
	
	    /// <summary>
	    /// Returns all datatypesources.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<DataTypeSourceDto> ReadDataTypeSources()	
	    {
	        return this.DataTypeSourceService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of datatypesources from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<DataTypeSourceDto> ReadDataTypeSourcesPaged(int startIndex, int pageSize)
	    {
	        return this.DataTypeSourceService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all datatypesources filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<DataTypeSourceDto> ReadDataTypeSourcesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.DataTypeSourceService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of datatypesources from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<DataTypeSourceDto> ReadDataTypeSourcesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.DataTypeSourceService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a datatypesource with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public DataTypeSourceDto ReadDataTypeSource(string dtoKey)
	    {
	        return this.DataTypeSourceService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all datatypesources count.
	    /// </summary>
	    /// <returns></returns>
	    public int DataTypeSourcesCount()
	    {
	        return this.DataTypeSourceService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all datatypesources count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int DataTypeSourcesCountFiltered(string filterExpression)
	    {
	        return this.DataTypeSourceService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new datatypesource from the given dto object into the database.
	    /// </summary>
	    /// <param name="datatypesource">The dto object.</param>
	    /// <returns>The dto key of the newly created datatypesource.</returns>
	    public string CreateDataTypeSource(DataTypeSourceDto datatypesource)
	    {
	        string key = this.DataTypeSourceService.Add(datatypesource);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing datatypesource in the database from the given dto object.
	    /// </summary>
	    /// <param name="datatypesource">The dto object.</param>
	    public void UpdateDataTypeSource(DataTypeSourceDto datatypesource)
	    {
	        this.DataTypeSourceService.Update(datatypesource);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update datatypesources in the database from the given dto object list.
	    /// </summary>
	    /// <param name="datatypesources">The dto object list.</param>
	    public void UpdateDataTypeSources(IEnumerable<DataTypeSourceDto> datatypesources)
	    {
	        if (datatypesources == null)
	        {
	            return;
	        }
	
	        foreach (DataTypeSourceDto datatypesource in datatypesources)
	        {
	            if (datatypesource == null)
	            {
	                continue;
	            }
	            
	            this.UpdateDataTypeSource(datatypesource);
	        }
	    }
	
	    /// <summary>
	    /// Deletes datatypesource from the database by the given dto object.
	    /// </summary>
	    /// <param name="datatypesource">The dto object.</param>
	    public void DeleteDataTypeSource(DataTypeSourceDto datatypesource)
	    {
	        this.DataTypeSourceService.Delete(datatypesource);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete datatypesources from the database by the given dto object list.
	    /// </summary>
	    /// <param name="datatypesources">The dto object list.</param>
	    public void DeleteDataTypeSources(IEnumerable<DataTypeSourceDto> datatypesources)
	    {
	        if (datatypesources == null)
	        {
	            return;
	        }
	
	        foreach (DataTypeSourceDto datatypesource in datatypesources)
	        {
	            if (datatypesource == null)
	            {
	                continue;
	            }
	            
	            this.DeleteDataTypeSource(datatypesource);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Item entity.
	    /// </summary>
	    private IItemService itemservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Item entity.
	    /// </summary>
	    public virtual IItemService ItemService
	    {
	        get
	        {
	            if (this.itemservice == null)
	            {
	                IItemAssembler assembler = new ItemAssembler();
	                IItemRepository repository = new ItemRepository(this.UnitOfWork);
	
	                this.itemservice = new ItemService(assembler, repository);
	            }
	            return this.itemservice;
	        }
	    }
	        
	    #region Items CRUD Operations
	
	    /// <summary>
	    /// Returns all items.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ItemDto> ReadItems()	
	    {
	        return this.ItemService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of items from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ItemDto> ReadItemsPaged(int startIndex, int pageSize)
	    {
	        return this.ItemService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all items filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ItemDto> ReadItemsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ItemService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of items from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ItemDto> ReadItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ItemService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a item with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ItemDto ReadItem(string dtoKey)
	    {
	        return this.ItemService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all items count.
	    /// </summary>
	    /// <returns></returns>
	    public int ItemsCount()
	    {
	        return this.ItemService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all items count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ItemsCountFiltered(string filterExpression)
	    {
	        return this.ItemService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new item from the given dto object into the database.
	    /// </summary>
	    /// <param name="item">The dto object.</param>
	    /// <returns>The dto key of the newly created item.</returns>
	    public string CreateItem(ItemDto item)
	    {
	        string key = this.ItemService.Add(item);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing item in the database from the given dto object.
	    /// </summary>
	    /// <param name="item">The dto object.</param>
	    public void UpdateItem(ItemDto item)
	    {
	        this.ItemService.Update(item);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update items in the database from the given dto object list.
	    /// </summary>
	    /// <param name="items">The dto object list.</param>
	    public void UpdateItems(IEnumerable<ItemDto> items)
	    {
	        if (items == null)
	        {
	            return;
	        }
	
	        foreach (ItemDto item in items)
	        {
	            if (item == null)
	            {
	                continue;
	            }
	            
	            this.UpdateItem(item);
	        }
	    }
	
	    /// <summary>
	    /// Deletes item from the database by the given dto object.
	    /// </summary>
	    /// <param name="item">The dto object.</param>
	    public void DeleteItem(ItemDto item)
	    {
	        this.ItemService.Delete(item);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete items from the database by the given dto object list.
	    /// </summary>
	    /// <param name="items">The dto object list.</param>
	    public void DeleteItems(IEnumerable<ItemDto> items)
	    {
	        if (items == null)
	        {
	            return;
	        }
	
	        foreach (ItemDto item in items)
	        {
	            if (item == null)
	            {
	                continue;
	            }
	            
	            this.DeleteItem(item);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Property entity.
	    /// </summary>
	    private IPropertyService propertyservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Property entity.
	    /// </summary>
	    public virtual IPropertyService PropertyService
	    {
	        get
	        {
	            if (this.propertyservice == null)
	            {
	                IPropertyAssembler assembler = new PropertyAssembler();
	                IPropertyRepository repository = new PropertyRepository(this.UnitOfWork);
	
	                this.propertyservice = new PropertyService(assembler, repository);
	            }
	            return this.propertyservice;
	        }
	    }
	        
	    #region Properties CRUD Operations
	
	    /// <summary>
	    /// Returns all properties.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PropertyDto> ReadProperties()	
	    {
	        return this.PropertyService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of properties from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PropertyDto> ReadPropertiesPaged(int startIndex, int pageSize)
	    {
	        return this.PropertyService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all properties filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PropertyDto> ReadPropertiesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PropertyService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of properties from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PropertyDto> ReadPropertiesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PropertyService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a property with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PropertyDto ReadProperty(string dtoKey)
	    {
	        return this.PropertyService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all properties count.
	    /// </summary>
	    /// <returns></returns>
	    public int PropertiesCount()
	    {
	        return this.PropertyService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all properties count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PropertiesCountFiltered(string filterExpression)
	    {
	        return this.PropertyService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new property from the given dto object into the database.
	    /// </summary>
	    /// <param name="property">The dto object.</param>
	    /// <returns>The dto key of the newly created property.</returns>
	    public string CreateProperty(PropertyDto property)
	    {
	        string key = this.PropertyService.Add(property);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing property in the database from the given dto object.
	    /// </summary>
	    /// <param name="property">The dto object.</param>
	    public void UpdateProperty(PropertyDto property)
	    {
	        this.PropertyService.Update(property);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update properties in the database from the given dto object list.
	    /// </summary>
	    /// <param name="properties">The dto object list.</param>
	    public void UpdateProperties(IEnumerable<PropertyDto> properties)
	    {
	        if (properties == null)
	        {
	            return;
	        }
	
	        foreach (PropertyDto property in properties)
	        {
	            if (property == null)
	            {
	                continue;
	            }
	            
	            this.UpdateProperty(property);
	        }
	    }
	
	    /// <summary>
	    /// Deletes property from the database by the given dto object.
	    /// </summary>
	    /// <param name="property">The dto object.</param>
	    public void DeleteProperty(PropertyDto property)
	    {
	        this.PropertyService.Delete(property);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete properties from the database by the given dto object list.
	    /// </summary>
	    /// <param name="properties">The dto object list.</param>
	    public void DeleteProperties(IEnumerable<PropertyDto> properties)
	    {
	        if (properties == null)
	        {
	            return;
	        }
	
	        foreach (PropertyDto property in properties)
	        {
	            if (property == null)
	            {
	                continue;
	            }
	            
	            this.DeleteProperty(property);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against QuestionParameter entity.
	    /// </summary>
	    private IQuestionParameterService questionparameterservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against QuestionParameter entity.
	    /// </summary>
	    public virtual IQuestionParameterService QuestionParameterService
	    {
	        get
	        {
	            if (this.questionparameterservice == null)
	            {
	                IQuestionParameterAssembler assembler = new QuestionParameterAssembler();
	                IQuestionParameterRepository repository = new QuestionParameterRepository(this.UnitOfWork);
	
	                this.questionparameterservice = new QuestionParameterService(assembler, repository);
	            }
	            return this.questionparameterservice;
	        }
	    }
	        
	    #region QuestionParameters CRUD Operations
	
	    /// <summary>
	    /// Returns all questionparameters.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<QuestionParameterDto> ReadQuestionParameters()	
	    {
	        return this.QuestionParameterService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of questionparameters from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<QuestionParameterDto> ReadQuestionParametersPaged(int startIndex, int pageSize)
	    {
	        return this.QuestionParameterService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all questionparameters filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<QuestionParameterDto> ReadQuestionParametersFiltered(string sortExpression, string filterExpression)
	    {
	        return this.QuestionParameterService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of questionparameters from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<QuestionParameterDto> ReadQuestionParametersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.QuestionParameterService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a questionparameter with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public QuestionParameterDto ReadQuestionParameter(string dtoKey)
	    {
	        return this.QuestionParameterService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all questionparameters count.
	    /// </summary>
	    /// <returns></returns>
	    public int QuestionParametersCount()
	    {
	        return this.QuestionParameterService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all questionparameters count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int QuestionParametersCountFiltered(string filterExpression)
	    {
	        return this.QuestionParameterService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new questionparameter from the given dto object into the database.
	    /// </summary>
	    /// <param name="questionparameter">The dto object.</param>
	    /// <returns>The dto key of the newly created questionparameter.</returns>
	    public string CreateQuestionParameter(QuestionParameterDto questionparameter)
	    {
	        string key = this.QuestionParameterService.Add(questionparameter);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing questionparameter in the database from the given dto object.
	    /// </summary>
	    /// <param name="questionparameter">The dto object.</param>
	    public void UpdateQuestionParameter(QuestionParameterDto questionparameter)
	    {
	        this.QuestionParameterService.Update(questionparameter);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update questionparameters in the database from the given dto object list.
	    /// </summary>
	    /// <param name="questionparameters">The dto object list.</param>
	    public void UpdateQuestionParameters(IEnumerable<QuestionParameterDto> questionparameters)
	    {
	        if (questionparameters == null)
	        {
	            return;
	        }
	
	        foreach (QuestionParameterDto questionparameter in questionparameters)
	        {
	            if (questionparameter == null)
	            {
	                continue;
	            }
	            
	            this.UpdateQuestionParameter(questionparameter);
	        }
	    }
	
	    /// <summary>
	    /// Deletes questionparameter from the database by the given dto object.
	    /// </summary>
	    /// <param name="questionparameter">The dto object.</param>
	    public void DeleteQuestionParameter(QuestionParameterDto questionparameter)
	    {
	        this.QuestionParameterService.Delete(questionparameter);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete questionparameters from the database by the given dto object list.
	    /// </summary>
	    /// <param name="questionparameters">The dto object list.</param>
	    public void DeleteQuestionParameters(IEnumerable<QuestionParameterDto> questionparameters)
	    {
	        if (questionparameters == null)
	        {
	            return;
	        }
	
	        foreach (QuestionParameterDto questionparameter in questionparameters)
	        {
	            if (questionparameter == null)
	            {
	                continue;
	            }
	            
	            this.DeleteQuestionParameter(questionparameter);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against SensorCommand entity.
	    /// </summary>
	    private ISensorCommandService sensorcommandservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against SensorCommand entity.
	    /// </summary>
	    public virtual ISensorCommandService SensorCommandService
	    {
	        get
	        {
	            if (this.sensorcommandservice == null)
	            {
	                ISensorCommandAssembler assembler = new SensorCommandAssembler();
	                ISensorCommandRepository repository = new SensorCommandRepository(this.UnitOfWork);
	
	                this.sensorcommandservice = new SensorCommandService(assembler, repository);
	            }
	            return this.sensorcommandservice;
	        }
	    }
	        
	    #region SensorCommands CRUD Operations
	
	    /// <summary>
	    /// Returns all sensorcommands.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SensorCommandDto> ReadSensorCommands()	
	    {
	        return this.SensorCommandService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sensorcommands from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorCommandDto> ReadSensorCommandsPaged(int startIndex, int pageSize)
	    {
	        return this.SensorCommandService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all sensorcommands filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorCommandDto> ReadSensorCommandsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SensorCommandService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sensorcommands from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorCommandDto> ReadSensorCommandsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SensorCommandService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a sensorcommand with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SensorCommandDto ReadSensorCommand(string dtoKey)
	    {
	        return this.SensorCommandService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all sensorcommands count.
	    /// </summary>
	    /// <returns></returns>
	    public int SensorCommandsCount()
	    {
	        return this.SensorCommandService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all sensorcommands count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SensorCommandsCountFiltered(string filterExpression)
	    {
	        return this.SensorCommandService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new sensorcommand from the given dto object into the database.
	    /// </summary>
	    /// <param name="sensorcommand">The dto object.</param>
	    /// <returns>The dto key of the newly created sensorcommand.</returns>
	    public string CreateSensorCommand(SensorCommandDto sensorcommand)
	    {
	        string key = this.SensorCommandService.Add(sensorcommand);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing sensorcommand in the database from the given dto object.
	    /// </summary>
	    /// <param name="sensorcommand">The dto object.</param>
	    public void UpdateSensorCommand(SensorCommandDto sensorcommand)
	    {
	        this.SensorCommandService.Update(sensorcommand);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update sensorcommands in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sensorcommands">The dto object list.</param>
	    public void UpdateSensorCommands(IEnumerable<SensorCommandDto> sensorcommands)
	    {
	        if (sensorcommands == null)
	        {
	            return;
	        }
	
	        foreach (SensorCommandDto sensorcommand in sensorcommands)
	        {
	            if (sensorcommand == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSensorCommand(sensorcommand);
	        }
	    }
	
	    /// <summary>
	    /// Deletes sensorcommand from the database by the given dto object.
	    /// </summary>
	    /// <param name="sensorcommand">The dto object.</param>
	    public void DeleteSensorCommand(SensorCommandDto sensorcommand)
	    {
	        this.SensorCommandService.Delete(sensorcommand);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete sensorcommands from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sensorcommands">The dto object list.</param>
	    public void DeleteSensorCommands(IEnumerable<SensorCommandDto> sensorcommands)
	    {
	        if (sensorcommands == null)
	        {
	            return;
	        }
	
	        foreach (SensorCommandDto sensorcommand in sensorcommands)
	        {
	            if (sensorcommand == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSensorCommand(sensorcommand);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against SensorCommandParameter entity.
	    /// </summary>
	    private ISensorCommandParameterService sensorcommandparameterservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against SensorCommandParameter entity.
	    /// </summary>
	    public virtual ISensorCommandParameterService SensorCommandParameterService
	    {
	        get
	        {
	            if (this.sensorcommandparameterservice == null)
	            {
	                ISensorCommandParameterAssembler assembler = new SensorCommandParameterAssembler();
	                ISensorCommandParameterRepository repository = new SensorCommandParameterRepository(this.UnitOfWork);
	
	                this.sensorcommandparameterservice = new SensorCommandParameterService(assembler, repository);
	            }
	            return this.sensorcommandparameterservice;
	        }
	    }
	        
	    #region SensorCommandParameters CRUD Operations
	
	    /// <summary>
	    /// Returns all sensorcommandparameters.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SensorCommandParameterDto> ReadSensorCommandParameters()	
	    {
	        return this.SensorCommandParameterService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sensorcommandparameters from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorCommandParameterDto> ReadSensorCommandParametersPaged(int startIndex, int pageSize)
	    {
	        return this.SensorCommandParameterService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all sensorcommandparameters filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorCommandParameterDto> ReadSensorCommandParametersFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SensorCommandParameterService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sensorcommandparameters from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorCommandParameterDto> ReadSensorCommandParametersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SensorCommandParameterService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a sensorcommandparameter with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SensorCommandParameterDto ReadSensorCommandParameter(string dtoKey)
	    {
	        return this.SensorCommandParameterService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all sensorcommandparameters count.
	    /// </summary>
	    /// <returns></returns>
	    public int SensorCommandParametersCount()
	    {
	        return this.SensorCommandParameterService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all sensorcommandparameters count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SensorCommandParametersCountFiltered(string filterExpression)
	    {
	        return this.SensorCommandParameterService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new sensorcommandparameter from the given dto object into the database.
	    /// </summary>
	    /// <param name="sensorcommandparameter">The dto object.</param>
	    /// <returns>The dto key of the newly created sensorcommandparameter.</returns>
	    public string CreateSensorCommandParameter(SensorCommandParameterDto sensorcommandparameter)
	    {
	        string key = this.SensorCommandParameterService.Add(sensorcommandparameter);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing sensorcommandparameter in the database from the given dto object.
	    /// </summary>
	    /// <param name="sensorcommandparameter">The dto object.</param>
	    public void UpdateSensorCommandParameter(SensorCommandParameterDto sensorcommandparameter)
	    {
	        this.SensorCommandParameterService.Update(sensorcommandparameter);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update sensorcommandparameters in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sensorcommandparameters">The dto object list.</param>
	    public void UpdateSensorCommandParameters(IEnumerable<SensorCommandParameterDto> sensorcommandparameters)
	    {
	        if (sensorcommandparameters == null)
	        {
	            return;
	        }
	
	        foreach (SensorCommandParameterDto sensorcommandparameter in sensorcommandparameters)
	        {
	            if (sensorcommandparameter == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSensorCommandParameter(sensorcommandparameter);
	        }
	    }
	
	    /// <summary>
	    /// Deletes sensorcommandparameter from the database by the given dto object.
	    /// </summary>
	    /// <param name="sensorcommandparameter">The dto object.</param>
	    public void DeleteSensorCommandParameter(SensorCommandParameterDto sensorcommandparameter)
	    {
	        this.SensorCommandParameterService.Delete(sensorcommandparameter);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete sensorcommandparameters from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sensorcommandparameters">The dto object list.</param>
	    public void DeleteSensorCommandParameters(IEnumerable<SensorCommandParameterDto> sensorcommandparameters)
	    {
	        if (sensorcommandparameters == null)
	        {
	            return;
	        }
	
	        foreach (SensorCommandParameterDto sensorcommandparameter in sensorcommandparameters)
	        {
	            if (sensorcommandparameter == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSensorCommandParameter(sensorcommandparameter);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against SensorHost entity.
	    /// </summary>
	    private ISensorHostService sensorhostservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against SensorHost entity.
	    /// </summary>
	    public virtual ISensorHostService SensorHostService
	    {
	        get
	        {
	            if (this.sensorhostservice == null)
	            {
	                ISensorHostAssembler assembler = new SensorHostAssembler();
	                ISensorHostRepository repository = new SensorHostRepository(this.UnitOfWork);
	
	                this.sensorhostservice = new SensorHostService(assembler, repository);
	            }
	            return this.sensorhostservice;
	        }
	    }
	        
	    #region SensorHosts CRUD Operations
	
	    /// <summary>
	    /// Returns all sensorhosts.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SensorHostDto> ReadSensorHosts()	
	    {
	        return this.SensorHostService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sensorhosts from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorHostDto> ReadSensorHostsPaged(int startIndex, int pageSize)
	    {
	        return this.SensorHostService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all sensorhosts filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorHostDto> ReadSensorHostsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SensorHostService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sensorhosts from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorHostDto> ReadSensorHostsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SensorHostService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a sensorhost with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SensorHostDto ReadSensorHost(string dtoKey)
	    {
	        return this.SensorHostService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all sensorhosts count.
	    /// </summary>
	    /// <returns></returns>
	    public int SensorHostsCount()
	    {
	        return this.SensorHostService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all sensorhosts count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SensorHostsCountFiltered(string filterExpression)
	    {
	        return this.SensorHostService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new sensorhost from the given dto object into the database.
	    /// </summary>
	    /// <param name="sensorhost">The dto object.</param>
	    /// <returns>The dto key of the newly created sensorhost.</returns>
	    public string CreateSensorHost(SensorHostDto sensorhost)
	    {
	        string key = this.SensorHostService.Add(sensorhost);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing sensorhost in the database from the given dto object.
	    /// </summary>
	    /// <param name="sensorhost">The dto object.</param>
	    public void UpdateSensorHost(SensorHostDto sensorhost)
	    {
	        this.SensorHostService.Update(sensorhost);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update sensorhosts in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sensorhosts">The dto object list.</param>
	    public void UpdateSensorHosts(IEnumerable<SensorHostDto> sensorhosts)
	    {
	        if (sensorhosts == null)
	        {
	            return;
	        }
	
	        foreach (SensorHostDto sensorhost in sensorhosts)
	        {
	            if (sensorhost == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSensorHost(sensorhost);
	        }
	    }
	
	    /// <summary>
	    /// Deletes sensorhost from the database by the given dto object.
	    /// </summary>
	    /// <param name="sensorhost">The dto object.</param>
	    public void DeleteSensorHost(SensorHostDto sensorhost)
	    {
	        this.SensorHostService.Delete(sensorhost);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete sensorhosts from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sensorhosts">The dto object list.</param>
	    public void DeleteSensorHosts(IEnumerable<SensorHostDto> sensorhosts)
	    {
	        if (sensorhosts == null)
	        {
	            return;
	        }
	
	        foreach (SensorHostDto sensorhost in sensorhosts)
	        {
	            if (sensorhost == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSensorHost(sensorhost);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against SensorHostType entity.
	    /// </summary>
	    private ISensorHostTypeService sensorhosttypeservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against SensorHostType entity.
	    /// </summary>
	    public virtual ISensorHostTypeService SensorHostTypeService
	    {
	        get
	        {
	            if (this.sensorhosttypeservice == null)
	            {
	                ISensorHostTypeAssembler assembler = new SensorHostTypeAssembler();
	                ISensorHostTypeRepository repository = new SensorHostTypeRepository(this.UnitOfWork);
	
	                this.sensorhosttypeservice = new SensorHostTypeService(assembler, repository);
	            }
	            return this.sensorhosttypeservice;
	        }
	    }
	        
	    #region SensorHostTypes CRUD Operations
	
	    /// <summary>
	    /// Returns all sensorhosttypes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SensorHostTypeDto> ReadSensorHostTypes()	
	    {
	        return this.SensorHostTypeService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sensorhosttypes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorHostTypeDto> ReadSensorHostTypesPaged(int startIndex, int pageSize)
	    {
	        return this.SensorHostTypeService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all sensorhosttypes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorHostTypeDto> ReadSensorHostTypesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SensorHostTypeService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sensorhosttypes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorHostTypeDto> ReadSensorHostTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SensorHostTypeService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a sensorhosttype with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SensorHostTypeDto ReadSensorHostType(string dtoKey)
	    {
	        return this.SensorHostTypeService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all sensorhosttypes count.
	    /// </summary>
	    /// <returns></returns>
	    public int SensorHostTypesCount()
	    {
	        return this.SensorHostTypeService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all sensorhosttypes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SensorHostTypesCountFiltered(string filterExpression)
	    {
	        return this.SensorHostTypeService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new sensorhosttype from the given dto object into the database.
	    /// </summary>
	    /// <param name="sensorhosttype">The dto object.</param>
	    /// <returns>The dto key of the newly created sensorhosttype.</returns>
	    public string CreateSensorHostType(SensorHostTypeDto sensorhosttype)
	    {
	        string key = this.SensorHostTypeService.Add(sensorhosttype);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing sensorhosttype in the database from the given dto object.
	    /// </summary>
	    /// <param name="sensorhosttype">The dto object.</param>
	    public void UpdateSensorHostType(SensorHostTypeDto sensorhosttype)
	    {
	        this.SensorHostTypeService.Update(sensorhosttype);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update sensorhosttypes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sensorhosttypes">The dto object list.</param>
	    public void UpdateSensorHostTypes(IEnumerable<SensorHostTypeDto> sensorhosttypes)
	    {
	        if (sensorhosttypes == null)
	        {
	            return;
	        }
	
	        foreach (SensorHostTypeDto sensorhosttype in sensorhosttypes)
	        {
	            if (sensorhosttype == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSensorHostType(sensorhosttype);
	        }
	    }
	
	    /// <summary>
	    /// Deletes sensorhosttype from the database by the given dto object.
	    /// </summary>
	    /// <param name="sensorhosttype">The dto object.</param>
	    public void DeleteSensorHostType(SensorHostTypeDto sensorhosttype)
	    {
	        this.SensorHostTypeService.Delete(sensorhosttype);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete sensorhosttypes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sensorhosttypes">The dto object list.</param>
	    public void DeleteSensorHostTypes(IEnumerable<SensorHostTypeDto> sensorhosttypes)
	    {
	        if (sensorhosttypes == null)
	        {
	            return;
	        }
	
	        foreach (SensorHostTypeDto sensorhosttype in sensorhosttypes)
	        {
	            if (sensorhosttype == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSensorHostType(sensorhosttype);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against SensorRuntime entity.
	    /// </summary>
	    private ISensorRuntimeService sensorruntimeservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against SensorRuntime entity.
	    /// </summary>
	    public virtual ISensorRuntimeService SensorRuntimeService
	    {
	        get
	        {
	            if (this.sensorruntimeservice == null)
	            {
	                ISensorRuntimeAssembler assembler = new SensorRuntimeAssembler();
	                ISensorRuntimeRepository repository = new SensorRuntimeRepository(this.UnitOfWork);
	
	                this.sensorruntimeservice = new SensorRuntimeService(assembler, repository);
	            }
	            return this.sensorruntimeservice;
	        }
	    }
	        
	    #region SensorRuntimes CRUD Operations
	
	    /// <summary>
	    /// Returns all sensorruntimes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SensorRuntimeDto> ReadSensorRuntimes()	
	    {
	        return this.SensorRuntimeService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sensorruntimes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorRuntimeDto> ReadSensorRuntimesPaged(int startIndex, int pageSize)
	    {
	        return this.SensorRuntimeService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all sensorruntimes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorRuntimeDto> ReadSensorRuntimesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SensorRuntimeService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sensorruntimes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SensorRuntimeDto> ReadSensorRuntimesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SensorRuntimeService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a sensorruntime with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SensorRuntimeDto ReadSensorRuntime(string dtoKey)
	    {
	        return this.SensorRuntimeService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all sensorruntimes count.
	    /// </summary>
	    /// <returns></returns>
	    public int SensorRuntimesCount()
	    {
	        return this.SensorRuntimeService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all sensorruntimes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SensorRuntimesCountFiltered(string filterExpression)
	    {
	        return this.SensorRuntimeService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new sensorruntime from the given dto object into the database.
	    /// </summary>
	    /// <param name="sensorruntime">The dto object.</param>
	    /// <returns>The dto key of the newly created sensorruntime.</returns>
	    public string CreateSensorRuntime(SensorRuntimeDto sensorruntime)
	    {
	        string key = this.SensorRuntimeService.Add(sensorruntime);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing sensorruntime in the database from the given dto object.
	    /// </summary>
	    /// <param name="sensorruntime">The dto object.</param>
	    public void UpdateSensorRuntime(SensorRuntimeDto sensorruntime)
	    {
	        this.SensorRuntimeService.Update(sensorruntime);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update sensorruntimes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sensorruntimes">The dto object list.</param>
	    public void UpdateSensorRuntimes(IEnumerable<SensorRuntimeDto> sensorruntimes)
	    {
	        if (sensorruntimes == null)
	        {
	            return;
	        }
	
	        foreach (SensorRuntimeDto sensorruntime in sensorruntimes)
	        {
	            if (sensorruntime == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSensorRuntime(sensorruntime);
	        }
	    }
	
	    /// <summary>
	    /// Deletes sensorruntime from the database by the given dto object.
	    /// </summary>
	    /// <param name="sensorruntime">The dto object.</param>
	    public void DeleteSensorRuntime(SensorRuntimeDto sensorruntime)
	    {
	        this.SensorRuntimeService.Delete(sensorruntime);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete sensorruntimes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sensorruntimes">The dto object list.</param>
	    public void DeleteSensorRuntimes(IEnumerable<SensorRuntimeDto> sensorruntimes)
	    {
	        if (sensorruntimes == null)
	        {
	            return;
	        }
	
	        foreach (SensorRuntimeDto sensorruntime in sensorruntimes)
	        {
	            if (sensorruntime == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSensorRuntime(sensorruntime);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Session entity.
	    /// </summary>
	    private ISessionService sessionservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Session entity.
	    /// </summary>
	    public virtual ISessionService SessionService
	    {
	        get
	        {
	            if (this.sessionservice == null)
	            {
	                ISessionAssembler assembler = new SessionAssembler();
	                ISessionRepository repository = new SessionRepository(this.UnitOfWork);
	
	                this.sessionservice = new SessionService(assembler, repository);
	            }
	            return this.sessionservice;
	        }
	    }
	        
	    #region Sessions CRUD Operations
	
	    /// <summary>
	    /// Returns all sessions.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SessionDto> ReadSessions()	
	    {
	        return this.SessionService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sessions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SessionDto> ReadSessionsPaged(int startIndex, int pageSize)
	    {
	        return this.SessionService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all sessions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SessionDto> ReadSessionsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SessionService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sessions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SessionDto> ReadSessionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SessionService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a session with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SessionDto ReadSession(string dtoKey)
	    {
	        return this.SessionService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all sessions count.
	    /// </summary>
	    /// <returns></returns>
	    public int SessionsCount()
	    {
	        return this.SessionService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all sessions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SessionsCountFiltered(string filterExpression)
	    {
	        return this.SessionService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new session from the given dto object into the database.
	    /// </summary>
	    /// <param name="session">The dto object.</param>
	    /// <returns>The dto key of the newly created session.</returns>
	    public string CreateSession(SessionDto session)
	    {
	        string key = this.SessionService.Add(session);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing session in the database from the given dto object.
	    /// </summary>
	    /// <param name="session">The dto object.</param>
	    public void UpdateSession(SessionDto session)
	    {
	        this.SessionService.Update(session);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update sessions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sessions">The dto object list.</param>
	    public void UpdateSessions(IEnumerable<SessionDto> sessions)
	    {
	        if (sessions == null)
	        {
	            return;
	        }
	
	        foreach (SessionDto session in sessions)
	        {
	            if (session == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSession(session);
	        }
	    }
	
	    /// <summary>
	    /// Deletes session from the database by the given dto object.
	    /// </summary>
	    /// <param name="session">The dto object.</param>
	    public void DeleteSession(SessionDto session)
	    {
	        this.SessionService.Delete(session);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete sessions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sessions">The dto object list.</param>
	    public void DeleteSessions(IEnumerable<SessionDto> sessions)
	    {
	        if (sessions == null)
	        {
	            return;
	        }
	
	        foreach (SessionDto session in sessions)
	        {
	            if (session == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSession(session);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against SessionDesign entity.
	    /// </summary>
	    private ISessionDesignService sessiondesignservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against SessionDesign entity.
	    /// </summary>
	    public virtual ISessionDesignService SessionDesignService
	    {
	        get
	        {
	            if (this.sessiondesignservice == null)
	            {
	                ISessionDesignAssembler assembler = new SessionDesignAssembler();
	                ISessionDesignRepository repository = new SessionDesignRepository(this.UnitOfWork);
	
	                this.sessiondesignservice = new SessionDesignService(assembler, repository);
	            }
	            return this.sessiondesignservice;
	        }
	    }
	        
	    #region SessionDesigns CRUD Operations
	
	    /// <summary>
	    /// Returns all sessiondesigns.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SessionDesignDto> ReadSessionDesigns()	
	    {
	        return this.SessionDesignService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sessiondesigns from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SessionDesignDto> ReadSessionDesignsPaged(int startIndex, int pageSize)
	    {
	        return this.SessionDesignService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all sessiondesigns filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SessionDesignDto> ReadSessionDesignsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SessionDesignService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sessiondesigns from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SessionDesignDto> ReadSessionDesignsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SessionDesignService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a sessiondesign with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SessionDesignDto ReadSessionDesign(string dtoKey)
	    {
	        return this.SessionDesignService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all sessiondesigns count.
	    /// </summary>
	    /// <returns></returns>
	    public int SessionDesignsCount()
	    {
	        return this.SessionDesignService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all sessiondesigns count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SessionDesignsCountFiltered(string filterExpression)
	    {
	        return this.SessionDesignService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new sessiondesign from the given dto object into the database.
	    /// </summary>
	    /// <param name="sessiondesign">The dto object.</param>
	    /// <returns>The dto key of the newly created sessiondesign.</returns>
	    public string CreateSessionDesign(SessionDesignDto sessiondesign)
	    {
	        string key = this.SessionDesignService.Add(sessiondesign);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing sessiondesign in the database from the given dto object.
	    /// </summary>
	    /// <param name="sessiondesign">The dto object.</param>
	    public void UpdateSessionDesign(SessionDesignDto sessiondesign)
	    {
	        this.SessionDesignService.Update(sessiondesign);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update sessiondesigns in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sessiondesigns">The dto object list.</param>
	    public void UpdateSessionDesigns(IEnumerable<SessionDesignDto> sessiondesigns)
	    {
	        if (sessiondesigns == null)
	        {
	            return;
	        }
	
	        foreach (SessionDesignDto sessiondesign in sessiondesigns)
	        {
	            if (sessiondesign == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSessionDesign(sessiondesign);
	        }
	    }
	
	    /// <summary>
	    /// Deletes sessiondesign from the database by the given dto object.
	    /// </summary>
	    /// <param name="sessiondesign">The dto object.</param>
	    public void DeleteSessionDesign(SessionDesignDto sessiondesign)
	    {
	        this.SessionDesignService.Delete(sessiondesign);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete sessiondesigns from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sessiondesigns">The dto object list.</param>
	    public void DeleteSessionDesigns(IEnumerable<SessionDesignDto> sessiondesigns)
	    {
	        if (sessiondesigns == null)
	        {
	            return;
	        }
	
	        foreach (SessionDesignDto sessiondesign in sessiondesigns)
	        {
	            if (sessiondesign == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSessionDesign(sessiondesign);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against SessionDesignNode entity.
	    /// </summary>
	    private ISessionDesignNodeService sessiondesignnodeservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against SessionDesignNode entity.
	    /// </summary>
	    public virtual ISessionDesignNodeService SessionDesignNodeService
	    {
	        get
	        {
	            if (this.sessiondesignnodeservice == null)
	            {
	                ISessionDesignNodeAssembler assembler = new SessionDesignNodeAssembler();
	                ISessionDesignNodeRepository repository = new SessionDesignNodeRepository(this.UnitOfWork);
	
	                this.sessiondesignnodeservice = new SessionDesignNodeService(assembler, repository);
	            }
	            return this.sessiondesignnodeservice;
	        }
	    }
	        
	    #region SessionDesignNodes CRUD Operations
	
	    /// <summary>
	    /// Returns all sessiondesignnodes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SessionDesignNodeDto> ReadSessionDesignNodes()	
	    {
	        return this.SessionDesignNodeService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sessiondesignnodes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SessionDesignNodeDto> ReadSessionDesignNodesPaged(int startIndex, int pageSize)
	    {
	        return this.SessionDesignNodeService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all sessiondesignnodes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SessionDesignNodeDto> ReadSessionDesignNodesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SessionDesignNodeService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sessiondesignnodes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SessionDesignNodeDto> ReadSessionDesignNodesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SessionDesignNodeService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a sessiondesignnode with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SessionDesignNodeDto ReadSessionDesignNode(string dtoKey)
	    {
	        return this.SessionDesignNodeService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all sessiondesignnodes count.
	    /// </summary>
	    /// <returns></returns>
	    public int SessionDesignNodesCount()
	    {
	        return this.SessionDesignNodeService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all sessiondesignnodes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SessionDesignNodesCountFiltered(string filterExpression)
	    {
	        return this.SessionDesignNodeService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new sessiondesignnode from the given dto object into the database.
	    /// </summary>
	    /// <param name="sessiondesignnode">The dto object.</param>
	    /// <returns>The dto key of the newly created sessiondesignnode.</returns>
	    public string CreateSessionDesignNode(SessionDesignNodeDto sessiondesignnode)
	    {
	        string key = this.SessionDesignNodeService.Add(sessiondesignnode);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing sessiondesignnode in the database from the given dto object.
	    /// </summary>
	    /// <param name="sessiondesignnode">The dto object.</param>
	    public void UpdateSessionDesignNode(SessionDesignNodeDto sessiondesignnode)
	    {
	        this.SessionDesignNodeService.Update(sessiondesignnode);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update sessiondesignnodes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sessiondesignnodes">The dto object list.</param>
	    public void UpdateSessionDesignNodes(IEnumerable<SessionDesignNodeDto> sessiondesignnodes)
	    {
	        if (sessiondesignnodes == null)
	        {
	            return;
	        }
	
	        foreach (SessionDesignNodeDto sessiondesignnode in sessiondesignnodes)
	        {
	            if (sessiondesignnode == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSessionDesignNode(sessiondesignnode);
	        }
	    }
	
	    /// <summary>
	    /// Deletes sessiondesignnode from the database by the given dto object.
	    /// </summary>
	    /// <param name="sessiondesignnode">The dto object.</param>
	    public void DeleteSessionDesignNode(SessionDesignNodeDto sessiondesignnode)
	    {
	        this.SessionDesignNodeService.Delete(sessiondesignnode);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete sessiondesignnodes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sessiondesignnodes">The dto object list.</param>
	    public void DeleteSessionDesignNodes(IEnumerable<SessionDesignNodeDto> sessiondesignnodes)
	    {
	        if (sessiondesignnodes == null)
	        {
	            return;
	        }
	
	        foreach (SessionDesignNodeDto sessiondesignnode in sessiondesignnodes)
	        {
	            if (sessiondesignnode == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSessionDesignNode(sessiondesignnode);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Source entity.
	    /// </summary>
	    private ISourceService sourceservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Source entity.
	    /// </summary>
	    public virtual ISourceService SourceService
	    {
	        get
	        {
	            if (this.sourceservice == null)
	            {
	                ISourceAssembler assembler = new SourceAssembler();
	                ISourceRepository repository = new SourceRepository(this.UnitOfWork);
	
	                this.sourceservice = new SourceService(assembler, repository);
	            }
	            return this.sourceservice;
	        }
	    }
	        
	    #region Sources CRUD Operations
	
	    /// <summary>
	    /// Returns all sources.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SourceDto> ReadSources()	
	    {
	        return this.SourceService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sources from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SourceDto> ReadSourcesPaged(int startIndex, int pageSize)
	    {
	        return this.SourceService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all sources filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SourceDto> ReadSourcesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SourceService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sources from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SourceDto> ReadSourcesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SourceService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a source with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SourceDto ReadSource(string dtoKey)
	    {
	        return this.SourceService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all sources count.
	    /// </summary>
	    /// <returns></returns>
	    public int SourcesCount()
	    {
	        return this.SourceService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all sources count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SourcesCountFiltered(string filterExpression)
	    {
	        return this.SourceService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new source from the given dto object into the database.
	    /// </summary>
	    /// <param name="source">The dto object.</param>
	    /// <returns>The dto key of the newly created source.</returns>
	    public string CreateSource(SourceDto source)
	    {
	        string key = this.SourceService.Add(source);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing source in the database from the given dto object.
	    /// </summary>
	    /// <param name="source">The dto object.</param>
	    public void UpdateSource(SourceDto source)
	    {
	        this.SourceService.Update(source);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update sources in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sources">The dto object list.</param>
	    public void UpdateSources(IEnumerable<SourceDto> sources)
	    {
	        if (sources == null)
	        {
	            return;
	        }
	
	        foreach (SourceDto source in sources)
	        {
	            if (source == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSource(source);
	        }
	    }
	
	    /// <summary>
	    /// Deletes source from the database by the given dto object.
	    /// </summary>
	    /// <param name="source">The dto object.</param>
	    public void DeleteSource(SourceDto source)
	    {
	        this.SourceService.Delete(source);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete sources from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sources">The dto object list.</param>
	    public void DeleteSources(IEnumerable<SourceDto> sources)
	    {
	        if (sources == null)
	        {
	            return;
	        }
	
	        foreach (SourceDto source in sources)
	        {
	            if (source == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSource(source);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Visualization entity.
	    /// </summary>
	    private IVisualizationService visualizationservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Visualization entity.
	    /// </summary>
	    public virtual IVisualizationService VisualizationService
	    {
	        get
	        {
	            if (this.visualizationservice == null)
	            {
	                IVisualizationAssembler assembler = new VisualizationAssembler();
	                IVisualizationRepository repository = new VisualizationRepository(this.UnitOfWork);
	
	                this.visualizationservice = new VisualizationService(assembler, repository);
	            }
	            return this.visualizationservice;
	        }
	    }
	        
	    #region Visualizations CRUD Operations
	
	    /// <summary>
	    /// Returns all visualizations.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<VisualizationDto> ReadVisualizations()	
	    {
	        return this.VisualizationService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of visualizations from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<VisualizationDto> ReadVisualizationsPaged(int startIndex, int pageSize)
	    {
	        return this.VisualizationService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all visualizations filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<VisualizationDto> ReadVisualizationsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.VisualizationService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of visualizations from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<VisualizationDto> ReadVisualizationsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.VisualizationService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a visualization with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public VisualizationDto ReadVisualization(string dtoKey)
	    {
	        return this.VisualizationService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all visualizations count.
	    /// </summary>
	    /// <returns></returns>
	    public int VisualizationsCount()
	    {
	        return this.VisualizationService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all visualizations count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int VisualizationsCountFiltered(string filterExpression)
	    {
	        return this.VisualizationService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new visualization from the given dto object into the database.
	    /// </summary>
	    /// <param name="visualization">The dto object.</param>
	    /// <returns>The dto key of the newly created visualization.</returns>
	    public string CreateVisualization(VisualizationDto visualization)
	    {
	        string key = this.VisualizationService.Add(visualization);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing visualization in the database from the given dto object.
	    /// </summary>
	    /// <param name="visualization">The dto object.</param>
	    public void UpdateVisualization(VisualizationDto visualization)
	    {
	        this.VisualizationService.Update(visualization);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update visualizations in the database from the given dto object list.
	    /// </summary>
	    /// <param name="visualizations">The dto object list.</param>
	    public void UpdateVisualizations(IEnumerable<VisualizationDto> visualizations)
	    {
	        if (visualizations == null)
	        {
	            return;
	        }
	
	        foreach (VisualizationDto visualization in visualizations)
	        {
	            if (visualization == null)
	            {
	                continue;
	            }
	            
	            this.UpdateVisualization(visualization);
	        }
	    }
	
	    /// <summary>
	    /// Deletes visualization from the database by the given dto object.
	    /// </summary>
	    /// <param name="visualization">The dto object.</param>
	    public void DeleteVisualization(VisualizationDto visualization)
	    {
	        this.VisualizationService.Delete(visualization);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete visualizations from the database by the given dto object list.
	    /// </summary>
	    /// <param name="visualizations">The dto object list.</param>
	    public void DeleteVisualizations(IEnumerable<VisualizationDto> visualizations)
	    {
	        if (visualizations == null)
	        {
	            return;
	        }
	
	        foreach (VisualizationDto visualization in visualizations)
	        {
	            if (visualization == null)
	            {
	                continue;
	            }
	            
	            this.DeleteVisualization(visualization);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Visualizer entity.
	    /// </summary>
	    private IVisualizerService visualizerservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Visualizer entity.
	    /// </summary>
	    public virtual IVisualizerService VisualizerService
	    {
	        get
	        {
	            if (this.visualizerservice == null)
	            {
	                IVisualizerAssembler assembler = new VisualizerAssembler();
	                IVisualizerRepository repository = new VisualizerRepository(this.UnitOfWork);
	
	                this.visualizerservice = new VisualizerService(assembler, repository);
	            }
	            return this.visualizerservice;
	        }
	    }
	        
	    #region Visualizers CRUD Operations
	
	    /// <summary>
	    /// Returns all visualizers.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<VisualizerDto> ReadVisualizers()	
	    {
	        return this.VisualizerService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of visualizers from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<VisualizerDto> ReadVisualizersPaged(int startIndex, int pageSize)
	    {
	        return this.VisualizerService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all visualizers filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<VisualizerDto> ReadVisualizersFiltered(string sortExpression, string filterExpression)
	    {
	        return this.VisualizerService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of visualizers from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<VisualizerDto> ReadVisualizersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.VisualizerService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a visualizer with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public VisualizerDto ReadVisualizer(string dtoKey)
	    {
	        return this.VisualizerService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all visualizers count.
	    /// </summary>
	    /// <returns></returns>
	    public int VisualizersCount()
	    {
	        return this.VisualizerService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all visualizers count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int VisualizersCountFiltered(string filterExpression)
	    {
	        return this.VisualizerService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new visualizer from the given dto object into the database.
	    /// </summary>
	    /// <param name="visualizer">The dto object.</param>
	    /// <returns>The dto key of the newly created visualizer.</returns>
	    public string CreateVisualizer(VisualizerDto visualizer)
	    {
	        string key = this.VisualizerService.Add(visualizer);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing visualizer in the database from the given dto object.
	    /// </summary>
	    /// <param name="visualizer">The dto object.</param>
	    public void UpdateVisualizer(VisualizerDto visualizer)
	    {
	        this.VisualizerService.Update(visualizer);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update visualizers in the database from the given dto object list.
	    /// </summary>
	    /// <param name="visualizers">The dto object list.</param>
	    public void UpdateVisualizers(IEnumerable<VisualizerDto> visualizers)
	    {
	        if (visualizers == null)
	        {
	            return;
	        }
	
	        foreach (VisualizerDto visualizer in visualizers)
	        {
	            if (visualizer == null)
	            {
	                continue;
	            }
	            
	            this.UpdateVisualizer(visualizer);
	        }
	    }
	
	    /// <summary>
	    /// Deletes visualizer from the database by the given dto object.
	    /// </summary>
	    /// <param name="visualizer">The dto object.</param>
	    public void DeleteVisualizer(VisualizerDto visualizer)
	    {
	        this.VisualizerService.Delete(visualizer);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete visualizers from the database by the given dto object list.
	    /// </summary>
	    /// <param name="visualizers">The dto object list.</param>
	    public void DeleteVisualizers(IEnumerable<VisualizerDto> visualizers)
	    {
	        if (visualizers == null)
	        {
	            return;
	        }
	
	        foreach (VisualizerDto visualizer in visualizers)
	        {
	            if (visualizer == null)
	            {
	                continue;
	            }
	            
	            this.DeleteVisualizer(visualizer);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// EntitiesModelService finalizer.
	    /// </summary>
	    ~EntitiesModelService()
	    {
	        IDisposable context = this.unitOfWork as IDisposable;
	        if(context != null)
	        {
	            context.Dispose();
	        }
	    }
	}
}
#pragma warning restore 1591
