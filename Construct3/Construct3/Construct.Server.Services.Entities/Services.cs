#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Construct.Server.Services.Entities.Services
{
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;
	using Telerik.OpenAccess;
	using System.Linq.Dynamic;
	using Construct.Server.Entities;
	using Construct.Server.Services.Entities.Dto;
	using Construct.Server.Services.Entities.Assemblers;
	using Construct.Server.Services.Entities.Repositories;
	using Construct.Server.Services.Entities.Converters;

	
	public partial interface IService<TDto, TEntity>
	    where TEntity : class
		where TDto : IDtoWithKey
	{
	    IAssembler<TDto, TEntity> Assembler { get; }
	    IRepository<TEntity> Repository { get; }
	
	    IEnumerable<TDto> Find(Expression<Func<TEntity, bool>> filter);
	    IEnumerable<TDto> GetAll();
		
		IEnumerable<TDto> Find(int startRowIndex, int maximumRows);
	    IEnumerable<TDto> Find(string sortExpression, string filterExpression);
	    IEnumerable<TDto> Find(int? startRowIndex, int? maximumRows, string sortExpression, string filterExpression);
	    
		int Count();
	    int Count(string filterExpression);
		
		TDto GetByKey(string dtoKey);
	    string Add(TDto dto);
		void Update(TDto dto);
	    void Delete(TDto dto);	
	}
	
	public abstract partial class Service<TDto, TEntity> : IService<TDto, TEntity>
	    where TEntity : class
		where TDto : IDtoWithKey
	{
	    IAssembler<TDto, TEntity> assembler;
	    IRepository<TEntity> repository;
	
	    public Service(IAssembler<TDto, TEntity> assembler,
	        IRepository<TEntity> repository)
	    {
	        this.assembler = assembler;
	        this.repository = repository;
	    }
	
	    public IAssembler<TDto, TEntity> Assembler 
	    { 
	        get 
	        {
	            return this.assembler; 
	        } 
	    }
	
	    public IRepository<TEntity> Repository 
	    { 
	        get 
	        {
	            return this.repository; 
	        }
	    }
		
		public virtual IEnumerable<TDto> GetAll()
	    {
	        return this.assembler.Assemble(this.Repository.GetAll());
	    }
	
	    public virtual IEnumerable<TDto> Find(Expression<Func<TEntity, bool>> filter)
	    {
	        return this.Assembler.Assemble(this.Repository.Find(filter));
	    }
	
	    public virtual IEnumerable<TDto> Find(int startRowIndex, int maximumRows)
	    {
	        return this.Find(startRowIndex, maximumRows, null, null);
	    }
	
	    public virtual IEnumerable<TDto> Find(string sortExpression, string filterExpression)
	    {
	        return this.Find(null, null, sortExpression, filterExpression);
	    }
	
	    public virtual IEnumerable<TDto> Find(int? startRowIndex, int? maximumRows, string sortExpression, string filterExpression)
	    {
	        IQueryable<TEntity> query = this.Repository.GetAll();
	
	        if (!string.IsNullOrEmpty(filterExpression))
	        {
	            query = query.Where(filterExpression);
	        }
	        if (!string.IsNullOrEmpty(sortExpression))
	        {
	            query = query.OrderBy(sortExpression);
	        }
	        if (startRowIndex.HasValue)
	        {
	            query = query.Skip(startRowIndex.Value);
	        }
	        if (maximumRows.HasValue)
	        {
	            query = query.Take(maximumRows.Value);
	        }
	
	        return this.Assembler.Assemble(query);
	    }
	
	    public virtual int Count()
	    {
	        return this.Count(string.Empty);
	    }
	
	    public virtual int Count(string filterExpression)
	    {
	        IQueryable<TEntity> query = this.Repository.GetAll();
	
	        if (!string.IsNullOrEmpty(filterExpression))
	        {
	            query = query.Where(filterExpression);    
	        }
	
	        return query.Count();
	    }
	
	    
	    public virtual TDto GetByKey(string dtoKey)
	    {
	        ObjectKey key = KeyUtility.Instance.Convert<TEntity>(dtoKey);
			
	        return this.assembler.Assemble(this.Repository.Get(key));
	    }
	
	    public virtual string Add(TDto dto)
	    {
	        TEntity entity = this.assembler.Assemble(null, dto);
	
	        this.repository.Add(entity);
	
	        ObjectKey key = KeyUtility.Instance.Create(entity);
	
	        return KeyUtility.Instance.Convert(key);
	    }
	
	    public virtual void Update(TDto dto)
	    {
	        ObjectKey key = KeyUtility.Instance.Convert<TEntity>(dto.DtoKey);
	        TEntity entity = this.repository.Get(key);
	
	        this.assembler.Assemble(entity, dto);
	    }
	
	    public virtual void Delete(TDto dto)
	    {
			ObjectKey key = KeyUtility.Instance.Convert<TEntity>(dto.DtoKey);
	        TEntity entity = this.repository.Get(key);
	
	        this.Repository.Remove(entity);
	    }
	}
	
	public partial interface IDataTypeService : IService<DataTypeDto, DataType>
	{
	
	}
	
	public partial class DataTypeService : Service<DataTypeDto, DataType>, IDataTypeService
	{
	    public DataTypeService(IDataTypeAssembler assembler, IDataTypeRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IConstantService : IService<ConstantDto, Constant>
	{
	
	}
	
	public partial class ConstantService : Service<ConstantDto, Constant>, IConstantService
	{
	    public ConstantService(IConstantAssembler assembler, IConstantRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IDataTypeSourceService : IService<DataTypeSourceDto, DataTypeSource>
	{
	
	}
	
	public partial class DataTypeSourceService : Service<DataTypeSourceDto, DataTypeSource>, IDataTypeSourceService
	{
	    public DataTypeSourceService(IDataTypeSourceAssembler assembler, IDataTypeSourceRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IItemService : IService<ItemDto, Item>
	{
	
	}
	
	public partial class ItemService : Service<ItemDto, Item>, IItemService
	{
	    public ItemService(IItemAssembler assembler, IItemRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IPropertyService : IService<PropertyDto, Property>
	{
	
	}
	
	public partial class PropertyService : Service<PropertyDto, Property>, IPropertyService
	{
	    public PropertyService(IPropertyAssembler assembler, IPropertyRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IPropertyParentService : IService<PropertyParentDto, PropertyParent>
	{
	
	}
	
	public partial class PropertyParentService : Service<PropertyParentDto, PropertyParent>, IPropertyParentService
	{
	    public PropertyParentService(IPropertyParentAssembler assembler, IPropertyParentRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IPropertyTypeService : IService<PropertyTypeDto, PropertyType>
	{
	
	}
	
	public partial class PropertyTypeService : Service<PropertyTypeDto, PropertyType>, IPropertyTypeService
	{
	    public PropertyTypeService(IPropertyTypeAssembler assembler, IPropertyTypeRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	
	
	public partial interface IQuestionParameterService : IService<QuestionParameterDto, QuestionParameter>
	{
	
	}
	
	public partial class QuestionParameterService : Service<QuestionParameterDto, QuestionParameter>, IQuestionParameterService
	{
	    public QuestionParameterService(IQuestionParameterAssembler assembler, IQuestionParameterRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISourceService : IService<SourceDto, Source>
	{
	
	}
	
	public partial class SourceService : Service<SourceDto, Source>, ISourceService
	{
	    public SourceService(ISourceAssembler assembler, ISourceRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISensorService : IService<SensorDto, Sensor>
	{
	
	}
	
	public partial class SensorService : Service<SensorDto, Sensor>, ISensorService
	{
	    public SensorService(ISensorAssembler assembler, ISensorRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISensorCommandService : IService<SensorCommandDto, SensorCommand>
	{
	
	}
	
	public partial class SensorCommandService : Service<SensorCommandDto, SensorCommand>, ISensorCommandService
	{
	    public SensorCommandService(ISensorCommandAssembler assembler, ISensorCommandRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISensorCommandParameterService : IService<SensorCommandParameterDto, SensorCommandParameter>
	{
	
	}
	
	public partial class SensorCommandParameterService : Service<SensorCommandParameterDto, SensorCommandParameter>, ISensorCommandParameterService
	{
	    public SensorCommandParameterService(ISensorCommandParameterAssembler assembler, ISensorCommandParameterRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISensorHostService : IService<SensorHostDto, SensorHost>
	{
	
	}
	
	public partial class SensorHostService : Service<SensorHostDto, SensorHost>, ISensorHostService
	{
	    public SensorHostService(ISensorHostAssembler assembler, ISensorHostRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISensorHostTypeService : IService<SensorHostTypeDto, SensorHostType>
	{
	
	}
	
	public partial class SensorHostTypeService : Service<SensorHostTypeDto, SensorHostType>, ISensorHostTypeService
	{
	    public SensorHostTypeService(ISensorHostTypeAssembler assembler, ISensorHostTypeRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISensorRuntimeService : IService<SensorRuntimeDto, SensorRuntime>
	{
	
	}
	
	public partial class SensorRuntimeService : Service<SensorRuntimeDto, SensorRuntime>, ISensorRuntimeService
	{
	    public SensorRuntimeService(ISensorRuntimeAssembler assembler, ISensorRuntimeRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISensorTypeSourceService : IService<SensorTypeSourceDto, SensorTypeSource>
	{
	
	}
	
	public partial class SensorTypeSourceService : Service<SensorTypeSourceDto, SensorTypeSource>, ISensorTypeSourceService
	{
	    public SensorTypeSourceService(ISensorTypeSourceAssembler assembler, ISensorTypeSourceRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISessionService : IService<SessionDto, Session>
	{
	
	}
	
	public partial class SessionService : Service<SessionDto, Session>, ISessionService
	{
	    public SessionService(ISessionAssembler assembler, ISessionRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISessionDesignService : IService<SessionDesignDto, SessionDesign>
	{
	
	}
	
	public partial class SessionDesignService : Service<SessionDesignDto, SessionDesign>, ISessionDesignService
	{
	    public SessionDesignService(ISessionDesignAssembler assembler, ISessionDesignRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISessionDesignNodeService : IService<SessionDesignNodeDto, SessionDesignNode>
	{
	
	}
	
	public partial class SessionDesignNodeService : Service<SessionDesignNodeDto, SessionDesignNode>, ISessionDesignNodeService
	{
	    public SessionDesignNodeService(ISessionDesignNodeAssembler assembler, ISessionDesignNodeRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IVisualizationService : IService<VisualizationDto, Visualization>
	{
	
	}
	
	public partial class VisualizationService : Service<VisualizationDto, Visualization>, IVisualizationService
	{
	    public VisualizationService(IVisualizationAssembler assembler, IVisualizationRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IVisualizerService : IService<VisualizerDto, Visualizer>
	{
	
	}
	
	public partial class VisualizerService : Service<VisualizerDto, Visualizer>, IVisualizerService
	{
	    public VisualizerService(IVisualizerAssembler assembler, IVisualizerRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
}
#pragma warning restore 1591
