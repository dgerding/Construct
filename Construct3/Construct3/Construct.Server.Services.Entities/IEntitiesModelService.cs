#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Construct.Server.Services.Entities
{
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;
	using System.ServiceModel;
	using Construct.Server.Services.Entities.Dto;

	/// <summary>
	/// EntitiesModelService interface.
	/// </summary>
	[ServiceContract]
	public interface IEntitiesModelService
	{
	    #region DataTypes CRUD Operations
	
	    /// <summary>
	    /// Returns all datatypes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<DataTypeDto> ReadDataTypes();
	
	    /// <summary>
	    /// Returns a specified amount of datatypes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<DataTypeDto> ReadDataTypesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all datatypes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<DataTypeDto> ReadDataTypesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of datatypes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<DataTypeDto> ReadDataTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a datatype with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    DataTypeDto ReadDataType(string dtoKey);
	
	    /// <summary>
	    /// Returns all datatypes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int DataTypesCount();
	
	    /// <summary>
	    /// Returns all datatypes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int DataTypesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new datatype from the given dto object into the database.
	    /// </summary>
	    /// <param name="datatype">The dto object.</param>
	    /// <returns>The dto key of the newly created datatype.</returns>
	    [OperationContract]
	    string CreateDataType(DataTypeDto datatype);
	
	    /// <summary>
	    /// Updates datatype in the database from the given dto object.
	    /// </summary>
	    /// <param name="datatype">The dto object.</param>
	    [OperationContract]
	    void UpdateDataType(DataTypeDto datatype);
	
	    /// <summary>
	    /// Update an existing datatypes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="datatypes">The dto object list.</param>
	    [OperationContract]
	    void UpdateDataTypes(IEnumerable<DataTypeDto> datatypes);
	
	    /// <summary>
	    /// Deletes datatype from the database by the given dto object.
	    /// </summary>
	    /// <param name="datatype">The dto object.</param>
	    [OperationContract]
	    void DeleteDataType(DataTypeDto datatype);
	
	    /// <summary>
	    /// Delete datatypes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="datatypes">The dto object list.</param>
	    [OperationContract]
	    void DeleteDataTypes(IEnumerable<DataTypeDto> datatypes);
	    
	    #endregion
	    
	    #region DataTypeSources CRUD Operations
	
	    /// <summary>
	    /// Returns all datatypesources.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<DataTypeSourceDto> ReadDataTypeSources();
	
	    /// <summary>
	    /// Returns a specified amount of datatypesources from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<DataTypeSourceDto> ReadDataTypeSourcesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all datatypesources filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<DataTypeSourceDto> ReadDataTypeSourcesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of datatypesources from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<DataTypeSourceDto> ReadDataTypeSourcesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a datatypesource with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    DataTypeSourceDto ReadDataTypeSource(string dtoKey);
	
	    /// <summary>
	    /// Returns all datatypesources count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int DataTypeSourcesCount();
	
	    /// <summary>
	    /// Returns all datatypesources count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int DataTypeSourcesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new datatypesource from the given dto object into the database.
	    /// </summary>
	    /// <param name="datatypesource">The dto object.</param>
	    /// <returns>The dto key of the newly created datatypesource.</returns>
	    [OperationContract]
	    string CreateDataTypeSource(DataTypeSourceDto datatypesource);
	
	    /// <summary>
	    /// Updates datatypesource in the database from the given dto object.
	    /// </summary>
	    /// <param name="datatypesource">The dto object.</param>
	    [OperationContract]
	    void UpdateDataTypeSource(DataTypeSourceDto datatypesource);
	
	    /// <summary>
	    /// Update an existing datatypesources in the database from the given dto object list.
	    /// </summary>
	    /// <param name="datatypesources">The dto object list.</param>
	    [OperationContract]
	    void UpdateDataTypeSources(IEnumerable<DataTypeSourceDto> datatypesources);
	
	    /// <summary>
	    /// Deletes datatypesource from the database by the given dto object.
	    /// </summary>
	    /// <param name="datatypesource">The dto object.</param>
	    [OperationContract]
	    void DeleteDataTypeSource(DataTypeSourceDto datatypesource);
	
	    /// <summary>
	    /// Delete datatypesources from the database by the given dto object list.
	    /// </summary>
	    /// <param name="datatypesources">The dto object list.</param>
	    [OperationContract]
	    void DeleteDataTypeSources(IEnumerable<DataTypeSourceDto> datatypesources);
	    
	    #endregion
	    
	    #region Items CRUD Operations
	
	    /// <summary>
	    /// Returns all items.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ItemDto> ReadItems();
	
	    /// <summary>
	    /// Returns a specified amount of items from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ItemDto> ReadItemsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all items filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ItemDto> ReadItemsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of items from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ItemDto> ReadItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a item with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ItemDto ReadItem(string dtoKey);
	
	    /// <summary>
	    /// Returns all items count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ItemsCount();
	
	    /// <summary>
	    /// Returns all items count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ItemsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new item from the given dto object into the database.
	    /// </summary>
	    /// <param name="item">The dto object.</param>
	    /// <returns>The dto key of the newly created item.</returns>
	    [OperationContract]
	    string CreateItem(ItemDto item);
	
	    /// <summary>
	    /// Updates item in the database from the given dto object.
	    /// </summary>
	    /// <param name="item">The dto object.</param>
	    [OperationContract]
	    void UpdateItem(ItemDto item);
	
	    /// <summary>
	    /// Update an existing items in the database from the given dto object list.
	    /// </summary>
	    /// <param name="items">The dto object list.</param>
	    [OperationContract]
	    void UpdateItems(IEnumerable<ItemDto> items);
	
	    /// <summary>
	    /// Deletes item from the database by the given dto object.
	    /// </summary>
	    /// <param name="item">The dto object.</param>
	    [OperationContract]
	    void DeleteItem(ItemDto item);
	
	    /// <summary>
	    /// Delete items from the database by the given dto object list.
	    /// </summary>
	    /// <param name="items">The dto object list.</param>
	    [OperationContract]
	    void DeleteItems(IEnumerable<ItemDto> items);
	    
	    #endregion
	    
	    #region Properties CRUD Operations
	
	    /// <summary>
	    /// Returns all properties.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PropertyDto> ReadProperties();
	
	    /// <summary>
	    /// Returns a specified amount of properties from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PropertyDto> ReadPropertiesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all properties filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PropertyDto> ReadPropertiesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of properties from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PropertyDto> ReadPropertiesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a property with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PropertyDto ReadProperty(string dtoKey);
	
	    /// <summary>
	    /// Returns all properties count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PropertiesCount();
	
	    /// <summary>
	    /// Returns all properties count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PropertiesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new property from the given dto object into the database.
	    /// </summary>
	    /// <param name="property">The dto object.</param>
	    /// <returns>The dto key of the newly created property.</returns>
	    [OperationContract]
	    string CreateProperty(PropertyDto property);
	
	    /// <summary>
	    /// Updates property in the database from the given dto object.
	    /// </summary>
	    /// <param name="property">The dto object.</param>
	    [OperationContract]
	    void UpdateProperty(PropertyDto property);
	
	    /// <summary>
	    /// Update an existing properties in the database from the given dto object list.
	    /// </summary>
	    /// <param name="properties">The dto object list.</param>
	    [OperationContract]
	    void UpdateProperties(IEnumerable<PropertyDto> properties);
	
	    /// <summary>
	    /// Deletes property from the database by the given dto object.
	    /// </summary>
	    /// <param name="property">The dto object.</param>
	    [OperationContract]
	    void DeleteProperty(PropertyDto property);
	
	    /// <summary>
	    /// Delete properties from the database by the given dto object list.
	    /// </summary>
	    /// <param name="properties">The dto object list.</param>
	    [OperationContract]
	    void DeleteProperties(IEnumerable<PropertyDto> properties);
	    
	    #endregion
	    
	    #region QuestionParameters CRUD Operations
	
	    /// <summary>
	    /// Returns all questionparameters.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<QuestionParameterDto> ReadQuestionParameters();
	
	    /// <summary>
	    /// Returns a specified amount of questionparameters from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<QuestionParameterDto> ReadQuestionParametersPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all questionparameters filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<QuestionParameterDto> ReadQuestionParametersFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of questionparameters from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<QuestionParameterDto> ReadQuestionParametersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a questionparameter with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    QuestionParameterDto ReadQuestionParameter(string dtoKey);
	
	    /// <summary>
	    /// Returns all questionparameters count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int QuestionParametersCount();
	
	    /// <summary>
	    /// Returns all questionparameters count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int QuestionParametersCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new questionparameter from the given dto object into the database.
	    /// </summary>
	    /// <param name="questionparameter">The dto object.</param>
	    /// <returns>The dto key of the newly created questionparameter.</returns>
	    [OperationContract]
	    string CreateQuestionParameter(QuestionParameterDto questionparameter);
	
	    /// <summary>
	    /// Updates questionparameter in the database from the given dto object.
	    /// </summary>
	    /// <param name="questionparameter">The dto object.</param>
	    [OperationContract]
	    void UpdateQuestionParameter(QuestionParameterDto questionparameter);
	
	    /// <summary>
	    /// Update an existing questionparameters in the database from the given dto object list.
	    /// </summary>
	    /// <param name="questionparameters">The dto object list.</param>
	    [OperationContract]
	    void UpdateQuestionParameters(IEnumerable<QuestionParameterDto> questionparameters);
	
	    /// <summary>
	    /// Deletes questionparameter from the database by the given dto object.
	    /// </summary>
	    /// <param name="questionparameter">The dto object.</param>
	    [OperationContract]
	    void DeleteQuestionParameter(QuestionParameterDto questionparameter);
	
	    /// <summary>
	    /// Delete questionparameters from the database by the given dto object list.
	    /// </summary>
	    /// <param name="questionparameters">The dto object list.</param>
	    [OperationContract]
	    void DeleteQuestionParameters(IEnumerable<QuestionParameterDto> questionparameters);
	    
	    #endregion
	    
	    #region SensorCommands CRUD Operations
	
	    /// <summary>
	    /// Returns all sensorcommands.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorCommandDto> ReadSensorCommands();
	
	    /// <summary>
	    /// Returns a specified amount of sensorcommands from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorCommandDto> ReadSensorCommandsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all sensorcommands filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorCommandDto> ReadSensorCommandsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of sensorcommands from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorCommandDto> ReadSensorCommandsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a sensorcommand with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SensorCommandDto ReadSensorCommand(string dtoKey);
	
	    /// <summary>
	    /// Returns all sensorcommands count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SensorCommandsCount();
	
	    /// <summary>
	    /// Returns all sensorcommands count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SensorCommandsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new sensorcommand from the given dto object into the database.
	    /// </summary>
	    /// <param name="sensorcommand">The dto object.</param>
	    /// <returns>The dto key of the newly created sensorcommand.</returns>
	    [OperationContract]
	    string CreateSensorCommand(SensorCommandDto sensorcommand);
	
	    /// <summary>
	    /// Updates sensorcommand in the database from the given dto object.
	    /// </summary>
	    /// <param name="sensorcommand">The dto object.</param>
	    [OperationContract]
	    void UpdateSensorCommand(SensorCommandDto sensorcommand);
	
	    /// <summary>
	    /// Update an existing sensorcommands in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sensorcommands">The dto object list.</param>
	    [OperationContract]
	    void UpdateSensorCommands(IEnumerable<SensorCommandDto> sensorcommands);
	
	    /// <summary>
	    /// Deletes sensorcommand from the database by the given dto object.
	    /// </summary>
	    /// <param name="sensorcommand">The dto object.</param>
	    [OperationContract]
	    void DeleteSensorCommand(SensorCommandDto sensorcommand);
	
	    /// <summary>
	    /// Delete sensorcommands from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sensorcommands">The dto object list.</param>
	    [OperationContract]
	    void DeleteSensorCommands(IEnumerable<SensorCommandDto> sensorcommands);
	    
	    #endregion
	    
	    #region SensorCommandParameters CRUD Operations
	
	    /// <summary>
	    /// Returns all sensorcommandparameters.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorCommandParameterDto> ReadSensorCommandParameters();
	
	    /// <summary>
	    /// Returns a specified amount of sensorcommandparameters from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorCommandParameterDto> ReadSensorCommandParametersPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all sensorcommandparameters filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorCommandParameterDto> ReadSensorCommandParametersFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of sensorcommandparameters from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorCommandParameterDto> ReadSensorCommandParametersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a sensorcommandparameter with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SensorCommandParameterDto ReadSensorCommandParameter(string dtoKey);
	
	    /// <summary>
	    /// Returns all sensorcommandparameters count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SensorCommandParametersCount();
	
	    /// <summary>
	    /// Returns all sensorcommandparameters count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SensorCommandParametersCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new sensorcommandparameter from the given dto object into the database.
	    /// </summary>
	    /// <param name="sensorcommandparameter">The dto object.</param>
	    /// <returns>The dto key of the newly created sensorcommandparameter.</returns>
	    [OperationContract]
	    string CreateSensorCommandParameter(SensorCommandParameterDto sensorcommandparameter);
	
	    /// <summary>
	    /// Updates sensorcommandparameter in the database from the given dto object.
	    /// </summary>
	    /// <param name="sensorcommandparameter">The dto object.</param>
	    [OperationContract]
	    void UpdateSensorCommandParameter(SensorCommandParameterDto sensorcommandparameter);
	
	    /// <summary>
	    /// Update an existing sensorcommandparameters in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sensorcommandparameters">The dto object list.</param>
	    [OperationContract]
	    void UpdateSensorCommandParameters(IEnumerable<SensorCommandParameterDto> sensorcommandparameters);
	
	    /// <summary>
	    /// Deletes sensorcommandparameter from the database by the given dto object.
	    /// </summary>
	    /// <param name="sensorcommandparameter">The dto object.</param>
	    [OperationContract]
	    void DeleteSensorCommandParameter(SensorCommandParameterDto sensorcommandparameter);
	
	    /// <summary>
	    /// Delete sensorcommandparameters from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sensorcommandparameters">The dto object list.</param>
	    [OperationContract]
	    void DeleteSensorCommandParameters(IEnumerable<SensorCommandParameterDto> sensorcommandparameters);
	    
	    #endregion
	    
	    #region SensorHosts CRUD Operations
	
	    /// <summary>
	    /// Returns all sensorhosts.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorHostDto> ReadSensorHosts();
	
	    /// <summary>
	    /// Returns a specified amount of sensorhosts from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorHostDto> ReadSensorHostsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all sensorhosts filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorHostDto> ReadSensorHostsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of sensorhosts from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorHostDto> ReadSensorHostsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a sensorhost with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SensorHostDto ReadSensorHost(string dtoKey);
	
	    /// <summary>
	    /// Returns all sensorhosts count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SensorHostsCount();
	
	    /// <summary>
	    /// Returns all sensorhosts count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SensorHostsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new sensorhost from the given dto object into the database.
	    /// </summary>
	    /// <param name="sensorhost">The dto object.</param>
	    /// <returns>The dto key of the newly created sensorhost.</returns>
	    [OperationContract]
	    string CreateSensorHost(SensorHostDto sensorhost);
	
	    /// <summary>
	    /// Updates sensorhost in the database from the given dto object.
	    /// </summary>
	    /// <param name="sensorhost">The dto object.</param>
	    [OperationContract]
	    void UpdateSensorHost(SensorHostDto sensorhost);
	
	    /// <summary>
	    /// Update an existing sensorhosts in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sensorhosts">The dto object list.</param>
	    [OperationContract]
	    void UpdateSensorHosts(IEnumerable<SensorHostDto> sensorhosts);
	
	    /// <summary>
	    /// Deletes sensorhost from the database by the given dto object.
	    /// </summary>
	    /// <param name="sensorhost">The dto object.</param>
	    [OperationContract]
	    void DeleteSensorHost(SensorHostDto sensorhost);
	
	    /// <summary>
	    /// Delete sensorhosts from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sensorhosts">The dto object list.</param>
	    [OperationContract]
	    void DeleteSensorHosts(IEnumerable<SensorHostDto> sensorhosts);
	    
	    #endregion
	    
	    #region SensorHostTypes CRUD Operations
	
	    /// <summary>
	    /// Returns all sensorhosttypes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorHostTypeDto> ReadSensorHostTypes();
	
	    /// <summary>
	    /// Returns a specified amount of sensorhosttypes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorHostTypeDto> ReadSensorHostTypesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all sensorhosttypes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorHostTypeDto> ReadSensorHostTypesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of sensorhosttypes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorHostTypeDto> ReadSensorHostTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a sensorhosttype with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SensorHostTypeDto ReadSensorHostType(string dtoKey);
	
	    /// <summary>
	    /// Returns all sensorhosttypes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SensorHostTypesCount();
	
	    /// <summary>
	    /// Returns all sensorhosttypes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SensorHostTypesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new sensorhosttype from the given dto object into the database.
	    /// </summary>
	    /// <param name="sensorhosttype">The dto object.</param>
	    /// <returns>The dto key of the newly created sensorhosttype.</returns>
	    [OperationContract]
	    string CreateSensorHostType(SensorHostTypeDto sensorhosttype);
	
	    /// <summary>
	    /// Updates sensorhosttype in the database from the given dto object.
	    /// </summary>
	    /// <param name="sensorhosttype">The dto object.</param>
	    [OperationContract]
	    void UpdateSensorHostType(SensorHostTypeDto sensorhosttype);
	
	    /// <summary>
	    /// Update an existing sensorhosttypes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sensorhosttypes">The dto object list.</param>
	    [OperationContract]
	    void UpdateSensorHostTypes(IEnumerable<SensorHostTypeDto> sensorhosttypes);
	
	    /// <summary>
	    /// Deletes sensorhosttype from the database by the given dto object.
	    /// </summary>
	    /// <param name="sensorhosttype">The dto object.</param>
	    [OperationContract]
	    void DeleteSensorHostType(SensorHostTypeDto sensorhosttype);
	
	    /// <summary>
	    /// Delete sensorhosttypes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sensorhosttypes">The dto object list.</param>
	    [OperationContract]
	    void DeleteSensorHostTypes(IEnumerable<SensorHostTypeDto> sensorhosttypes);
	    
	    #endregion
	    
	    #region SensorRuntimes CRUD Operations
	
	    /// <summary>
	    /// Returns all sensorruntimes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorRuntimeDto> ReadSensorRuntimes();
	
	    /// <summary>
	    /// Returns a specified amount of sensorruntimes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorRuntimeDto> ReadSensorRuntimesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all sensorruntimes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorRuntimeDto> ReadSensorRuntimesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of sensorruntimes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SensorRuntimeDto> ReadSensorRuntimesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a sensorruntime with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SensorRuntimeDto ReadSensorRuntime(string dtoKey);
	
	    /// <summary>
	    /// Returns all sensorruntimes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SensorRuntimesCount();
	
	    /// <summary>
	    /// Returns all sensorruntimes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SensorRuntimesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new sensorruntime from the given dto object into the database.
	    /// </summary>
	    /// <param name="sensorruntime">The dto object.</param>
	    /// <returns>The dto key of the newly created sensorruntime.</returns>
	    [OperationContract]
	    string CreateSensorRuntime(SensorRuntimeDto sensorruntime);
	
	    /// <summary>
	    /// Updates sensorruntime in the database from the given dto object.
	    /// </summary>
	    /// <param name="sensorruntime">The dto object.</param>
	    [OperationContract]
	    void UpdateSensorRuntime(SensorRuntimeDto sensorruntime);
	
	    /// <summary>
	    /// Update an existing sensorruntimes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sensorruntimes">The dto object list.</param>
	    [OperationContract]
	    void UpdateSensorRuntimes(IEnumerable<SensorRuntimeDto> sensorruntimes);
	
	    /// <summary>
	    /// Deletes sensorruntime from the database by the given dto object.
	    /// </summary>
	    /// <param name="sensorruntime">The dto object.</param>
	    [OperationContract]
	    void DeleteSensorRuntime(SensorRuntimeDto sensorruntime);
	
	    /// <summary>
	    /// Delete sensorruntimes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sensorruntimes">The dto object list.</param>
	    [OperationContract]
	    void DeleteSensorRuntimes(IEnumerable<SensorRuntimeDto> sensorruntimes);
	    
	    #endregion
	    
	    #region Sessions CRUD Operations
	
	    /// <summary>
	    /// Returns all sessions.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SessionDto> ReadSessions();
	
	    /// <summary>
	    /// Returns a specified amount of sessions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SessionDto> ReadSessionsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all sessions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SessionDto> ReadSessionsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of sessions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SessionDto> ReadSessionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a session with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SessionDto ReadSession(string dtoKey);
	
	    /// <summary>
	    /// Returns all sessions count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SessionsCount();
	
	    /// <summary>
	    /// Returns all sessions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SessionsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new session from the given dto object into the database.
	    /// </summary>
	    /// <param name="session">The dto object.</param>
	    /// <returns>The dto key of the newly created session.</returns>
	    [OperationContract]
	    string CreateSession(SessionDto session);
	
	    /// <summary>
	    /// Updates session in the database from the given dto object.
	    /// </summary>
	    /// <param name="session">The dto object.</param>
	    [OperationContract]
	    void UpdateSession(SessionDto session);
	
	    /// <summary>
	    /// Update an existing sessions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sessions">The dto object list.</param>
	    [OperationContract]
	    void UpdateSessions(IEnumerable<SessionDto> sessions);
	
	    /// <summary>
	    /// Deletes session from the database by the given dto object.
	    /// </summary>
	    /// <param name="session">The dto object.</param>
	    [OperationContract]
	    void DeleteSession(SessionDto session);
	
	    /// <summary>
	    /// Delete sessions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sessions">The dto object list.</param>
	    [OperationContract]
	    void DeleteSessions(IEnumerable<SessionDto> sessions);
	    
	    #endregion
	    
	    #region SessionDesigns CRUD Operations
	
	    /// <summary>
	    /// Returns all sessiondesigns.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SessionDesignDto> ReadSessionDesigns();
	
	    /// <summary>
	    /// Returns a specified amount of sessiondesigns from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SessionDesignDto> ReadSessionDesignsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all sessiondesigns filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SessionDesignDto> ReadSessionDesignsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of sessiondesigns from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SessionDesignDto> ReadSessionDesignsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a sessiondesign with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SessionDesignDto ReadSessionDesign(string dtoKey);
	
	    /// <summary>
	    /// Returns all sessiondesigns count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SessionDesignsCount();
	
	    /// <summary>
	    /// Returns all sessiondesigns count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SessionDesignsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new sessiondesign from the given dto object into the database.
	    /// </summary>
	    /// <param name="sessiondesign">The dto object.</param>
	    /// <returns>The dto key of the newly created sessiondesign.</returns>
	    [OperationContract]
	    string CreateSessionDesign(SessionDesignDto sessiondesign);
	
	    /// <summary>
	    /// Updates sessiondesign in the database from the given dto object.
	    /// </summary>
	    /// <param name="sessiondesign">The dto object.</param>
	    [OperationContract]
	    void UpdateSessionDesign(SessionDesignDto sessiondesign);
	
	    /// <summary>
	    /// Update an existing sessiondesigns in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sessiondesigns">The dto object list.</param>
	    [OperationContract]
	    void UpdateSessionDesigns(IEnumerable<SessionDesignDto> sessiondesigns);
	
	    /// <summary>
	    /// Deletes sessiondesign from the database by the given dto object.
	    /// </summary>
	    /// <param name="sessiondesign">The dto object.</param>
	    [OperationContract]
	    void DeleteSessionDesign(SessionDesignDto sessiondesign);
	
	    /// <summary>
	    /// Delete sessiondesigns from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sessiondesigns">The dto object list.</param>
	    [OperationContract]
	    void DeleteSessionDesigns(IEnumerable<SessionDesignDto> sessiondesigns);
	    
	    #endregion
	    
	    #region SessionDesignNodes CRUD Operations
	
	    /// <summary>
	    /// Returns all sessiondesignnodes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SessionDesignNodeDto> ReadSessionDesignNodes();
	
	    /// <summary>
	    /// Returns a specified amount of sessiondesignnodes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SessionDesignNodeDto> ReadSessionDesignNodesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all sessiondesignnodes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SessionDesignNodeDto> ReadSessionDesignNodesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of sessiondesignnodes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SessionDesignNodeDto> ReadSessionDesignNodesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a sessiondesignnode with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SessionDesignNodeDto ReadSessionDesignNode(string dtoKey);
	
	    /// <summary>
	    /// Returns all sessiondesignnodes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SessionDesignNodesCount();
	
	    /// <summary>
	    /// Returns all sessiondesignnodes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SessionDesignNodesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new sessiondesignnode from the given dto object into the database.
	    /// </summary>
	    /// <param name="sessiondesignnode">The dto object.</param>
	    /// <returns>The dto key of the newly created sessiondesignnode.</returns>
	    [OperationContract]
	    string CreateSessionDesignNode(SessionDesignNodeDto sessiondesignnode);
	
	    /// <summary>
	    /// Updates sessiondesignnode in the database from the given dto object.
	    /// </summary>
	    /// <param name="sessiondesignnode">The dto object.</param>
	    [OperationContract]
	    void UpdateSessionDesignNode(SessionDesignNodeDto sessiondesignnode);
	
	    /// <summary>
	    /// Update an existing sessiondesignnodes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sessiondesignnodes">The dto object list.</param>
	    [OperationContract]
	    void UpdateSessionDesignNodes(IEnumerable<SessionDesignNodeDto> sessiondesignnodes);
	
	    /// <summary>
	    /// Deletes sessiondesignnode from the database by the given dto object.
	    /// </summary>
	    /// <param name="sessiondesignnode">The dto object.</param>
	    [OperationContract]
	    void DeleteSessionDesignNode(SessionDesignNodeDto sessiondesignnode);
	
	    /// <summary>
	    /// Delete sessiondesignnodes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sessiondesignnodes">The dto object list.</param>
	    [OperationContract]
	    void DeleteSessionDesignNodes(IEnumerable<SessionDesignNodeDto> sessiondesignnodes);
	    
	    #endregion
	    
	    #region Sources CRUD Operations
	
	    /// <summary>
	    /// Returns all sources.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SourceDto> ReadSources();
	
	    /// <summary>
	    /// Returns a specified amount of sources from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SourceDto> ReadSourcesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all sources filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SourceDto> ReadSourcesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of sources from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SourceDto> ReadSourcesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a source with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SourceDto ReadSource(string dtoKey);
	
	    /// <summary>
	    /// Returns all sources count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SourcesCount();
	
	    /// <summary>
	    /// Returns all sources count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SourcesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new source from the given dto object into the database.
	    /// </summary>
	    /// <param name="source">The dto object.</param>
	    /// <returns>The dto key of the newly created source.</returns>
	    [OperationContract]
	    string CreateSource(SourceDto source);
	
	    /// <summary>
	    /// Updates source in the database from the given dto object.
	    /// </summary>
	    /// <param name="source">The dto object.</param>
	    [OperationContract]
	    void UpdateSource(SourceDto source);
	
	    /// <summary>
	    /// Update an existing sources in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sources">The dto object list.</param>
	    [OperationContract]
	    void UpdateSources(IEnumerable<SourceDto> sources);
	
	    /// <summary>
	    /// Deletes source from the database by the given dto object.
	    /// </summary>
	    /// <param name="source">The dto object.</param>
	    [OperationContract]
	    void DeleteSource(SourceDto source);
	
	    /// <summary>
	    /// Delete sources from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sources">The dto object list.</param>
	    [OperationContract]
	    void DeleteSources(IEnumerable<SourceDto> sources);
	    
	    #endregion
	    
	    #region Visualizations CRUD Operations
	
	    /// <summary>
	    /// Returns all visualizations.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<VisualizationDto> ReadVisualizations();
	
	    /// <summary>
	    /// Returns a specified amount of visualizations from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<VisualizationDto> ReadVisualizationsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all visualizations filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<VisualizationDto> ReadVisualizationsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of visualizations from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<VisualizationDto> ReadVisualizationsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a visualization with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    VisualizationDto ReadVisualization(string dtoKey);
	
	    /// <summary>
	    /// Returns all visualizations count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int VisualizationsCount();
	
	    /// <summary>
	    /// Returns all visualizations count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int VisualizationsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new visualization from the given dto object into the database.
	    /// </summary>
	    /// <param name="visualization">The dto object.</param>
	    /// <returns>The dto key of the newly created visualization.</returns>
	    [OperationContract]
	    string CreateVisualization(VisualizationDto visualization);
	
	    /// <summary>
	    /// Updates visualization in the database from the given dto object.
	    /// </summary>
	    /// <param name="visualization">The dto object.</param>
	    [OperationContract]
	    void UpdateVisualization(VisualizationDto visualization);
	
	    /// <summary>
	    /// Update an existing visualizations in the database from the given dto object list.
	    /// </summary>
	    /// <param name="visualizations">The dto object list.</param>
	    [OperationContract]
	    void UpdateVisualizations(IEnumerable<VisualizationDto> visualizations);
	
	    /// <summary>
	    /// Deletes visualization from the database by the given dto object.
	    /// </summary>
	    /// <param name="visualization">The dto object.</param>
	    [OperationContract]
	    void DeleteVisualization(VisualizationDto visualization);
	
	    /// <summary>
	    /// Delete visualizations from the database by the given dto object list.
	    /// </summary>
	    /// <param name="visualizations">The dto object list.</param>
	    [OperationContract]
	    void DeleteVisualizations(IEnumerable<VisualizationDto> visualizations);
	    
	    #endregion
	    
	    #region Visualizers CRUD Operations
	
	    /// <summary>
	    /// Returns all visualizers.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<VisualizerDto> ReadVisualizers();
	
	    /// <summary>
	    /// Returns a specified amount of visualizers from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<VisualizerDto> ReadVisualizersPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all visualizers filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<VisualizerDto> ReadVisualizersFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of visualizers from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<VisualizerDto> ReadVisualizersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a visualizer with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    VisualizerDto ReadVisualizer(string dtoKey);
	
	    /// <summary>
	    /// Returns all visualizers count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int VisualizersCount();
	
	    /// <summary>
	    /// Returns all visualizers count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int VisualizersCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new visualizer from the given dto object into the database.
	    /// </summary>
	    /// <param name="visualizer">The dto object.</param>
	    /// <returns>The dto key of the newly created visualizer.</returns>
	    [OperationContract]
	    string CreateVisualizer(VisualizerDto visualizer);
	
	    /// <summary>
	    /// Updates visualizer in the database from the given dto object.
	    /// </summary>
	    /// <param name="visualizer">The dto object.</param>
	    [OperationContract]
	    void UpdateVisualizer(VisualizerDto visualizer);
	
	    /// <summary>
	    /// Update an existing visualizers in the database from the given dto object list.
	    /// </summary>
	    /// <param name="visualizers">The dto object list.</param>
	    [OperationContract]
	    void UpdateVisualizers(IEnumerable<VisualizerDto> visualizers);
	
	    /// <summary>
	    /// Deletes visualizer from the database by the given dto object.
	    /// </summary>
	    /// <param name="visualizer">The dto object.</param>
	    [OperationContract]
	    void DeleteVisualizer(VisualizerDto visualizer);
	
	    /// <summary>
	    /// Delete visualizers from the database by the given dto object list.
	    /// </summary>
	    /// <param name="visualizers">The dto object list.</param>
	    [OperationContract]
	    void DeleteVisualizers(IEnumerable<VisualizerDto> visualizers);
	    
	    #endregion
	    
	}
}
#pragma warning restore 1591
