#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FluentMappingGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using Construct.Server.Entities;
using Telerik.OpenAccess.Metadata.Relational;

namespace Construct.Server.Entities
{

	public partial class EntitiesModelFluentMetadataSource : FluentMetadataSource
	{
		
		protected override IList<MappingConfiguration> PrepareMapping()
		{
			List<MappingConfiguration> mappingConfigurations = new List<MappingConfiguration>();
			
			MappingConfiguration<Visualizer> visualizerConfiguration = this.GetVisualizerMappingConfiguration();
			mappingConfigurations.Add(visualizerConfiguration);
			
			MappingConfiguration<Visualization> visualizationConfiguration = this.GetVisualizationMappingConfiguration();
			mappingConfigurations.Add(visualizationConfiguration);
			
			MappingConfiguration<Source> sourceConfiguration = this.GetSourceMappingConfiguration();
			mappingConfigurations.Add(sourceConfiguration);
			
			MappingConfiguration<SensorRuntime> sensorruntimeConfiguration = this.GetSensorRuntimeMappingConfiguration();
			mappingConfigurations.Add(sensorruntimeConfiguration);
			
			MappingConfiguration<SensorHostType> sensorhosttypeConfiguration = this.GetSensorHostTypeMappingConfiguration();
			mappingConfigurations.Add(sensorhosttypeConfiguration);
			
			MappingConfiguration<SensorHost> sensorhostConfiguration = this.GetSensorHostMappingConfiguration();
			mappingConfigurations.Add(sensorhostConfiguration);
			
			MappingConfiguration<SensorCommand> sensorcommandConfiguration = this.GetSensorCommandMappingConfiguration();
			mappingConfigurations.Add(sensorcommandConfiguration);
			
			MappingConfiguration<Sensor> sensorConfiguration = this.GetSensorMappingConfiguration();
			mappingConfigurations.Add(sensorConfiguration);
			
			MappingConfiguration<SessionDesign> sessiondesignConfiguration = this.GetSessionDesignMappingConfiguration();
			mappingConfigurations.Add(sessiondesignConfiguration);
			
			MappingConfiguration<QuestionParameter> questionparameterConfiguration = this.GetQuestionParameterMappingConfiguration();
			mappingConfigurations.Add(questionparameterConfiguration);
			
			MappingConfiguration<Question> questionConfiguration = this.GetQuestionMappingConfiguration();
			mappingConfigurations.Add(questionConfiguration);
			
			MappingConfiguration<Item> itemConfiguration = this.GetItemMappingConfiguration();
			mappingConfigurations.Add(itemConfiguration);
			
			MappingConfiguration<Constant> constantConfiguration = this.GetConstantMappingConfiguration();
			mappingConfigurations.Add(constantConfiguration);
			
			MappingConfiguration<DataType> datatypeConfiguration = this.GetDataTypeMappingConfiguration();
			mappingConfigurations.Add(datatypeConfiguration);
			
			MappingConfiguration<DataTypeSource> datatypesourceConfiguration = this.GetDataTypeSourceMappingConfiguration();
			mappingConfigurations.Add(datatypesourceConfiguration);
			
			MappingConfiguration<Property> propertyConfiguration = this.GetPropertyMappingConfiguration();
			mappingConfigurations.Add(propertyConfiguration);
			
			MappingConfiguration<PropertyParent> propertyparentConfiguration = this.GetPropertyParentMappingConfiguration();
			mappingConfigurations.Add(propertyparentConfiguration);
			
			MappingConfiguration<PropertyType> propertytypeConfiguration = this.GetPropertyTypeMappingConfiguration();
			mappingConfigurations.Add(propertytypeConfiguration);
			
			MappingConfiguration<SensorTypeSource> sensortypesourceConfiguration = this.GetSensorTypeSourceMappingConfiguration();
			mappingConfigurations.Add(sensortypesourceConfiguration);
			
			MappingConfiguration<SessionNode> sessionnodeConfiguration = this.GetSessionNodeMappingConfiguration();
			mappingConfigurations.Add(sessionnodeConfiguration);
			
			MappingConfiguration<SessionDesignNode> sessiondesignnodeConfiguration = this.GetSessionDesignNodeMappingConfiguration();
			mappingConfigurations.Add(sessiondesignnodeConfiguration);
			
			MappingConfiguration<QuestionTypeSource> questiontypesourceConfiguration = this.GetQuestionTypeSourceMappingConfiguration();
			mappingConfigurations.Add(questiontypesourceConfiguration);
			
			MappingConfiguration<SensorCommandParameter> sensorcommandparameterConfiguration = this.GetSensorCommandParameterMappingConfiguration();
			mappingConfigurations.Add(sensorcommandparameterConfiguration);
			
			MappingConfiguration<Taxonomy> taxonomyConfiguration = this.GetTaxonomyMappingConfiguration();
			mappingConfigurations.Add(taxonomyConfiguration);
			
			MappingConfiguration<Label> labelConfiguration = this.GetLabelMappingConfiguration();
			mappingConfigurations.Add(labelConfiguration);
			
			MappingConfiguration<TaxonomyLabel> taxonomylabelConfiguration = this.GetTaxonomyLabelMappingConfiguration();
			mappingConfigurations.Add(taxonomylabelConfiguration);
			
			MappingConfiguration<Session> sessionConfiguration = this.GetSessionMappingConfiguration();
			mappingConfigurations.Add(sessionConfiguration);
			
			MappingConfiguration<SessionSource> sessionsourceConfiguration = this.GetSessionSourceMappingConfiguration();
			mappingConfigurations.Add(sessionsourceConfiguration);
			
			MappingConfiguration<HumanReadableSensor> humanreadablesensorConfiguration = this.GetHumanReadableSensorMappingConfiguration();
			mappingConfigurations.Add(humanreadablesensorConfiguration);
			
			return mappingConfigurations;
		}
		
		protected override void SetContainerSettings(MetadataContainer container)
		{
			container.Name = "EntitiesModel";
			container.DefaultNamespace = "Construct.Server.Entities";
			container.NameGenerator.RemoveLeadingUnderscores = false;
			container.NameGenerator.SourceStrategy = Telerik.OpenAccess.Metadata.NamingSourceStrategy.Property;
			container.NameGenerator.RemoveCamelCase = false;
		}
		public MappingConfiguration<Visualizer> GetVisualizerMappingConfiguration()
		{
			MappingConfiguration<Visualizer> configuration = this.GetVisualizerClassConfiguration();
			this.PrepareVisualizerPropertyConfigurations(configuration);
			this.PrepareVisualizerAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Visualizer> GetVisualizerClassConfiguration()
		{
			MappingConfiguration<Visualizer> configuration = new MappingConfiguration<Visualizer>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Visualizations_Visualizer");
	
			return configuration;
		}
	
		public void PrepareVisualizerPropertyConfigurations(MappingConfiguration<Visualizer> configuration)
		{
			configuration.HasProperty(x => x.Name).HasFieldName("names").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNotNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Description).HasFieldName("descriptions").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Description").IsNotNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.LayoutString).HasFieldName("layoutStrings").ToColumn("LayoutString").IsNotNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}
	
		public void PrepareVisualizerAssociationConfigurations(MappingConfiguration<Visualizer> configuration)
		{
			configuration.HasAssociation(x => x.Visualizations).HasFieldName("visualizations").WithOpposite(x => x.Visualizer).ToColumn("VisualizerID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Visualization> GetVisualizationMappingConfiguration()
		{
			MappingConfiguration<Visualization> configuration = this.GetVisualizationClassConfiguration();
			this.PrepareVisualizationPropertyConfigurations(configuration);
			this.PrepareVisualizationAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Visualization> GetVisualizationClassConfiguration()
		{
			MappingConfiguration<Visualization> configuration = new MappingConfiguration<Visualization>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Visualizations_Visualization");
	
			return configuration;
		}
	
		public void PrepareVisualizationPropertyConfigurations(MappingConfiguration<Visualization> configuration)
		{
			configuration.HasProperty(x => x.VisualizerID).HasFieldName("visualizerIDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("VisualizerID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PropertyID).HasFieldName("propertyIDs").ToColumn("PropertyID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PaneID).HasFieldName("paneIDs").ToColumn("PaneID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.SourceID).HasFieldName("sourceIDs").ToColumn("SourceID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareVisualizationAssociationConfigurations(MappingConfiguration<Visualization> configuration)
		{
			configuration.HasAssociation(x => x.Visualizer).HasFieldName("visualizers").WithOpposite(x => x.Visualizations).ToColumn("VisualizerID").IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Source> GetSourceMappingConfiguration()
		{
			MappingConfiguration<Source> configuration = this.GetSourceClassConfiguration();
			this.PrepareSourcePropertyConfigurations(configuration);
			this.PrepareSourceAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Source> GetSourceClassConfiguration()
		{
			MappingConfiguration<Source> configuration = new MappingConfiguration<Source>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Default).HasDiscriminatorValue("{no}").ToTable("Sources_Source");
	
			return configuration;
		}
	
		public void PrepareSourcePropertyConfigurations(MappingConfiguration<Source> configuration)
		{
			configuration.HasProperty(x => x.DataTypeSourceID).HasFieldName("dataTypeSourceIDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DataTypeSourceID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareSourceAssociationConfigurations(MappingConfiguration<Source> configuration)
		{
			configuration.HasAssociation(x => x.DataTypeSource).HasFieldName("dataTypeSources").WithOpposite(x => x.Sources).ToColumn("DataTypeSourceID").IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Items).HasFieldName("items").WithOpposite(x => x.Source).ToColumn("SourceId").HasConstraint((y, x) =>  x.SourceId == y.ID ).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.SessionSources).HasFieldName("sessionSources").WithOpposite(x => x.Source).ToColumn("SourceID").WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<SensorRuntime> GetSensorRuntimeMappingConfiguration()
		{
			MappingConfiguration<SensorRuntime> configuration = this.GetSensorRuntimeClassConfiguration();
			this.PrepareSensorRuntimePropertyConfigurations(configuration);
			this.PrepareSensorRuntimeAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<SensorRuntime> GetSensorRuntimeClassConfiguration()
		{
			MappingConfiguration<SensorRuntime> configuration = new MappingConfiguration<SensorRuntime>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Sources_SensorRuntime");
	
			return configuration;
		}
	
		public void PrepareSensorRuntimePropertyConfigurations(MappingConfiguration<SensorRuntime> configuration)
		{
			configuration.HasProperty(x => x.RecCreationDate).HasFieldName("recCreationDates").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RecCreationDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.InstallerZip).HasFieldName("installerZips").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("InstallerZip").IsNullable().HasColumnType("varbinary(max)");
			configuration.HasProperty(x => x.InstallerXml).HasFieldName("installerXmls").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("InstallerXml").IsNullable().HasColumnType("varchar(max)").HasLength(0);
			configuration.HasProperty(x => x.InstallerUri).HasFieldName("installerUris").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("InstallerUri").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CacheUri).HasFieldName("cacheUris").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CacheUri").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.SensorTypeSourceID).HasFieldName("sensorTypeSourceIDs").ToColumn("SensorTypeSourceID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareSensorRuntimeAssociationConfigurations(MappingConfiguration<SensorRuntime> configuration)
		{
			configuration.HasAssociation(x => x.SensorTypeSource).HasFieldName("sensorTypeSources").WithOpposite(x => x.SensorRuntimes).ToColumn("SensorTypeSourceID").IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<SensorHostType> GetSensorHostTypeMappingConfiguration()
		{
			MappingConfiguration<SensorHostType> configuration = this.GetSensorHostTypeClassConfiguration();
			this.PrepareSensorHostTypePropertyConfigurations(configuration);
			this.PrepareSensorHostTypeAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<SensorHostType> GetSensorHostTypeClassConfiguration()
		{
			MappingConfiguration<SensorHostType> configuration = new MappingConfiguration<SensorHostType>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Sources_SensorHostType");
	
			return configuration;
		}
	
		public void PrepareSensorHostTypePropertyConfigurations(MappingConfiguration<SensorHostType> configuration)
		{
			configuration.HasProperty(x => x.SensorHostTypeName).HasFieldName("sensorHostTypeNames").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SensorHostTypeName").IsNotNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.ParentID).HasFieldName("parentIDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ParentID").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsCategory).HasFieldName("isCategories").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsCategory").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareSensorHostTypeAssociationConfigurations(MappingConfiguration<SensorHostType> configuration)
		{
			configuration.HasAssociation(x => x.SensorHosts).HasFieldName("sensorHosts").WithOpposite(x => x.SensorHostType).ToColumn("SensorHostTypeID").HasConstraint((y, x) =>  x.SensorHostTypeID == y.ID ).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.SensorDataTypeSources).HasFieldName("sensorDataTypeSources").WithOpposite(x => x.SensorHostType).ToColumn("SensorHostTypeID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<SensorHost> GetSensorHostMappingConfiguration()
		{
			MappingConfiguration<SensorHost> configuration = this.GetSensorHostClassConfiguration();
			this.PrepareSensorHostPropertyConfigurations(configuration);
			this.PrepareSensorHostAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<SensorHost> GetSensorHostClassConfiguration()
		{
			MappingConfiguration<SensorHost> configuration = new MappingConfiguration<SensorHost>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Sources_SensorHost");
	
			return configuration;
		}
	
		public void PrepareSensorHostPropertyConfigurations(MappingConfiguration<SensorHost> configuration)
		{
			configuration.HasProperty(x => x.SensorHostTypeID).HasFieldName("sensorHostTypeIDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SensorHostTypeID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsHealthy).HasFieldName("isHealthies").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsHealthy").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.HostUri).HasFieldName("hostUris").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("HostUri").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.HostName).HasFieldName("hostNames").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("HostName").IsNotNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}
	
		public void PrepareSensorHostAssociationConfigurations(MappingConfiguration<SensorHost> configuration)
		{
			configuration.HasAssociation(x => x.SensorHostType).HasFieldName("sensorHostTypes").WithOpposite(x => x.SensorHosts).ToColumn("SensorHostTypeID").HasConstraint((x, y) =>  x.SensorHostTypeID == y.ID ).IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Sensors).HasFieldName("sensors").WithOpposite(x => x.SensorHost).ToColumn("SensorHostID").HasConstraint((y, x) =>  x.SensorHostID == y.ID ).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<SensorCommand> GetSensorCommandMappingConfiguration()
		{
			MappingConfiguration<SensorCommand> configuration = this.GetSensorCommandClassConfiguration();
			this.PrepareSensorCommandPropertyConfigurations(configuration);
			this.PrepareSensorCommandAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<SensorCommand> GetSensorCommandClassConfiguration()
		{
			MappingConfiguration<SensorCommand> configuration = new MappingConfiguration<SensorCommand>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Sources_SensorCommand");
	
			return configuration;
		}
	
		public void PrepareSensorCommandPropertyConfigurations(MappingConfiguration<SensorCommand> configuration)
		{
			configuration.HasProperty(x => x.SensorTypeSourceID).HasFieldName("sensorTypeSourceIDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SensorTypeSourceID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CommandName).HasFieldName("commandNames").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CommandName").IsNotNullable().HasColumnType("nvarchar").HasLength(50);
		}
	
		public void PrepareSensorCommandAssociationConfigurations(MappingConfiguration<SensorCommand> configuration)
		{
			configuration.HasAssociation(x => x.SensorTypeSource).HasFieldName("sensorTypeSources").WithOpposite(x => x.SensorCommands).ToColumn("SensorTypeSourceID").IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.SensorCommandParameters).HasFieldName("sensorCommandParameters").WithOpposite(x => x.SensorCommand).ToColumn("SensorCommandID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Sensor> GetSensorMappingConfiguration()
		{
			MappingConfiguration<Sensor> configuration = this.GetSensorClassConfiguration();
			this.PrepareSensorPropertyConfigurations(configuration);
			this.PrepareSensorAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Sensor> GetSensorClassConfiguration()
		{
			MappingConfiguration<Sensor> configuration = new MappingConfiguration<Sensor>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("Sources_Sensor");
	
			return configuration;
		}
	
		public void PrepareSensorPropertyConfigurations(MappingConfiguration<Sensor> configuration)
		{
			configuration.HasProperty(x => x.SensorHostID).HasFieldName("sensorHostIDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SensorHostID").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsHealthy).HasFieldName("isHealthies").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsHealthy").IsNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.InstalledFromServerDate).HasFieldName("installedFromServerDates").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("InstalledFromServerDate").IsNullable().HasColumnType("datetime2");
			configuration.HasProperty(x => x.CurrentRendezvous).HasFieldName("currentRendezvous").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CurrentRendezvous").IsNullable().HasColumnType("nvarchar").HasLength(100);
			configuration.HasProperty(x => x.SensorTypeSourceID).HasFieldName("sensorTypeSourceIDs").ToColumn("SensorTypeSourceID").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareSensorAssociationConfigurations(MappingConfiguration<Sensor> configuration)
		{
			configuration.HasAssociation(x => x.SensorHost).HasFieldName("sensorHosts").WithOpposite(x => x.Sensors).ToColumn("SensorHostID").HasConstraint((x, y) =>  x.SensorHostID == y.ID ).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.SensorTypeSource).HasFieldName("sensorTypeSources").WithOpposite(x => x.Sensors).ToColumn("SensorTypeSourceID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<SessionDesign> GetSessionDesignMappingConfiguration()
		{
			MappingConfiguration<SessionDesign> configuration = this.GetSessionDesignClassConfiguration();
			this.PrepareSessionDesignPropertyConfigurations(configuration);
			this.PrepareSessionDesignAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<SessionDesign> GetSessionDesignClassConfiguration()
		{
			MappingConfiguration<SessionDesign> configuration = new MappingConfiguration<SessionDesign>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Sessions_SessionDesign");
	
			return configuration;
		}
	
		public void PrepareSessionDesignPropertyConfigurations(MappingConfiguration<SessionDesign> configuration)
		{
			configuration.HasProperty(x => x.Name).HasFieldName("names").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNotNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.IsReadOnly).HasFieldName("isReadOnlies").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsReadOnly").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsComplete).HasFieldName("isCompletes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsComplete").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Description).HasFieldName("descriptions").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Description").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}
	
		public void PrepareSessionDesignAssociationConfigurations(MappingConfiguration<SessionDesign> configuration)
		{
			configuration.HasAssociation(x => x.SessionDesignNodes).HasFieldName("sessionDesignNodes").WithOpposite(x => x.SessionDesign).HasConstraint().IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<QuestionParameter> GetQuestionParameterMappingConfiguration()
		{
			MappingConfiguration<QuestionParameter> configuration = this.GetQuestionParameterClassConfiguration();
			this.PrepareQuestionParameterPropertyConfigurations(configuration);
			this.PrepareQuestionParameterAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<QuestionParameter> GetQuestionParameterClassConfiguration()
		{
			MappingConfiguration<QuestionParameter> configuration = new MappingConfiguration<QuestionParameter>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Questions_QuestionParameter");
	
			return configuration;
		}
	
		public void PrepareQuestionParameterPropertyConfigurations(MappingConfiguration<QuestionParameter> configuration)
		{
			configuration.HasProperty(x => x.PropertyID).HasFieldName("propertyIDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PropertyID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PropertyTypeID).HasFieldName("propertyTypeIDs").ToColumn("TypePropertyID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.QuestionID).HasFieldName("questionIDs");
		}
	
		public void PrepareQuestionParameterAssociationConfigurations(MappingConfiguration<QuestionParameter> configuration)
		{
			configuration.HasAssociation(x => x.Property).HasFieldName("properties").WithOpposite(x => x.QuestionParameters).ToColumn("PropertyID").IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Question).HasFieldName("questions").WithOpposite(x => x.QuestionParameters).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Question> GetQuestionMappingConfiguration()
		{
			MappingConfiguration<Question> configuration = this.GetQuestionClassConfiguration();
			this.PrepareQuestionPropertyConfigurations(configuration);
			this.PrepareQuestionAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Question> GetQuestionClassConfiguration()
		{
			MappingConfiguration<Question> configuration = new MappingConfiguration<Question>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("Questions_Question");
	
			return configuration;
		}
	
		public void PrepareQuestionPropertyConfigurations(MappingConfiguration<Question> configuration)
		{
			configuration.HasProperty(x => x.QuestionTypeSourceID).HasFieldName("questionTypeSourceIDs").ToColumn("QuestionTypeSourceID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.LinqExpression).HasFieldName("linqExpressions");
			configuration.HasProperty(x => x.PropertyID).HasFieldName("propertyIDs");
			configuration.HasProperty(x => x.DataTypeID).HasFieldName("dataTypeIDs");
		}
	
		public void PrepareQuestionAssociationConfigurations(MappingConfiguration<Question> configuration)
		{
			configuration.HasAssociation(x => x.QuestionTypeSource).HasFieldName("questionTypeSources").WithOpposite(x => x.Questions).ToColumn("QuestionTypeSourceID").IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.QuestionParameters).HasFieldName("questionParameters").WithOpposite(x => x.Question).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Item> GetItemMappingConfiguration()
		{
			MappingConfiguration<Item> configuration = this.GetItemClassConfiguration();
			this.PrepareItemPropertyConfigurations(configuration);
			this.PrepareItemAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Item> GetItemClassConfiguration()
		{
			MappingConfiguration<Item> configuration = new MappingConfiguration<Item>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Items_Item");
	
			return configuration;
		}
	
		public void PrepareItemPropertyConfigurations(MappingConfiguration<Item> configuration)
		{
			configuration.HasProperty(x => x.SourceTime).HasFieldName("sourceTimes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SourceTime").IsNotNullable().HasColumnType("datetime2");
			configuration.HasProperty(x => x.SourceId).HasFieldName("sourceIds").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SourceId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.RecordCreationTime).HasFieldName("recordCreationTimes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RecordCreationTime").IsNotNullable().HasColumnType("datetime2");
			configuration.HasProperty(x => x.Longitude).HasFieldName("longitudes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Longitude").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.Location).HasFieldName("locations").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Location").IsNullable().HasColumnType("geography");
			configuration.HasProperty(x => x.Latitude).HasFieldName("latitudes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Latitude").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.DataTypeID).HasFieldName("dataTypeIDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DataTypeID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareItemAssociationConfigurations(MappingConfiguration<Item> configuration)
		{
			configuration.HasAssociation(x => x.Source).HasFieldName("sources").WithOpposite(x => x.Items).ToColumn("SourceId").HasConstraint((x, y) =>  x.SourceId == y.ID ).IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.DataType).HasFieldName("dataTypes").WithOpposite(x => x.Items).ToColumn("DataTypeID").IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Constant> GetConstantMappingConfiguration()
		{
			MappingConfiguration<Constant> configuration = this.GetConstantClassConfiguration();
			this.PrepareConstantPropertyConfigurations(configuration);
			this.PrepareConstantAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Constant> GetConstantClassConfiguration()
		{
			MappingConfiguration<Constant> configuration = new MappingConfiguration<Constant>();
			configuration.MapType(x => new { }).ToTable("Constants_Constant");
	
			return configuration;
		}
	
		public void PrepareConstantPropertyConfigurations(MappingConfiguration<Constant> configuration)
		{
			configuration.HasProperty(x => x.Name).HasFieldName("names").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNotNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.DataTypeSourceID).HasFieldName("dataTypeSourceIDs").ToColumn("DataTypeSourceID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareConstantAssociationConfigurations(MappingConfiguration<Constant> configuration)
		{
			configuration.HasAssociation(x => x.DataTypeSource).HasFieldName("dataTypeSources").WithOpposite(x => x.Constants).ToColumn("DataTypeSourceID").IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<DataType> GetDataTypeMappingConfiguration()
		{
			MappingConfiguration<DataType> configuration = this.GetDataTypeClassConfiguration();
			this.PrepareDataTypePropertyConfigurations(configuration);
			this.PrepareDataTypeAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<DataType> GetDataTypeClassConfiguration()
		{
			MappingConfiguration<DataType> configuration = new MappingConfiguration<DataType>();
			configuration.MapType(x => new { }).ToTable("Types_DataType");
	
			return configuration;
		}
	
		public void PrepareDataTypePropertyConfigurations(MappingConfiguration<DataType> configuration)
		{
			configuration.HasProperty(x => x.Name).HasFieldName("names").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNotNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.IsReadOnly).HasFieldName("isReadOnlies").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsReadOnly").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsCoreType).HasFieldName("isCoreTypes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsCoreType").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.FullName).HasFieldName("fullNames").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FullName").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.DataTypeSourceID).HasFieldName("dataTypeSourceIDs").ToColumn("DataTypeSourceID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.DataTypeParentID).HasFieldName("dataTypeParentIDs").ToColumn("DataTypeParentID").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareDataTypeAssociationConfigurations(MappingConfiguration<DataType> configuration)
		{
			configuration.HasAssociation(x => x.DataTypeParent).HasFieldName("dataType1").WithOpposite(x => x.DataTypeChildren).ToColumn("DataTypeParentID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.DataTypeSource).HasFieldName("dataTypeSources").WithOpposite(x => x.DataTypes).ToColumn("DataTypeSourceID").IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Items).HasFieldName("items").WithOpposite(x => x.DataType).ToColumn("DataTypeID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.DataTypeChildren).HasFieldName("dataTypes").WithOpposite(x => x.DataTypeParent).ToColumn("DataTypeParentID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.SessionDesignNodes).HasFieldName("sessionDesignNodes").WithOpposite(x => x.DataType).HasConstraint().IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PropertyParents).HasFieldName("propertyParents").WithOpposite(x => x.DataType).ToColumn("ParentDataTypeID").WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<DataTypeSource> GetDataTypeSourceMappingConfiguration()
		{
			MappingConfiguration<DataTypeSource> configuration = this.GetDataTypeSourceClassConfiguration();
			this.PrepareDataTypeSourcePropertyConfigurations(configuration);
			this.PrepareDataTypeSourceAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<DataTypeSource> GetDataTypeSourceClassConfiguration()
		{
			MappingConfiguration<DataTypeSource> configuration = new MappingConfiguration<DataTypeSource>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).Inheritance(InheritanceStrategy.Default).HasDiscriminatorValue("{no}").ToTable("Sources_DataTypeSource");
	
			return configuration;
		}
	
		public void PrepareDataTypeSourcePropertyConfigurations(MappingConfiguration<DataTypeSource> configuration)
		{
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsCategory).HasFieldName("isCategories").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsCategory").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsReadOnly).HasFieldName("isReadOnlies").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsReadOnly").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Name).HasFieldName("names").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNotNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.ParentID).HasFieldName("parentIDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ParentID").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareDataTypeSourceAssociationConfigurations(MappingConfiguration<DataTypeSource> configuration)
		{
			configuration.HasAssociation(x => x.DataTypeSource1).HasFieldName("dataTypeSource1").WithOpposite(x => x.DataTypeSources).ToColumn("ParentID").HasConstraint((x, y) =>  x.ParentID == y.ID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Sources).HasFieldName("sources").WithOpposite(x => x.DataTypeSource).ToColumn("DataTypeSourceID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.DataTypes).HasFieldName("dataTypes").WithOpposite(x => x.DataTypeSource).ToColumn("DataTypeSourceID").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Constants).HasFieldName("constants").WithOpposite(x => x.DataTypeSource).ToColumn("DataTypeSourceID").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.DataTypeSources).HasFieldName("dataTypeSources").WithOpposite(x => x.DataTypeSource1).ToColumn("ParentID").HasConstraint((y, x) =>  x.ParentID == y.ID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Property> GetPropertyMappingConfiguration()
		{
			MappingConfiguration<Property> configuration = this.GetPropertyClassConfiguration();
			this.PreparePropertyPropertyConfigurations(configuration);
			this.PreparePropertyAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Property> GetPropertyClassConfiguration()
		{
			MappingConfiguration<Property> configuration = new MappingConfiguration<Property>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Default).HasDiscriminatorValue("{no}").ToTable("Types_Property");
	
			return configuration;
		}
	
		public void PreparePropertyPropertyConfigurations(MappingConfiguration<Property> configuration)
		{
			configuration.HasProperty(x => x.ID).IsIdentity(KeyGenerator.Guid).HasFieldName("iDs").ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Name).HasFieldName("names").ToColumn("Name").IsNotNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}
	
		public void PreparePropertyAssociationConfigurations(MappingConfiguration<Property> configuration)
		{
			configuration.HasAssociation(x => x.QuestionParameters).HasFieldName("questionParameters").WithOpposite(x => x.Property).ToColumn("PropertyID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<PropertyParent> GetPropertyParentMappingConfiguration()
		{
			MappingConfiguration<PropertyParent> configuration = this.GetPropertyParentClassConfiguration();
			this.PreparePropertyParentPropertyConfigurations(configuration);
			this.PreparePropertyParentAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PropertyParent> GetPropertyParentClassConfiguration()
		{
			MappingConfiguration<PropertyParent> configuration = new MappingConfiguration<PropertyParent>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("Types_PropertyParent");
	
			return configuration;
		}
	
		public void PreparePropertyParentPropertyConfigurations(MappingConfiguration<PropertyParent> configuration)
		{
			configuration.HasProperty(x => x.ParentDataTypeID).HasFieldName("parentDataTypeIDs").ToColumn("ParentDataTypeID").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PreparePropertyParentAssociationConfigurations(MappingConfiguration<PropertyParent> configuration)
		{
			configuration.HasAssociation(x => x.DataType).HasFieldName("dataTypes").WithOpposite(x => x.PropertyParents).ToColumn("ParentDataTypeID").WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<PropertyType> GetPropertyTypeMappingConfiguration()
		{
			MappingConfiguration<PropertyType> configuration = this.GetPropertyTypeClassConfiguration();
			this.PreparePropertyTypePropertyConfigurations(configuration);
			this.PreparePropertyTypeAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PropertyType> GetPropertyTypeClassConfiguration()
		{
			MappingConfiguration<PropertyType> configuration = new MappingConfiguration<PropertyType>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("Types_PropertyType");
	
			return configuration;
		}
	
		public void PreparePropertyTypePropertyConfigurations(MappingConfiguration<PropertyType> configuration)
		{
			configuration.HasProperty(x => x.PropertyDataTypeID).HasFieldName("propertyDataTypeIDs").ToColumn("PropertyDataTypeID").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PreparePropertyTypeAssociationConfigurations(MappingConfiguration<PropertyType> configuration)
		{
			configuration.HasAssociation(x => x.DataType).HasFieldName("dataTypes").ToColumn("PropertyDataTypeID").WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<SensorTypeSource> GetSensorTypeSourceMappingConfiguration()
		{
			MappingConfiguration<SensorTypeSource> configuration = this.GetSensorTypeSourceClassConfiguration();
			this.PrepareSensorTypeSourcePropertyConfigurations(configuration);
			this.PrepareSensorTypeSourceAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<SensorTypeSource> GetSensorTypeSourceClassConfiguration()
		{
			MappingConfiguration<SensorTypeSource> configuration = new MappingConfiguration<SensorTypeSource>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("Sources_SensorTypeSource");
	
			return configuration;
		}
	
		public void PrepareSensorTypeSourcePropertyConfigurations(MappingConfiguration<SensorTypeSource> configuration)
		{
			configuration.HasProperty(x => x.SensorHostTypeID).HasFieldName("sensorHostTypeIDs").ToColumn("SensorHostTypeID").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Version).HasFieldName("versions").ToColumn("Version").IsNullable().HasColumnType("varchar").HasLength(255);
		}
	
		public void PrepareSensorTypeSourceAssociationConfigurations(MappingConfiguration<SensorTypeSource> configuration)
		{
			configuration.HasAssociation(x => x.SensorHostType).HasFieldName("sensorHostTypes").WithOpposite(x => x.SensorDataTypeSources).ToColumn("SensorHostTypeID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.SensorRuntimes).HasFieldName("sensorRuntimes").WithOpposite(x => x.SensorTypeSource).ToColumn("SensorTypeSourceID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.SensorCommands).HasFieldName("sensorCommands").WithOpposite(x => x.SensorTypeSource).ToColumn("SensorTypeSourceID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Sensors).HasFieldName("sensors").WithOpposite(x => x.SensorTypeSource).ToColumn("SensorTypeSourceID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<SessionNode> GetSessionNodeMappingConfiguration()
		{
			MappingConfiguration<SessionNode> configuration = this.GetSessionNodeClassConfiguration();
			this.PrepareSessionNodePropertyConfigurations(configuration);
			this.PrepareSessionNodeAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<SessionNode> GetSessionNodeClassConfiguration()
		{
			MappingConfiguration<SessionNode> configuration = new MappingConfiguration<SessionNode>();
			configuration.MapType(x => new { }).ToTable("Sessions_SessionNode");
	
			return configuration;
		}
	
		public void PrepareSessionNodePropertyConfigurations(MappingConfiguration<SessionNode> configuration)
		{
			configuration.HasProperty(x => x.ID).IsIdentity().HasFieldName("iDs");
			configuration.HasProperty(x => x.SessionDesignNodeID).HasFieldName("sessionDesignNodeIDs");
		}
	
		public void PrepareSessionNodeAssociationConfigurations(MappingConfiguration<SessionNode> configuration)
		{
			configuration.HasAssociation(x => x.SessionDesignNode).HasFieldName("sessionDesignNodes").WithOpposite(x => x.SessionNodes).HasConstraint().IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<SessionDesignNode> GetSessionDesignNodeMappingConfiguration()
		{
			MappingConfiguration<SessionDesignNode> configuration = this.GetSessionDesignNodeClassConfiguration();
			this.PrepareSessionDesignNodePropertyConfigurations(configuration);
			this.PrepareSessionDesignNodeAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<SessionDesignNode> GetSessionDesignNodeClassConfiguration()
		{
			MappingConfiguration<SessionDesignNode> configuration = new MappingConfiguration<SessionDesignNode>();
			configuration.MapType(x => new { }).ToTable("Sessions_SessionDesignNode");
	
			return configuration;
		}
	
		public void PrepareSessionDesignNodePropertyConfigurations(MappingConfiguration<SessionDesignNode> configuration)
		{
			configuration.HasProperty(x => x.SourceID).HasFieldName("sourceID");
			configuration.HasProperty(x => x.DataTypeID).HasFieldName("dataTypeID");
			configuration.HasProperty(x => x.SessionDesignID).HasFieldName("sessionDesignID");
			configuration.HasProperty(x => x.ID).IsIdentity().HasFieldName("id");
		}
	
		public void PrepareSessionDesignNodeAssociationConfigurations(MappingConfiguration<SessionDesignNode> configuration)
		{
			configuration.HasAssociation(x => x.DataType).HasFieldName("dataTypes").WithOpposite(x => x.SessionDesignNodes).HasConstraint().IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.SessionDesign).HasFieldName("sessionDesigns").WithOpposite(x => x.SessionDesignNodes).HasConstraint().IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.SessionNodes).HasFieldName("sessionNodes").WithOpposite(x => x.SessionDesignNode).HasConstraint().IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<QuestionTypeSource> GetQuestionTypeSourceMappingConfiguration()
		{
			MappingConfiguration<QuestionTypeSource> configuration = this.GetQuestionTypeSourceClassConfiguration();
			this.PrepareQuestionTypeSourceAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<QuestionTypeSource> GetQuestionTypeSourceClassConfiguration()
		{
			MappingConfiguration<QuestionTypeSource> configuration = new MappingConfiguration<QuestionTypeSource>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("Questions_QuestionTypeSource");
	
			return configuration;
		}
	
		public void PrepareQuestionTypeSourceAssociationConfigurations(MappingConfiguration<QuestionTypeSource> configuration)
		{
			configuration.HasAssociation(x => x.Questions).HasFieldName("questions").WithOpposite(x => x.QuestionTypeSource).ToColumn("QuestionTypeSourceID").WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<SensorCommandParameter> GetSensorCommandParameterMappingConfiguration()
		{
			MappingConfiguration<SensorCommandParameter> configuration = this.GetSensorCommandParameterClassConfiguration();
			this.PrepareSensorCommandParameterPropertyConfigurations(configuration);
			this.PrepareSensorCommandParameterAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<SensorCommandParameter> GetSensorCommandParameterClassConfiguration()
		{
			MappingConfiguration<SensorCommandParameter> configuration = new MappingConfiguration<SensorCommandParameter>();
			configuration.MapType(x => new { }).ToTable("Sources_SensorCommandParameter");
	
			return configuration;
		}
	
		public void PrepareSensorCommandParameterPropertyConfigurations(MappingConfiguration<SensorCommandParameter> configuration)
		{
			configuration.HasProperty(x => x.Value).HasFieldName("values").ToColumn("val").IsNotNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.SensorCommandID).HasFieldName("sensorCommandIDs").ToColumn("SensorCommandID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Key).HasFieldName("keys").ToColumn("ky").IsNotNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.ID).IsIdentity().HasFieldName("id").ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareSensorCommandParameterAssociationConfigurations(MappingConfiguration<SensorCommandParameter> configuration)
		{
			configuration.HasAssociation(x => x.SensorCommand).HasFieldName("sensorCommands").WithOpposite(x => x.SensorCommandParameters).ToColumn("SensorCommandID").IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Taxonomy> GetTaxonomyMappingConfiguration()
		{
			MappingConfiguration<Taxonomy> configuration = this.GetTaxonomyClassConfiguration();
			this.PrepareTaxonomyPropertyConfigurations(configuration);
			this.PrepareTaxonomyAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Taxonomy> GetTaxonomyClassConfiguration()
		{
			MappingConfiguration<Taxonomy> configuration = new MappingConfiguration<Taxonomy>();
			configuration.MapType(x => new { }).ToTable("Meaning_Taxonomy");
	
			return configuration;
		}
	
		public void PrepareTaxonomyPropertyConfigurations(MappingConfiguration<Taxonomy> configuration)
		{
			configuration.HasProperty(x => x.ID).IsIdentity().HasFieldName("iDs").ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Name).HasFieldName("names").ToColumn("Name").IsNotNullable().HasColumnType("nvarchar").HasLength(0);
		}
	
		public void PrepareTaxonomyAssociationConfigurations(MappingConfiguration<Taxonomy> configuration)
		{
			configuration.HasAssociation(x => x.TaxonomyLabels).HasFieldName("taxonomyLabels").WithOpposite(x => x.Taxonomy).ToColumn("TaxonomyID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Label> GetLabelMappingConfiguration()
		{
			MappingConfiguration<Label> configuration = this.GetLabelClassConfiguration();
			this.PrepareLabelPropertyConfigurations(configuration);
			this.PrepareLabelAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Label> GetLabelClassConfiguration()
		{
			MappingConfiguration<Label> configuration = new MappingConfiguration<Label>();
			configuration.MapType(x => new { }).ToTable("Meaning_Label");
	
			return configuration;
		}
	
		public void PrepareLabelPropertyConfigurations(MappingConfiguration<Label> configuration)
		{
			configuration.HasProperty(x => x.ID).IsIdentity().HasFieldName("iDs").ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Name).HasFieldName("names").ToColumn("Name").IsNotNullable().HasColumnType("nvarchar").HasLength(0);
		}
	
		public void PrepareLabelAssociationConfigurations(MappingConfiguration<Label> configuration)
		{
			configuration.HasAssociation(x => x.TaxonomyLabels).HasFieldName("taxonomyLabels").WithOpposite(x => x.Label).ToColumn("LabelID").IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<TaxonomyLabel> GetTaxonomyLabelMappingConfiguration()
		{
			MappingConfiguration<TaxonomyLabel> configuration = this.GetTaxonomyLabelClassConfiguration();
			this.PrepareTaxonomyLabelPropertyConfigurations(configuration);
			this.PrepareTaxonomyLabelAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<TaxonomyLabel> GetTaxonomyLabelClassConfiguration()
		{
			MappingConfiguration<TaxonomyLabel> configuration = new MappingConfiguration<TaxonomyLabel>();
			configuration.MapType(x => new { }).ToTable("Meaning_TaxonomyLabel");
	
			return configuration;
		}
	
		public void PrepareTaxonomyLabelPropertyConfigurations(MappingConfiguration<TaxonomyLabel> configuration)
		{
			configuration.HasProperty(x => x.ID).IsIdentity().HasFieldName("iDs").ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TaxonomyID).HasFieldName("taxonomyIDs").ToColumn("TaxonomyID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.LabelID).HasFieldName("labelIDs").ToColumn("LabelID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareTaxonomyLabelAssociationConfigurations(MappingConfiguration<TaxonomyLabel> configuration)
		{
			configuration.HasAssociation(x => x.Taxonomy).HasFieldName("taxonomies").WithOpposite(x => x.TaxonomyLabels).ToColumn("TaxonomyID").IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Label).HasFieldName("labels").WithOpposite(x => x.TaxonomyLabels).ToColumn("LabelID").IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Session> GetSessionMappingConfiguration()
		{
			MappingConfiguration<Session> configuration = this.GetSessionClassConfiguration();
			this.PrepareSessionPropertyConfigurations(configuration);
			this.PrepareSessionAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Session> GetSessionClassConfiguration()
		{
			MappingConfiguration<Session> configuration = new MappingConfiguration<Session>();
			configuration.MapType(x => new { }).ToTable("Sessions_Session");
	
			return configuration;
		}
	
		public void PrepareSessionPropertyConfigurations(MappingConfiguration<Session> configuration)
		{
			configuration.HasProperty(x => x.ID).IsIdentity().HasFieldName("iDs").ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.StartTime).HasFieldName("startTimes").ToColumn("StartTime").IsNotNullable().HasColumnType("datetime2");
			configuration.HasProperty(x => x.Interval).HasFieldName("intervals").ToColumn("Interval").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.FriendlyName).HasFieldName("friendlyNames").ToColumn("FriendlyName").IsNotNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}
	
		public void PrepareSessionAssociationConfigurations(MappingConfiguration<Session> configuration)
		{
			configuration.HasAssociation(x => x.SessionSources).HasFieldName("sessionSources").WithOpposite(x => x.Session).ToColumn("SessionID").WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<SessionSource> GetSessionSourceMappingConfiguration()
		{
			MappingConfiguration<SessionSource> configuration = this.GetSessionSourceClassConfiguration();
			this.PrepareSessionSourcePropertyConfigurations(configuration);
			this.PrepareSessionSourceAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<SessionSource> GetSessionSourceClassConfiguration()
		{
			MappingConfiguration<SessionSource> configuration = new MappingConfiguration<SessionSource>();
			configuration.MapType(x => new { }).ToTable("Sessions_SessionSource");
	
			return configuration;
		}
	
		public void PrepareSessionSourcePropertyConfigurations(MappingConfiguration<SessionSource> configuration)
		{
			configuration.HasProperty(x => x.ID).IsIdentity().HasFieldName("iDs").ToColumn("ID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.SessionID).HasFieldName("sessionIDs").ToColumn("SessionID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.SourceID).HasFieldName("sourceIDs").ToColumn("SourceID").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareSessionSourceAssociationConfigurations(MappingConfiguration<SessionSource> configuration)
		{
			configuration.HasAssociation(x => x.Session).HasFieldName("sessions").WithOpposite(x => x.SessionSources).ToColumn("SessionID").IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Source).HasFieldName("sources").WithOpposite(x => x.SessionSources).ToColumn("SourceID").IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<HumanReadableSensor> GetHumanReadableSensorMappingConfiguration()
		{
			MappingConfiguration<HumanReadableSensor> configuration = this.GetHumanReadableSensorClassConfiguration();
			this.PrepareHumanReadableSensorPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<HumanReadableSensor> GetHumanReadableSensorClassConfiguration()
		{
			MappingConfiguration<HumanReadableSensor> configuration = new MappingConfiguration<HumanReadableSensor>();
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("Sources_HumanReadableSensor");
	
			return configuration;
		}
	
		public void PrepareHumanReadableSensorPropertyConfigurations(MappingConfiguration<HumanReadableSensor> configuration)
		{
			configuration.HasProperty(x => x.SensorTypeSourceID).HasFieldName("sensorTypeSourceIDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SensorTypeSourceID").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.SensorHostID).HasFieldName("sensorHostIDs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SensorHostID").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Name).HasFieldName("names").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNotNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.IsHealthy).HasFieldName("isHealthies").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsHealthy").IsNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.InstalledFromServerDate).HasFieldName("installedFromServerDates").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("InstalledFromServerDate").IsNullable().HasColumnType("datetime2");
			configuration.HasProperty(x => x.CurrentRendezvous).HasFieldName("currentRendezvous").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CurrentRendezvous").IsNullable().HasColumnType("nvarchar").HasLength(100);
		}
	}
}
#pragma warning restore 1591
