#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using Construct.Server.Entities;
using Microsoft.SqlServer.Types;


namespace Construct.Server.Entities	
{
	public partial class EntitiesModel : OpenAccessContext, IEntitiesModelUnitOfWork
	{
		private static string connectionStringName = @"Construct3Connection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
		
			
		private static MetadataSource metadataSource = new EntitiesModelFluentMetadataSource();
	
		public EntitiesModel()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public EntitiesModel(string connection)
			:base(connection, backend, metadataSource)
		{ }
	
		public EntitiesModel(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public EntitiesModel(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public EntitiesModel(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<Visualizer> Visualizers 
		{
	    	get
	    	{
	        	return this.GetAll<Visualizer>();
	    	}
		}
		
		public IQueryable<Visualization> Visualizations 
		{
	    	get
	    	{
	        	return this.GetAll<Visualization>();
	    	}
		}
		
		public IQueryable<Source> Sources 
		{
	    	get
	    	{
	        	return this.GetAll<Source>();
	    	}
		}
		
		public IQueryable<SensorRuntime> SensorRuntimes 
		{
	    	get
	    	{
	        	return this.GetAll<SensorRuntime>();
	    	}
		}
		
		public IQueryable<SensorHostType> SensorHostTypes 
		{
	    	get
	    	{
	        	return this.GetAll<SensorHostType>();
	    	}
		}
		
		public IQueryable<SensorHost> SensorHosts 
		{
	    	get
	    	{
	        	return this.GetAll<SensorHost>();
	    	}
		}
		
		public IQueryable<Sensor> Sensors 
		{
	    	get
	    	{
	        	return this.GetAll<Sensor>();
	    	}
		}
		
		public IQueryable<SessionDesignNode> SessionDesignNodes 
		{
	    	get
	    	{
	        	return this.GetAll<SessionDesignNode>();
	    	}
		}
		
		public IQueryable<SessionDesign> SessionDesigns 
		{
	    	get
	    	{
	        	return this.GetAll<SessionDesign>();
	    	}
		}
		
		public IQueryable<SensorCommandParameter> SensorCommandParameters 
		{
	    	get
	    	{
	        	return this.GetAll<SensorCommandParameter>();
	    	}
		}
		
		public IQueryable<QuestionParameter> QuestionParameters 
		{
	    	get
	    	{
	        	return this.GetAll<QuestionParameter>();
	    	}
		}
		
		public IQueryable<Question> Questions 
		{
	    	get
	    	{
	        	return this.GetAll<Question>();
	    	}
		}
		
		public IQueryable<Item> Items 
		{
	    	get
	    	{
	        	return this.GetAll<Item>();
	    	}
		}
		
		public IQueryable<Constant> Constants 
		{
	    	get
	    	{
	        	return this.GetAll<Constant>();
	    	}
		}
		
		public IQueryable<SensorCommand> SensorCommands 
		{
	    	get
	    	{
	        	return this.GetAll<SensorCommand>();
	    	}
		}
		
		public IQueryable<DataType> DataTypes 
		{
	    	get
	    	{
	        	return this.GetAll<DataType>();
	    	}
		}
		
		public IQueryable<DataTypeSource> DataTypeSources 
		{
	    	get
	    	{
	        	return this.GetAll<DataTypeSource>();
	    	}
		}
		
		public IQueryable<Property> Properties 
		{
	    	get
	    	{
	        	return this.GetAll<Property>();
	    	}
		}
		
		public IQueryable<PropertyParent> PropertyParents 
		{
	    	get
	    	{
	        	return this.GetAll<PropertyParent>();
	    	}
		}
		
		public IQueryable<PropertyType> PropertyTypes 
		{
	    	get
	    	{
	        	return this.GetAll<PropertyType>();
	    	}
		}
		
		public IQueryable<SensorTypeSource> SensorTypeSources 
		{
	    	get
	    	{
	        	return this.GetAll<SensorTypeSource>();
	    	}
		}
		
		public IQueryable<SessionNode> SessionNodes 
		{
	    	get
	    	{
	        	return this.GetAll<SessionNode>();
	    	}
		}
		
		public IQueryable<QuestionTypeSource> QuestionTypeSources 
		{
	    	get
	    	{
	        	return this.GetAll<QuestionTypeSource>();
	    	}
		}
		
		public IQueryable<Taxonomy> Taxonomies 
		{
	    	get
	    	{
	        	return this.GetAll<Taxonomy>();
	    	}
		}
		
		public IQueryable<Label> Labels 
		{
	    	get
	    	{
	        	return this.GetAll<Label>();
	    	}
		}
		
		public IQueryable<TaxonomyLabel> TaxonomyLabels 
		{
	    	get
	    	{
	        	return this.GetAll<TaxonomyLabel>();
	    	}
		}
		
		public IQueryable<Session> Sessions 
		{
	    	get
	    	{
	        	return this.GetAll<Session>();
	    	}
		}
		
		public IQueryable<SessionSource> SessionSources 
		{
	    	get
	    	{
	        	return this.GetAll<SessionSource>();
	    	}
		}
		
		public IQueryable<HumanReadableSensor> HumanReadableSensors 
		{
	    	get
	    	{
	        	return this.GetAll<HumanReadableSensor>();
	    	}
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "mssql";
			backend.ProviderName = "System.Data.SqlClient";
			backend.Logging.MetricStoreSnapshotInterval = 0;
			backend.Runtime.UseUTCForAutoSetValues = true;
			return backend;
		}
	}

	public interface IEntitiesModelUnitOfWork : IUnitOfWork
	{
		IQueryable<Visualizer> Visualizers 
		{ 
			get;
		}

		IQueryable<Visualization> Visualizations 
		{ 
			get;
		}

		IQueryable<Source> Sources 
		{ 
			get;
		}

		IQueryable<SensorRuntime> SensorRuntimes 
		{ 
			get;
		}

		IQueryable<SensorHostType> SensorHostTypes 
		{ 
			get;
		}

		IQueryable<SensorHost> SensorHosts 
		{ 
			get;
		}

		IQueryable<Sensor> Sensors 
		{ 
			get;
		}

		IQueryable<SessionDesignNode> SessionDesignNodes 
		{ 
			get;
		}

		IQueryable<SessionDesign> SessionDesigns 
		{ 
			get;
		}

		IQueryable<SensorCommandParameter> SensorCommandParameters 
		{ 
			get;
		}

		IQueryable<QuestionParameter> QuestionParameters 
		{ 
			get;
		}

		IQueryable<Question> Questions 
		{ 
			get;
		}

		IQueryable<Item> Items 
		{ 
			get;
		}

		IQueryable<Constant> Constants 
		{ 
			get;
		}

		IQueryable<SensorCommand> SensorCommands 
		{ 
			get;
		}

		IQueryable<DataType> DataTypes 
		{ 
			get;
		}

		IQueryable<DataTypeSource> DataTypeSources 
		{ 
			get;
		}

		IQueryable<Property> Properties 
		{ 
			get;
		}

		IQueryable<PropertyParent> PropertyParents 
		{ 
			get;
		}

		IQueryable<PropertyType> PropertyTypes 
		{ 
			get;
		}

		IQueryable<SensorTypeSource> SensorTypeSources 
		{ 
			get;
		}

		IQueryable<SessionNode> SessionNodes 
		{ 
			get;
		}

		IQueryable<QuestionTypeSource> QuestionTypeSources 
		{ 
			get;
		}

		IQueryable<Taxonomy> Taxonomies 
		{ 
			get;
		}

		IQueryable<Label> Labels 
		{ 
			get;
		}

		IQueryable<TaxonomyLabel> TaxonomyLabels 
		{ 
			get;
		}

		IQueryable<Session> Sessions 
		{ 
			get;
		}

		IQueryable<SessionSource> SessionSources 
		{ 
			get;
		}

		IQueryable<HumanReadableSensor> HumanReadableSensors 
		{ 
			get;
		}

	}
}
#pragma warning restore 1591

